{"version":3,"file":"core-barcode.umd.min.js","sources":["../../src/core/barcode/barcode.ts"],"sourcesContent":["/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {ChangeDetectorRef, EventEmitter, Renderer2, OnDestroy} from '@angular/core';\nimport {ControlValueAccessor} from '@angular/forms';\nimport {coerceBooleanProperty} from '@ajf/core/utils';\n\nimport {BrowserBarcodeReader, Result} from '@zxing/library';\n\nimport {Observable, from, of, Subscription} from 'rxjs';\nimport {catchError, switchMap, debounceTime} from 'rxjs/operators';\n\nexport abstract class AjfBarcode implements ControlValueAccessor, OnDestroy {\n  protected _readonly: boolean;\n  get readonly(): boolean { return this._readonly; }\n  set readonly(readonly: boolean) {\n    this._readonly = coerceBooleanProperty(readonly);\n    this._cdr.markForCheck();\n  }\n\n  readonly codeReader = new BrowserBarcodeReader();\n\n  readonly startDetection = new EventEmitter<void>();\n  readonly startCalculation = new EventEmitter<string>();\n\n  readonly _startDetectionSub: Subscription = Subscription.EMPTY;\n  readonly _startCalculationSub: Subscription = Subscription.EMPTY;\n\n  private _canvas: HTMLCanvasElement;\n  get canvasCtx() {return this._canvas.getContext('2d')!; }\n\n  /**\n   * A html video element created at runtime\n   *\n   * @memberof AjfBarcode\n   */\n  private _video: HTMLVideoElement;\n  get videoSource(): HTMLVideoElement {return this._video; }\n\n  /**\n   * implement the control form value.\n   * rappresent the barcode value.\n   *\n   * @memberof AjfBarcode\n   */\n  private _barcodeValue = '';\n  get value(): string { return this._barcodeValue; }\n  set value(value: string) {\n    if (this._barcodeValue !== value) {\n      this._barcodeValue = value;\n      this._cdr.detectChanges();\n      this._onChangeCallback(value);\n    }\n  }\n\n  private _toggle = 'drop';\n  get toggle() { return this._toggle; }\n  set toggle(val: string) {\n    this._toggle = val;\n  }\n\n  private _onChangeCallback = (_: any) => { };\n  private _onTouchedCallback = () => {};\n\n  constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2) {\n    this._init();\n\n    this._startDetectionSub = this.startDetection.asObservable()\n      .pipe(\n          debounceTime(300),\n          switchMap(() => {\n              const data: string = this._getDataFromVideo(this.videoSource);\n              return this._readBarcodeFromData(data);\n          }),\n          catchError(() => {\n              return of({} as Result);\n          })\n      )\n      .subscribe((result: any) => {\n          if (!result.text) {\n              this.startDetection.emit();\n          } else {\n              this.toggle = 'drop';\n              this.value = result.text;\n          }\n      });\n\n    this._startCalculationSub = this.startCalculation.asObservable()\n      .pipe(\n          switchMap((data: string) => {\n              return this._readBarcodeFromData(data);\n          })\n      ).subscribe((result: any) => {\n          if (result.text) {\n              this.toggle = 'drop';\n              this.value = result.text;\n          }\n      });\n  }\n\n  reset(): void {\n    this.value = '';\n    this._onTouchedCallback();\n  }\n\n  takeSnapshot(): void {\n    this.startDetection.emit();\n  }\n\n  onSelectFile(files: FileList) {\n    if (files != null && files[0]) {\n      let reader = new FileReader();\n\n      reader.readAsDataURL(files[0]);\n      reader.onload = (ev: ProgressEvent) => {\n        const data: string = (ev.target as FileReader).result as string;\n        this.startCalculation.emit(data);\n        this._cdr.detectChanges();\n      };\n    }\n  }\n\n  /** ControlValueAccessor implements */\n  writeValue(value: string) {\n    this._barcodeValue = value;\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this._onTouchedCallback = fn;\n  }\n\n  ngOnDestroy(): void {\n    this._startCalculationSub.unsubscribe();\n    this._startDetectionSub.unsubscribe();\n  }\n\n  private _init(): void {\n    this._initCanvas();\n    this._initVideo();\n  }\n\n  private _initCanvas(): void {\n    this._canvas = this._renderer.createElement('canvas');\n    this._canvas.height = 480;\n    this._canvas.width = 640;\n  }\n\n  private _initVideo(): void {\n    this._video = this._renderer.createElement('video');\n    this._video.height = 480;\n    this._video.width = 640;\n  }\n\n  /**\n   * write a frame of HTMLVideoElement into HTMLCanvasElement and\n   * return the result of toDataURL('image/png')\n   *\n   * @param video\n   * @memberof AjfBarcode\n   */\n  private _getDataFromVideo(video: HTMLVideoElement): string {\n    this.canvasCtx.drawImage(video, 0, 0, 640, 480);\n    return this._canvas.toDataURL('image/png');\n  }\n\n  /**\n   * call @zxing library method with HTMLImageElement as parameter\n   *\n   * @param img\n   * @memberof AjfBarcode\n   */\n  private _readBarcodeFromImage(img: HTMLImageElement): Observable<Result> {\n    return from(this.codeReader.decodeFromImage(img))\n        .pipe(catchError(e => of(e as Result)));\n  }\n\n  /**\n   * build an image by data and call _readBarcodeFromImage\n   *\n   * @param data\n   * @memberof AjfBarcode\n   */\n  private _readBarcodeFromData(data: string): Observable<Result> {\n    const image: HTMLImageElement = this._createImage(data);\n    return this._readBarcodeFromImage(image);\n  }\n\n  /**\n   * build an image by data\n   *\n   * @param data\n   * @memberof AjfBarcode\n   */\n  private _createImage(data: string): HTMLImageElement {\n    const image: HTMLImageElement = this._renderer.createElement('img');\n    if (data !== null && typeof data === 'string') {\n      image.src = data;\n    }\n    return image;\n  }\n}\n"],"names":["Object","defineProperty","AjfBarcode","prototype","this","_readonly","readonly","coerceBooleanProperty","_cdr","markForCheck","_canvas","getContext","_video","_barcodeValue","value","detectChanges","_onChangeCallback","_toggle","val","reset","_onTouchedCallback","takeSnapshot","startDetection","emit","onSelectFile","files","_this","reader","FileReader","readAsDataURL","onload","ev","data","startCalculation","writeValue","registerOnChange","fn","registerOnTouched","ngOnDestroy","_startCalculationSub","unsubscribe","_startDetectionSub","_init","_initCanvas","_initVideo","_renderer","createElement","height","width","_getDataFromVideo","video","canvasCtx","drawImage","toDataURL","_readBarcodeFromImage","img","from","codeReader","decodeFromImage","pipe","catchError","e","of","_readBarcodeFromData","image","_createImage","src","BrowserBarcodeReader","EventEmitter","Subscription","EMPTY","_","asObservable","debounceTime","switchMap","videoSource","subscribe","result","text","toggle"],"mappings":"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"}