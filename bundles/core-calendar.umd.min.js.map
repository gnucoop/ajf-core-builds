{"version":3,"file":"core-calendar.umd.min.js","sources":["../../src/core/calendar/calendar-service.ts","../../src/core/calendar/calendar-entry-label.ts","../../src/core/calendar/calendar-module.ts","../../src/core/calendar/calendar-period.ts","../../src/core/calendar/calendar.ts"],"sourcesContent":["/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Injectable} from '@angular/core';\nimport {addDays, addMonths, addWeeks, addYears, endOfDay, endOfMonth, endOfISOWeek, endOfWeek,\n  endOfYear, format, getISODay, isAfter, isBefore, isSameDay, setISODay, startOfDay, startOfISOWeek,\n  startOfMonth, startOfWeek, startOfYear, subMonths, subWeeks, subYears} from 'date-fns';\n\nimport {AjfCalendarEntry} from './calendar-entry';\nimport {AjfCalendarEntrySelectedState} from './calendar-entry-selected-state';\nimport {AjfCalendarPeriod} from './calendar-period';\nimport {AjfCalendarPeriodType} from './calendar-period-type';\nimport {AjfCalendarView} from './calendar-view';\nimport {AjfCalendarViewMode} from './calendar-view-mode';\n\nexport interface AjfCalendarParams {\n  viewMode: AjfCalendarViewMode;\n  viewDate: Date;\n  selection: AjfCalendarPeriod|null;\n  isoMode: boolean;\n  minDate: Date|null;\n  maxDate: Date|null;\n}\n\nfunction isBetween(date: Date, rangeLeft: Date, rangeRight: Date): boolean {\n  return (isAfter(date, rangeLeft) || isSameDay(date, rangeLeft))\n      && (isBefore(date, rangeRight) || isSameDay(date, rangeRight));\n}\n\nfunction periodOrder(entryType: AjfCalendarPeriodType): number {\n  return ['day', 'week', 'month', 'year'].indexOf(entryType);\n}\n\n@Injectable({providedIn: 'root'})\nexport class AjfCalendarService {\n  buildView(params: AjfCalendarParams): AjfCalendarView {\n    const {viewMode, viewDate} = params;\n    switch (viewMode) {\n      case 'decade':\n        let curYear: number = viewDate.getFullYear();\n        let firstYear = curYear - (curYear % 10) + 1;\n        let lastYear = firstYear + 11;\n        return {\n          header: `${firstYear} - ${lastYear}`,\n          headerRow: [],\n          rows: this._decadeCalendarRows(params),\n        };\n      case 'year':\n        return {\n          header: `${viewDate.getFullYear()}`,\n          headerRow: [],\n          rows: this._yearCalendarRows(params),\n        };\n      case 'month':\n        return {\n          header: format(viewDate, 'MMM YYYY'),\n          headerRow: this._monthHeaderRow(params),\n          rows: this._monthCalendarRows(params),\n        };\n    }\n    return {\n      header: '',\n      headerRow: [],\n      rows: [],\n    };\n  }\n\n  monthBounds(date: Date, isoMode: boolean): {start: Date, end: Date} {\n    if (!isoMode) {\n      return {\n        start: startOfMonth(date),\n        end: endOfMonth(date),\n      };\n    }\n    const isoDay = getISODay(date);\n    date = isoDay < 4 ? endOfISOWeek(date) : startOfISOWeek(date);\n    let startDate = startOfMonth(date);\n    let endDate = endOfMonth(startDate);\n    const startWeekDay = startDate.getDay();\n    const endWeekDay = endDate.getDay();\n    if (startWeekDay == 0 || startWeekDay > 4) {\n      startDate = addWeeks(startDate, 1);\n    }\n    if (endWeekDay > 0 && endWeekDay < 4) {\n      endDate = subWeeks(endDate, 1);\n    }\n    startDate = startOfISOWeek(startDate);\n    endDate = endOfISOWeek(endDate);\n    return { start: startDate, end: endDate };\n  }\n\n  getEntryRange(entry: AjfCalendarEntry): {start: Date, end: Date} {\n    if (entry.type === 'day') {\n      return { start: new Date(entry.date), end: new Date(entry.date) };\n    } else {\n      let curDate: Date = new Date(entry.date);\n      return {\n        start: entry.type === 'month' ? startOfMonth(curDate) : startOfYear(curDate),\n        end: entry.type === 'month' ? endOfMonth(curDate) : endOfYear(curDate)\n      };\n    }\n  }\n\n  isEntrySelected(\n    entry: AjfCalendarEntry, selection: AjfCalendarPeriod|null\n  ): AjfCalendarEntrySelectedState {\n    if (selection != null && selection.startDate != null && selection.endDate != null) {\n      let selectionStart: Date = startOfDay(selection.startDate);\n      let selectionEnd: Date = endOfDay(selection.endDate);\n      let selectionPeriodOrder: number = periodOrder(selection.type);\n\n      let entryPeriodOrder: number = periodOrder(entry.type);\n      let entryRange: { start: Date, end: Date } = this.getEntryRange(entry);\n\n      if (entryPeriodOrder <= selectionPeriodOrder &&\n        isBetween(entryRange.start, selectionStart, selectionEnd) &&\n        isBetween(entryRange.end, selectionStart, selectionEnd)\n      ) {\n        return 'full';\n      } else if (entryPeriodOrder > selectionPeriodOrder &&\n        isBetween(selectionStart, entryRange.start, entryRange.end) &&\n        isBetween(selectionEnd, entryRange.start, entryRange.end)\n      ) {\n        return 'partial';\n      }\n    }\n\n    return 'none';\n  }\n\n  entryLabel(entry: AjfCalendarEntry): string {\n    if (entry.type === 'day') {\n      return `${entry.date.getDate()}`;\n    }\n    if (entry.type === 'month') {\n      return format(entry.date, 'MMM');\n    }\n    return `${entry.date.getFullYear()}`;\n  }\n\n  nextView(viewDate: Date, viewMode: AjfCalendarViewMode): Date {\n    if (viewMode == 'month') {\n      return addMonths(viewDate, 1);\n    } else if (viewMode == 'year') {\n      return addYears(viewDate, 1);\n    } else if (viewMode == 'decade') {\n      return addYears(viewDate, 10);\n    }\n    return viewDate;\n  }\n\n  previousView(viewDate: Date, viewMode: AjfCalendarViewMode): Date {\n    if (viewMode == 'month') {\n      return subMonths(viewDate, 1);\n    } else if (viewMode == 'year') {\n      return subYears(viewDate, 1);\n    } else if (viewMode == 'decade') {\n      return subYears(viewDate, 10);\n    }\n    return viewDate;\n  }\n\n  private _monthHeaderRow(params: AjfCalendarParams): string[] {\n    const {isoMode, viewDate} = params;\n    let curDate: Date;\n    if (isoMode) {\n      curDate = setISODay(startOfWeek(viewDate), 1);\n    } else {\n      curDate = startOfWeek(viewDate);\n    }\n    let weekDayNames: string[] = [];\n    for (let i = 0; i < 7; i++) {\n      weekDayNames.push(format(curDate, 'dddd'));\n      curDate = addDays(curDate, 1);\n    }\n    return weekDayNames;\n  }\n\n  private _decadeCalendarRows(params: AjfCalendarParams): AjfCalendarEntry[][] {\n    const {viewDate, selection} = params;\n    let curYear: number = viewDate.getFullYear();\n    let firstYear = curYear - (curYear % 10) + 1;\n    let curDate: Date = startOfYear(viewDate);\n    curDate.setFullYear(firstYear);\n\n    let rows: AjfCalendarEntry[][] = [];\n    for (let i = 0; i < 4; i++) {\n      let row: AjfCalendarEntry[] = [];\n      for (let j = 0; j < 3; j++) {\n        let date = new Date(curDate);\n        let newEntry: AjfCalendarEntry = {\n          type: 'year',\n          date: date,\n          selected: 'none'\n        };\n        newEntry.selected = this.isEntrySelected(newEntry, selection);\n        row.push(newEntry);\n        curDate = addYears(curDate, 1);\n      }\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  private _yearCalendarRows(params: AjfCalendarParams): AjfCalendarEntry[][] {\n    const {viewDate, selection} = params;\n    let curDate: Date = startOfYear(viewDate);\n\n    let rows: AjfCalendarEntry[][] = [];\n    for (let i = 0; i < 4; i++) {\n      let row: AjfCalendarEntry[] = [];\n      for (let j = 0; j < 3; j++) {\n        let date = new Date(curDate);\n        let newEntry: AjfCalendarEntry = {\n          type: 'month',\n          date: date,\n          selected: 'none'\n        };\n        newEntry.selected = this.isEntrySelected(newEntry, selection);\n        row.push(newEntry);\n        curDate = addMonths(curDate, 1);\n      }\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  private _monthCalendarRows(params: AjfCalendarParams): AjfCalendarEntry[][] {\n    const {viewDate, selection, isoMode, minDate, maxDate} = params;\n    const monthBounds = this.monthBounds(viewDate, isoMode);\n    let viewStartDate: Date = new Date(monthBounds.start);\n    let viewEndDate: Date = new Date(monthBounds.end);\n    if (!isoMode) {\n      viewStartDate = startOfWeek(viewStartDate);\n      viewEndDate = endOfWeek(viewEndDate);\n    }\n\n    let rows: AjfCalendarEntry[][] = [];\n    let todayDate = new Date();\n    let curDate = new Date(viewStartDate);\n    while (curDate < viewEndDate) {\n      let row: AjfCalendarEntry[] = [];\n      for (let i = 0; i < 7; i++) {\n        let disabled = (minDate != null && isBefore(curDate, minDate)) ||\n          (maxDate != null && isAfter(curDate, maxDate));\n        let date = new Date(curDate);\n        let newEntry: AjfCalendarEntry = {\n          type: 'day',\n          date: date,\n          selected: 'none',\n          highlight: format(todayDate, 'YYYY-MM-DD') === format(curDate, 'YYYY-MM-DD'),\n          disabled: disabled\n        };\n        newEntry.selected = this.isEntrySelected(newEntry, selection);\n        row.push(newEntry);\n        curDate = addDays(curDate, 1);\n      }\n      rows.push(row);\n    }\n    return rows;\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Injectable, Pipe, PipeTransform} from '@angular/core';\n\nimport {AjfCalendarEntry} from './calendar-entry';\nimport {AjfCalendarService} from './calendar-service';\n\n@Injectable()\n@Pipe({name: 'ajfCalendarEntryLabel'})\nexport class AjfCalendarEntryLabelPipe implements PipeTransform {\n  constructor(private _service: AjfCalendarService) { }\n\n  transform(entry: AjfCalendarEntry): string {\n    return this._service.entryLabel(entry);\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {AjfCalendarEntryLabelPipe} from './calendar-entry-label';\nimport {AjfCalendarService} from './calendar-service';\n\n@NgModule({\n  declarations: [\n    AjfCalendarEntryLabelPipe,\n  ],\n  exports: [\n    AjfCalendarEntryLabelPipe,\n  ],\n})\nexport class AjfCalendarModule { }\n\n@NgModule({\n  providers: [\n    AjfCalendarService,\n  ],\n})\nexport class AjfGregorianCalendarModule { }\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCalendarPeriodType} from './calendar-period-type';\n\nexport class AjfCalendarPeriod {\n  type: AjfCalendarPeriodType;\n  startDate: Date;\n  endDate: Date;\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {\n  AfterContentInit, ChangeDetectorRef, EventEmitter, OnInit\n} from '@angular/core';\nimport {ControlValueAccessor} from '@angular/forms';\nimport {endOfISOWeek, endOfWeek, endOfYear, parse, startOfISOWeek, startOfWeek,\n  startOfYear} from 'date-fns';\nimport {Observable} from 'rxjs';\n\nimport {AjfCalendarEntry} from './calendar-entry';\nimport {AjfCalendarPeriodType} from './calendar-period-type';\nimport {AjfCalendarPeriod} from './calendar-period';\nimport {AjfCalendarService} from './calendar-service';\nimport {AjfCalendarViewMode} from './calendar-view-mode';\nimport {AjfCalendarWeekDay} from './calendar-week-day';\n\nconst weekDays: string[] = [\n  '', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'\n];\n\nexport class AjfCalendarChange {\n  source: AjfCalendar;\n  period: AjfCalendarPeriod | null;\n}\n\nexport abstract class AjfCalendar implements AfterContentInit, ControlValueAccessor, OnInit {\n  get viewDate(): Date { return this._viewDate; }\n  set viewDate(viewDate: Date) {\n    this._setViewDate(viewDate);\n    this._cdr.markForCheck();\n  }\n\n  private _disabled = false;\n  get disabled(): boolean { return this._disabled; }\n  set disabled(disabled: boolean) {\n    const newDisabled = disabled != null && `${disabled}` !== 'false';\n    if (newDisabled !== this._disabled) {\n      this._disabled = newDisabled;\n      this._cdr.markForCheck();\n    }\n  }\n\n  private _dateOnlyForDay = false;\n  get dateOnlyForDay(): boolean { return this._disabled; }\n  set dateOnlyForDay(dateOnlyForDay: boolean) {\n    this._dateOnlyForDay = dateOnlyForDay != null && `${dateOnlyForDay}` !== 'false';\n    this._cdr.markForCheck();\n  }\n\n  private _viewMode: AjfCalendarViewMode = 'month';\n  get viewMode(): AjfCalendarViewMode { return this._viewMode; }\n  set viewMode(viewMode: AjfCalendarViewMode) {\n    this._viewMode = viewMode;\n    this._buildCalendar();\n    this._cdr.markForCheck();\n  }\n\n  private _selectionMode: AjfCalendarPeriodType = 'day';\n  get selectionMode(): AjfCalendarPeriodType { return this._selectionMode; }\n  set selectionMode(selectionMode: AjfCalendarPeriodType) {\n    this._selectionMode = selectionMode;\n    this._cdr.markForCheck();\n  }\n\n  private _startOfWeekDay = 1;\n  get startOfWeekDay(): AjfCalendarWeekDay {\n    return <AjfCalendarWeekDay>weekDays[this._startOfWeekDay];\n  }\n  set startOfWeekDay(weekDay: AjfCalendarWeekDay) {\n    this._startOfWeekDay = weekDays.indexOf(weekDay);\n\n    if (this._viewMode === 'month') {\n      this._buildCalendar();\n    }\n    this._cdr.markForCheck();\n  }\n\n  private _isoMode: boolean = false;\n\n  get isoMode(): boolean { return this._isoMode; }\n  set isoMode(isoMode: boolean) {\n    this._isoMode = isoMode;\n    this._buildCalendar();\n  }\n\n  private _minDate: Date | null;\n  get minDate(): Date | null { return this._minDate; }\n  set minDate(minDate: Date | null) {\n    this._minDate = minDate != null ? new Date(minDate.valueOf()) : null;\n    this._cdr.markForCheck();\n  }\n\n  private _maxDate: Date | null;\n  get maxDate(): Date | null { return this._maxDate; }\n  set maxDate(maxDate: Date | null) {\n    this._maxDate = maxDate != null ? new Date(maxDate.valueOf()) : null;\n    this._cdr.markForCheck();\n  }\n\n  private _change: EventEmitter<AjfCalendarChange> = new EventEmitter<AjfCalendarChange>();\n  get change(): Observable<AjfCalendarChange> {\n    return this._change.asObservable();\n  }\n\n  private _selectedPeriod: AjfCalendarPeriod | null;\n  private set selectedPeriod(period: AjfCalendarPeriod | null) {\n    this._selectedPeriod = period;\n    this._change.emit({\n      source: this,\n      period: period\n    });\n    this._refreshSelection();\n    this._cdr.markForCheck();\n  }\n\n  get value(): AjfCalendarPeriod | Date | null {\n    if (this._dateOnlyForDay && this.selectionMode === 'day') {\n      return this._selectedPeriod != null ? this._selectedPeriod.startDate : null;\n    }\n    return this._selectedPeriod;\n  }\n  set value(period: AjfCalendarPeriod | Date | null) {\n    if (\n      this._dateOnlyForDay && this.selectionMode === 'day' && period instanceof Date\n      && (this._selectedPeriod == null || period !== this._selectedPeriod.startDate)\n    ) {\n      this.selectedPeriod = {\n        type: 'day',\n        startDate: period,\n        endDate: period\n      };\n    } else if (period instanceof Object && period !== this._selectedPeriod) {\n      this.selectedPeriod = <AjfCalendarPeriod>period;\n      this._onChangeCallback(period);\n    }\n    this._cdr.markForCheck();\n  }\n\n  get calendarHeaders(): string[] { return this._calendarHeaders; }\n  get calendarRows(): AjfCalendarEntry[][] { return this._calendarRows; }\n  get viewHeader(): string { return this._viewHeader; }\n\n  private _viewDate: Date = new Date();\n  private _viewHeader = '';\n\n  private _calendarRows: AjfCalendarEntry[][] = [];\n  private _calendarHeaders: string[] = [];\n\n  constructor(private _cdr: ChangeDetectorRef, private _service: AjfCalendarService) { }\n\n  prevPage(): void {\n    this.viewDate = this._service.previousView(this._viewDate, this._viewMode);\n    this._buildCalendar();\n  }\n\n  nextPage(): void {\n    this.viewDate = this._service.nextView(this._viewDate, this._viewMode);\n    this._buildCalendar();\n  }\n\n  previousViewMode(): void {\n    if (this._viewMode == 'decade') {\n      return;\n    } else if (this._viewMode == 'year') {\n      this._viewMode = 'decade';\n    } else if (this._viewMode == 'month') {\n      this._viewMode = 'year';\n    }\n    this._buildCalendar();\n  }\n\n  selectEntry(entry: AjfCalendarEntry): void {\n    if (!this._canSelectEntry(entry)) {\n      return this._nextViewMode(entry);\n    }\n\n    let newPeriod: AjfCalendarPeriod | null = null;\n    if (this._service.isEntrySelected(entry, this._selectedPeriod) == 'full') {\n      newPeriod = null;\n    } else if (this._selectionMode == 'day') {\n      newPeriod = {\n        type: 'day',\n        startDate: entry.date,\n        endDate: entry.date\n      };\n    } else if (this._selectionMode == 'week') {\n      newPeriod = {\n        type: 'week',\n        startDate: this._isoMode ?\n          startOfISOWeek(entry.date) :\n          startOfWeek(entry.date, {weekStartsOn: this._startOfWeekDay}),\n        endDate: this._isoMode ?\n          endOfISOWeek(entry.date) :\n          endOfWeek(entry.date, {weekStartsOn: this._startOfWeekDay})\n      };\n    } else if (this._selectionMode == 'month') {\n      const monthBounds = this._service.monthBounds(entry.date, this._isoMode);\n      newPeriod = {\n        type: 'month',\n        startDate: new Date(monthBounds.start),\n        endDate: new Date(monthBounds.end)\n      };\n    } else if (this._selectionMode == 'year') {\n      newPeriod = {\n        type: 'year',\n        startDate: startOfYear(entry.date),\n        endDate: endOfYear(entry.date)\n      };\n    }\n    this.value = newPeriod;\n\n    this._onTouchedCallback();\n    this._cdr.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouchedCallback = fn;\n  }\n\n  writeValue(value: any) {\n    if (typeof value === 'string') {\n      value = parse(value);\n    }\n    this.value = value;\n  }\n\n  ngOnInit(): void {\n    this._buildCalendar();\n  }\n\n  ngAfterContentInit(): void {\n    this._refreshSelection();\n  }\n\n  private _onChangeCallback: (_: any) => void = (_: any) => { };\n  private _onTouchedCallback: () => void = () => { };\n\n  private _setViewDate(date: Date): void {\n    this._viewDate = date;\n  }\n\n  private _buildCalendar(): void {\n    const calendarView = this._service.buildView({\n      viewMode: this._viewMode,\n      viewDate: this._viewDate,\n      selection: this._selectedPeriod,\n      isoMode: this._isoMode,\n      minDate: this._minDate == null ? null : new Date(this._minDate),\n      maxDate: this._maxDate == null ? null : new Date(this._maxDate),\n    });\n    this._viewHeader = calendarView.header;\n    this._calendarHeaders = calendarView.headerRow;\n    this._calendarRows = calendarView.rows;\n    this._cdr.markForCheck();\n  }\n\n  private _refreshSelection(): void {\n    for (let row of this._calendarRows) {\n      for (let entry of row) {\n        entry.selected = this._service.isEntrySelected(entry, this._selectedPeriod);\n      }\n    }\n  }\n\n  private _canSelectEntry(entry: AjfCalendarEntry): boolean {\n    if (['day', 'week'].indexOf(this._selectionMode) >= 0 && entry.type != 'day') {\n      return false;\n    }\n    if (this._selectionMode == 'month' && entry.type == 'year') {\n      return false;\n    }\n    return true;\n  }\n\n  private _nextViewMode(entry: AjfCalendarEntry): void {\n    if (this._viewMode == 'decade') {\n      this._viewMode = 'year';\n    } else if (this._viewMode == 'year') {\n      this._viewMode = 'month';\n    } else if (this._viewMode == 'month') {\n      return;\n    }\n    this._viewDate = entry.date;\n    this._buildCalendar();\n  }\n}\n"],"names":["isBetween","date","rangeLeft","rangeRight","isAfter","isSameDay","isBefore","periodOrder","entryType","indexOf","AjfCalendarService","prototype","buildView","params","viewMode","viewDate","curYear","getFullYear","firstYear","header","headerRow","rows","this","_decadeCalendarRows","_yearCalendarRows","format","_monthHeaderRow","_monthCalendarRows","monthBounds","isoMode","start","startOfMonth","end","endOfMonth","getISODay","endOfISOWeek","startOfISOWeek","startDate","endDate","startWeekDay","getDay","endWeekDay","addWeeks","subWeeks","getEntryRange","entry","type","Date","curDate","startOfYear","endOfYear","isEntrySelected","selection","selectionStart","startOfDay","selectionEnd","endOfDay","selectionPeriodOrder","entryPeriodOrder","entryRange","entryLabel","getDate","nextView","addMonths","addYears","previousView","subMonths","subYears","setISODay","startOfWeek","weekDayNames","i","push","addDays","setFullYear","row","j","newEntry","selected","minDate","maxDate","viewStartDate","viewEndDate","endOfWeek","todayDate","disabled","highlight","Injectable","args","providedIn","AjfCalendarEntryLabelPipe","transform","_service","Pipe","name","AjfCalendarModule","NgModule","declarations","exports","AjfGregorianCalendarModule","providers","AjfCalendarPeriod","AjfCalendarChange","weekDays","Object","defineProperty","AjfCalendar","_viewDate","_setViewDate","_cdr","markForCheck","_disabled","newDisabled","dateOnlyForDay","_dateOnlyForDay","_viewMode","_buildCalendar","_selectionMode","selectionMode","_startOfWeekDay","weekDay","_isoMode","_minDate","valueOf","_maxDate","_change","asObservable","period","_selectedPeriod","emit","source","_refreshSelection","selectedPeriod","_onChangeCallback","_calendarHeaders","_calendarRows","_viewHeader","prevPage","nextPage","previousViewMode","selectEntry","_canSelectEntry","_nextViewMode","newPeriod","weekStartsOn","value","_onTouchedCallback","registerOnChange","fn","registerOnTouched","writeValue","parse","ngOnInit","ngAfterContentInit","calendarView","_i","_a","length","_b","row_1","EventEmitter","_"],"mappings":"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"}