{"version":3,"file":"core-calendar.umd.min.js","sources":["../../src/core/calendar/calendar-entry.ts","../../src/core/calendar/calendar-period.ts","../../src/core/calendar/calendar.ts"],"sourcesContent":["/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {format, endOfMonth, endOfYear, startOfMonth, startOfYear} from 'date-fns';\n\nimport {AjfCalendarEntrySelectedState} from './calendar-entry-selected-state';\nimport {AjfCalendarEntryType} from './calendar-entry-type';\n\nexport class AjfCalendarEntry {\n  type: AjfCalendarEntryType;\n  date: Date;\n  selected: AjfCalendarEntrySelectedState;\n  disabled = false;\n  highlight = false;\n\n  constructor(params: {\n    type: AjfCalendarEntryType,\n    date: Date,\n    selected: AjfCalendarEntrySelectedState,\n    highlight?: boolean,\n    disabled?: boolean\n  }) {\n    let keys = Object.keys(params);\n\n    this.type = params.type;\n    this.date = params.date;\n    this.selected = params.selected;\n    if (keys.indexOf('disabled') > -1) {\n      this.disabled = params.disabled!;\n    }\n    if (keys.indexOf('highlight') > -1) {\n      this.highlight = params.highlight!;\n    }\n  }\n\n  toString(): string {\n    if (this.type === 'day') {\n      return `${this.date.getDate()}`;\n    }\n    if (this.type === 'month') {\n      return format(this.date, 'MMM');\n    }\n    return `${this.date.getFullYear()}`;\n  }\n\n  getRange(): { start: Date, end: Date } {\n    if (this.type === 'day') {\n      return { start: new Date(this.date), end: new Date(this.date) };\n    } else {\n      let curDate: Date = new Date(this.date);\n      return {\n        start: this.type === 'month' ? startOfMonth(curDate) : startOfYear(curDate),\n        end: this.type === 'month' ? endOfMonth(curDate) : endOfYear(curDate)\n      };\n    }\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCalendarPeriodType} from './calendar-period-type';\n\nexport class AjfCalendarPeriod {\n  type: AjfCalendarPeriodType;\n  startDate: Date;\n  endDate: Date;\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {\n  AfterContentInit, ChangeDetectorRef, EventEmitter, OnInit\n} from '@angular/core';\nimport {ControlValueAccessor} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\n\nimport {\n  addDays, addMonths, addWeeks, addYears, endOfDay, endOfISOWeek, endOfMonth, endOfWeek, endOfYear,\n  format, isAfter, isBefore, isSameDay, parse, setISODay, startOfDay, startOfISOWeek,\n  startOfMonth, startOfWeek, startOfYear, subMonths, subWeeks, subYears\n} from 'date-fns';\n\nimport {AjfCalendarEntrySelectedState} from './calendar-entry-selected-state';\nimport {AjfCalendarEntry} from './calendar-entry';\nimport {AjfCalendarPeriodType} from './calendar-period-type';\nimport {AjfCalendarPeriod} from './calendar-period';\nimport {AjfCalendarViewMode} from './calendar-view-mode';\nimport {AjfCalendarWeekDay} from './calendar-week-day';\n\nconst weekDays: string[] = [\n  '', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'\n];\n\nexport class AjfCalendarChange {\n  source: AjfCalendar;\n  period: AjfCalendarPeriod | null;\n}\n\nexport abstract class AjfCalendar implements AfterContentInit, ControlValueAccessor, OnInit {\n  get viewDate(): Date { return this._viewDate; }\n  set viewDate(viewDate: Date) {\n    this._setViewDate(viewDate);\n    this._cdr.markForCheck();\n  }\n\n  private _disabled = false;\n  get disabled(): boolean { return this._disabled; }\n  set disabled(disabled: boolean) {\n    const newDisabled = disabled != null && `${disabled}` !== 'false';\n    if (newDisabled !== this._disabled) {\n      this._disabled = newDisabled;\n      this._cdr.markForCheck();\n    }\n  }\n\n  private _dateOnlyForDay = false;\n  get dateOnlyForDay(): boolean { return this._disabled; }\n  set dateOnlyForDay(dateOnlyForDay: boolean) {\n    this._dateOnlyForDay = dateOnlyForDay != null && `${dateOnlyForDay}` !== 'false';\n    this._cdr.markForCheck();\n  }\n\n  private _viewMode: AjfCalendarViewMode = 'month';\n  get viewMode(): AjfCalendarViewMode { return this._viewMode; }\n  set viewMode(viewMode: AjfCalendarViewMode) {\n    this._viewMode = viewMode;\n    this._buildCalendar();\n    this._cdr.markForCheck();\n  }\n\n  private _selectionMode: AjfCalendarPeriodType = 'day';\n  get selectionMode(): AjfCalendarPeriodType { return this._selectionMode; }\n  set selectionMode(selectionMode: AjfCalendarPeriodType) {\n    this._selectionMode = selectionMode;\n    this._cdr.markForCheck();\n  }\n\n  private _startOfWeekDay = 1;\n  get startOfWeekDay(): AjfCalendarWeekDay {\n    return <AjfCalendarWeekDay>weekDays[this._startOfWeekDay];\n  }\n  set startOfWeekDay(weekDay: AjfCalendarWeekDay) {\n    this._startOfWeekDay = weekDays.indexOf(weekDay);\n\n    if (this._viewMode === 'month') {\n      this._buildCalendar();\n    }\n    this._cdr.markForCheck();\n  }\n\n  private _isoMode: boolean = false;\n\n  get isoMode(): boolean { return this._isoMode; }\n  set isoMode(isoMode: boolean) {\n    this._isoMode = isoMode;\n    this._cdr.markForCheck();\n  }\n\n  private _minDate: Date | null;\n  get minDate(): Date | null { return this._minDate; }\n  set minDate(minDate: Date | null) {\n    this._minDate = minDate != null ? new Date(minDate.valueOf()) : null;\n    this._cdr.markForCheck();\n  }\n\n  private _maxDate: Date | null;\n  get maxDate(): Date | null { return this._maxDate; }\n  set maxDate(maxDate: Date | null) {\n    this._maxDate = maxDate != null ? new Date(maxDate.valueOf()) : null;\n    this._cdr.markForCheck();\n  }\n\n  private _change: EventEmitter<AjfCalendarChange> = new EventEmitter<AjfCalendarChange>();\n  get change(): Observable<AjfCalendarChange> {\n    return this._change.asObservable();\n  }\n\n  private _selectedPeriod: AjfCalendarPeriod | null;\n  private set selectedPeriod(period: AjfCalendarPeriod | null) {\n    this._selectedPeriod = period;\n    this._change.emit({\n      source: this,\n      period: period\n    });\n    this._refreshSelection();\n    this._cdr.markForCheck();\n  }\n\n  get value(): AjfCalendarPeriod | Date | null {\n    if (this._dateOnlyForDay && this.selectionMode === 'day') {\n      return this._selectedPeriod != null ? this._selectedPeriod.startDate : null;\n    }\n    return this._selectedPeriod;\n  }\n  set value(period: AjfCalendarPeriod | Date | null) {\n    if (this._dateOnlyForDay && this.selectionMode === 'day') {\n      if (period instanceof Date &&\n        (this._selectedPeriod == null || period !== this._selectedPeriod.startDate)) {\n        this.selectedPeriod = {\n          type: 'day',\n          startDate: period,\n          endDate: period\n        };\n        this._onChangeCallback(period);\n      }\n    } else if (period instanceof Object && period !== this._selectedPeriod) {\n      this.selectedPeriod = <AjfCalendarPeriod>period;\n      this._onChangeCallback(period);\n    }\n    this._cdr.markForCheck();\n  }\n\n  get calendarRows(): AjfCalendarEntry[][] { return this._calendarRows; }\n  get viewHeader(): string { return this._viewHeader; }\n  get weekDays(): string[] { return this._weekDays; }\n\n  private _viewDate: Date = new Date();\n  private _viewHeader = '';\n\n  private _calendarRows: AjfCalendarEntry[][] = [];\n  private _weekDays: string[] = [];\n\n  constructor(private _cdr: ChangeDetectorRef) { }\n\n  prevPage(): void {\n    if (this._viewMode == 'month') {\n      this.viewDate = subMonths(this.viewDate, 1);\n    } else if (this._viewMode == 'year') {\n      this.viewDate = subYears(this.viewDate, 1);\n    }\n    this._buildCalendar();\n  }\n\n  nextPage(): void {\n    if (this._viewMode == 'month') {\n      this.viewDate = addMonths(this.viewDate, 1);\n    } else if (this._viewMode == 'year') {\n      this.viewDate = addYears(this.viewDate, 1);\n    }\n    this._buildCalendar();\n  }\n\n  previousViewMode(): void {\n    if (this._viewMode == 'decade') {\n      return;\n    } else if (this._viewMode == 'year') {\n      this._viewMode = 'decade';\n    } else if (this._viewMode == 'month') {\n      this._viewMode = 'year';\n    }\n    this._buildCalendar();\n  }\n\n  selectEntry(entry: AjfCalendarEntry): void {\n    if (!this._canSelectEntry(entry)) {\n      return this._nextViewMode(entry);\n    }\n\n    let newPeriod: AjfCalendarPeriod | null = null;\n    if (this._isEntrySelected(entry) == 'full') {\n      newPeriod = null;\n    } else if (this._selectionMode == 'day') {\n      newPeriod = {\n        type: 'day',\n        startDate: entry.date,\n        endDate: entry.date\n      };\n    } else if (this._selectionMode == 'week') {\n      newPeriod = {\n        type: 'week',\n        startDate: this._isoMode ?\n          startOfISOWeek(entry.date) :\n          startOfWeek(entry.date, {weekStartsOn: this._startOfWeekDay}),\n        endDate: this._isoMode ?\n          endOfISOWeek(entry.date) :\n          endOfWeek(entry.date, {weekStartsOn: this._startOfWeekDay})\n      };\n    } else if (this._selectionMode == 'month') {\n      const monthBounds = this._getMonthStartEnd(entry.date);\n      newPeriod = {\n        type: 'month',\n        startDate: new Date(monthBounds.start),\n        endDate: new Date(monthBounds.end)\n      };\n    } else if (this._selectionMode == 'year') {\n      newPeriod = {\n        type: 'year',\n        startDate: startOfYear(entry.date),\n        endDate: endOfYear(entry.date)\n      };\n    }\n    this.value = newPeriod;\n\n    this._onTouchedCallback();\n    this._cdr.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouchedCallback = fn;\n  }\n\n  writeValue(value: any) {\n    if (typeof value === 'string') {\n      value = parse(value);\n    }\n    this.value = value;\n  }\n\n  ngOnInit(): void {\n    this._buildCalendar();\n  }\n\n  ngAfterContentInit(): void {\n    this._refreshSelection();\n  }\n\n  private _onChangeCallback: (_: any) => void = (_: any) => { };\n  private _onTouchedCallback: () => void = () => { };\n\n  private _setViewDate(date: Date): void {\n    this._viewDate = date;\n  }\n\n  private _getMonthStartEnd(date: Date): { start: Date, end: Date } {\n    if (!this._isoMode) {\n      return {\n        start: startOfMonth(date),\n        end: endOfMonth(date),\n      };\n    }\n    let startDate = startOfMonth(endOfISOWeek(date));\n    let endDate = endOfMonth(startDate);\n    const startWeekDay = startDate.getDay();\n    const endWeekDay = endDate.getDay();\n    if (startWeekDay == 0 || startWeekDay > 4) {\n      startDate = addWeeks(startDate, 1);\n    }\n    if (endWeekDay > 0 && endWeekDay < 4) {\n      endDate = subWeeks(endDate, 1);\n    }\n    startDate = startOfISOWeek(startDate);\n    endDate = endOfISOWeek(endDate);\n    return { start: startDate, end: endDate };\n  }\n\n  private _buildCalendar(): void {\n    if (this._viewMode == 'month') {\n      this._buildMonthView();\n    } else if (this._viewMode == 'year') {\n      this._buildYearView();\n    } else if (this._viewMode == 'decade') {\n      this._buildDecadeView();\n    }\n    this._cdr.markForCheck();\n  }\n\n  private _buildDecadeView(): void {\n    let curYear: number = this._viewDate.getFullYear();\n    let firstYear = curYear - (curYear % 10) + 1;\n    let lastYear = firstYear + 11;\n\n    this._viewHeader = `${firstYear} - ${lastYear}`;\n\n    let curDate: Date = startOfYear(this._viewDate);\n    curDate.setFullYear(firstYear);\n\n    let rows: AjfCalendarEntry[][] = [];\n    for (let i = 0; i < 4; i++) {\n      let row: AjfCalendarEntry[] = [];\n      for (let j = 0; j < 3; j++) {\n        let date = new Date(curDate);\n        let newEntry = new AjfCalendarEntry({\n          type: 'year',\n          date: date,\n          selected: 'none'\n        });\n        newEntry.selected = this._isEntrySelected(newEntry);\n        row.push(newEntry);\n        curDate = addYears(curDate, 1);\n      }\n      rows.push(row);\n    }\n    this._calendarRows = rows;\n  }\n\n  private _buildYearView(): void {\n    this._viewHeader = `${this._viewDate.getFullYear()}`;\n\n    let curDate: Date = startOfYear(this._viewDate);\n\n    let rows: AjfCalendarEntry[][] = [];\n    for (let i = 0; i < 4; i++) {\n      let row: AjfCalendarEntry[] = [];\n      for (let j = 0; j < 3; j++) {\n        let date = new Date(curDate);\n        let newEntry = new AjfCalendarEntry({\n          type: 'month',\n          date: date,\n          selected: 'none'\n        });\n        newEntry.selected = this._isEntrySelected(newEntry);\n        row.push(newEntry);\n        curDate = addMonths(curDate, 1);\n      }\n      rows.push(row);\n    }\n    this._calendarRows = rows;\n  }\n\n  private _buildMonthView(): void {\n    this._viewHeader = format(this._viewDate, 'MMM YYYY');\n\n    this._buildMonthViewWeekDays();\n    const monthDay = new Date(this._viewDate.getFullYear(), this._viewDate.getMonth(), 5);\n    const monthBounds = this._getMonthStartEnd(monthDay);\n    let viewStartDate: Date = new Date(monthBounds.start);\n    let viewEndDate: Date = new Date(monthBounds.end);\n    if (!this._isoMode) {\n      viewStartDate = startOfWeek(viewStartDate);\n      viewEndDate = endOfWeek(viewEndDate);\n    }\n\n    let rows: AjfCalendarEntry[][] = [];\n    let todayDate = new Date();\n    let curDate = new Date(viewStartDate);\n    let minDate = this.minDate == null ? null : new Date(this.minDate);\n    let maxDate = this.maxDate == null ? null : new Date(this.maxDate);\n    while (curDate < viewEndDate) {\n      let row: AjfCalendarEntry[] = [];\n      for (let i = 0; i < 7; i++) {\n        let disabled = (minDate != null && isBefore(curDate, minDate)) ||\n          (maxDate != null && isAfter(curDate, maxDate));\n        let date = new Date(curDate);\n        let newEntry: AjfCalendarEntry = new AjfCalendarEntry({\n          type: 'day',\n          date: date,\n          selected: 'none',\n          highlight: format(todayDate, 'YYYY-MM-DD') === format(curDate, 'YYYY-MM-DD'),\n          disabled: disabled\n        });\n        newEntry.selected = this._isEntrySelected(newEntry);\n        row.push(newEntry);\n        curDate = addDays(curDate, 1);\n      }\n      rows.push(row);\n    }\n\n    this._calendarRows = rows;\n  }\n\n  private _buildMonthViewWeekDays(): void {\n    let curDate: Date;\n    if (this._isoMode) {\n      curDate = setISODay(startOfWeek(this._viewDate), 1);\n    } else {\n      curDate = startOfWeek(this._viewDate);\n    }\n    let weekDayNames: string[] = [];\n    for (let i = 0; i < 7; i++) {\n      weekDayNames.push(format(curDate, 'dddd'));\n      curDate = addDays(curDate, 1);\n    }\n    this._weekDays = weekDayNames;\n    this._cdr.markForCheck();\n  }\n\n  private _periodOrder(entryType: AjfCalendarPeriodType): number {\n    return ['day', 'week', 'month', 'year'].indexOf(entryType);\n  }\n\n  private _isEntrySelected(entry: AjfCalendarEntry): AjfCalendarEntrySelectedState {\n    if (\n      this._selectedPeriod != null && this._selectedPeriod.startDate != null &&\n      this._selectedPeriod.endDate != null\n    ) {\n      let selectionStart: Date = startOfDay(this._selectedPeriod.startDate);\n      let selectionEnd: Date = endOfDay(this._selectedPeriod.endDate);\n      let selectionPeriodOrder: number = this._periodOrder(this._selectedPeriod.type);\n\n      let entryPeriodOrder: number = this._periodOrder(entry.type);\n      let entryRange: { start: Date, end: Date } = entry.getRange();\n\n      if (entryPeriodOrder <= selectionPeriodOrder &&\n        this._isBetween(entryRange.start, selectionStart, selectionEnd) &&\n        this._isBetween(entryRange.end, selectionStart, selectionEnd)\n      ) {\n        return 'full';\n      } else if (entryPeriodOrder > selectionPeriodOrder &&\n        this._isBetween(selectionStart, entryRange.start, entryRange.end) &&\n        this._isBetween(selectionEnd, entryRange.start, entryRange.end)\n      ) {\n        return 'partial';\n      }\n    }\n\n    return 'none';\n  }\n\n  private _isBetween(date: Date, rangeLeft: Date, rangeRight: Date): boolean {\n    return (isAfter(date, rangeLeft) || isSameDay(date, rangeLeft))\n      && (isBefore(date, rangeRight) || isSameDay(date, rangeRight));\n  }\n\n  private _refreshSelection(): void {\n    for (let row of this._calendarRows) {\n      for (let entry of row) {\n        entry.selected = this._isEntrySelected(entry);\n      }\n    }\n  }\n\n  private _canSelectEntry(entry: AjfCalendarEntry): boolean {\n    if (['day', 'week'].indexOf(this._selectionMode) >= 0 && entry.type != 'day') {\n      return false;\n    }\n    if (this._selectionMode == 'month' && entry.type == 'year') {\n      return false;\n    }\n    return true;\n  }\n\n  private _nextViewMode(entry: AjfCalendarEntry): void {\n    if (this._viewMode == 'decade') {\n      this._viewMode = 'year';\n    } else if (this._viewMode == 'year') {\n      this._viewMode = 'month';\n    } else if (this._viewMode == 'month') {\n      return;\n    }\n    this._viewDate = entry.date;\n    this._buildCalendar();\n  }\n}\n"],"names":["AjfCalendarEntry","prototype","toString","this","type","date","getDate","format","getFullYear","getRange","start","Date","end","curDate","startOfMonth","startOfYear","endOfMonth","endOfYear","params","disabled","highlight","keys","Object","selected","indexOf","AjfCalendarPeriod","AjfCalendarChange","weekDays","defineProperty","AjfCalendar","_viewDate","viewDate","_setViewDate","_cdr","markForCheck","_disabled","newDisabled","dateOnlyForDay","_dateOnlyForDay","_viewMode","viewMode","_buildCalendar","_selectionMode","selectionMode","_startOfWeekDay","weekDay","_isoMode","isoMode","_minDate","minDate","valueOf","_maxDate","maxDate","_change","asObservable","period","_selectedPeriod","emit","source","_refreshSelection","startDate","selectedPeriod","endDate","_onChangeCallback","_calendarRows","_viewHeader","_weekDays","prevPage","subMonths","subYears","nextPage","addMonths","addYears","previousViewMode","selectEntry","entry","_canSelectEntry","_nextViewMode","newPeriod","_isEntrySelected","startOfISOWeek","startOfWeek","weekStartsOn","endOfISOWeek","endOfWeek","monthBounds","_getMonthStartEnd","value","_onTouchedCallback","registerOnChange","fn","registerOnTouched","writeValue","parse","ngOnInit","ngAfterContentInit","startWeekDay","getDay","endWeekDay","addWeeks","subWeeks","_buildMonthView","_buildYearView","_buildDecadeView","curYear","firstYear","lastYear","setFullYear","rows","i","row","j","newEntry","push","_buildMonthViewWeekDays","monthDay","getMonth","viewStartDate","viewEndDate","todayDate","isBefore","isAfter","addDays","setISODay","weekDayNames","_periodOrder","entryType","selectionStart","startOfDay","selectionEnd","endOfDay","selectionPeriodOrder","entryPeriodOrder","entryRange","_isBetween","rangeLeft","rangeRight","isSameDay","_i","_a","length","_b","row_1","EventEmitter","_"],"mappings":"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"}