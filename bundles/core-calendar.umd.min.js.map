{"version":3,"file":"core-calendar.umd.min.js","sources":["../../src/core/calendar/calendar-entry.ts","../../src/core/calendar/calendar-period.ts","../../src/core/calendar/calendar.ts"],"sourcesContent":["/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {format, endOfMonth, endOfYear, startOfMonth, startOfYear} from 'date-fns';\n\nimport {AjfCalendarEntrySelectedState} from './calendar-entry-selected-state';\nimport {AjfCalendarEntryType} from './calendar-entry-type';\n\nexport class AjfCalendarEntry {\n  type: AjfCalendarEntryType;\n  date: Date;\n  selected: AjfCalendarEntrySelectedState;\n  disabled = false;\n  highlight = false;\n\n  constructor(params: {\n    type: AjfCalendarEntryType,\n    date: Date,\n    selected: AjfCalendarEntrySelectedState,\n    highlight?: boolean,\n    disabled?: boolean\n  }) {\n    let keys = Object.keys(params);\n\n    this.type = params.type;\n    this.date = params.date;\n    this.selected = params.selected;\n    if (keys.indexOf('disabled') > -1) {\n      this.disabled = params.disabled!;\n    }\n    if (keys.indexOf('highlight') > -1) {\n      this.highlight = params.highlight!;\n    }\n  }\n\n  toString(): string {\n    if (this.type === 'day') {\n      return `${this.date.getDate()}`;\n    }\n    if (this.type === 'month') {\n      return format(this.date, 'MMM');\n    }\n    return `${this.date.getFullYear()}`;\n  }\n\n  getRange(): { start: Date, end: Date } {\n    if (this.type === 'day') {\n      return { start: new Date(this.date), end: new Date(this.date) };\n    } else {\n      let curDate: Date = new Date(this.date);\n      return {\n        start: this.type === 'month' ? startOfMonth(curDate) : startOfYear(curDate),\n        end: this.type === 'month' ? endOfMonth(curDate) : endOfYear(curDate)\n      };\n    }\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCalendarPeriodType} from './calendar-period-type';\n\nexport class AjfCalendarPeriod {\n  type: AjfCalendarPeriodType;\n  startDate: Date;\n  endDate: Date;\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {\n  AfterContentInit, ChangeDetectorRef, EventEmitter, OnInit\n} from '@angular/core';\nimport {ControlValueAccessor} from '@angular/forms';\n\nimport {Observable} from 'rxjs';\n\nimport {\n  addDays, addMonths, addWeeks, addYears, endOfDay, endOfISOWeek, endOfMonth, endOfWeek, endOfYear,\n  format, isAfter, isBefore, isSameDay, parse, setISODay, startOfDay, startOfISOWeek,\n  startOfMonth, startOfWeek, startOfYear, subMonths, subWeeks, subYears\n} from 'date-fns';\n\nimport {AjfCalendarEntrySelectedState} from './calendar-entry-selected-state';\nimport {AjfCalendarEntry} from './calendar-entry';\nimport {AjfCalendarPeriodType} from './calendar-period-type';\nimport {AjfCalendarPeriod} from './calendar-period';\nimport {AjfCalendarViewMode} from './calendar-view-mode';\nimport {AjfCalendarWeekDay} from './calendar-week-day';\n\nconst weekDays: string[] = [\n  '', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'\n];\n\nexport class AjfCalendarChange {\n  source: AjfCalendar;\n  period: AjfCalendarPeriod | null;\n}\n\nexport abstract class AjfCalendar implements AfterContentInit, ControlValueAccessor, OnInit {\n  get viewDate(): Date { return this._viewDate; }\n  set viewDate(viewDate: Date) { this._setViewDate(viewDate); }\n\n  private _disabled = false;\n  get disabled(): boolean { return this._disabled; }\n  set disabled(disabled: boolean) {\n    const newDisabled = disabled != null && `${disabled}` !== 'false';\n    if (newDisabled !== this._disabled) {\n      this._disabled = newDisabled;\n      this._cdr.markForCheck();\n    }\n  }\n\n  private _dateOnlyForDay = false;\n  get dateOnlyForDay(): boolean { return this._disabled; }\n  set dateOnlyForDay(dateOnlyForDay: boolean) {\n    this._dateOnlyForDay = dateOnlyForDay != null && `${dateOnlyForDay}` !== 'false';\n  }\n\n  private _viewMode: AjfCalendarViewMode = 'month';\n  get viewMode(): AjfCalendarViewMode { return this._viewMode; }\n  set viewMode(viewMode: AjfCalendarViewMode) {\n    this._viewMode = viewMode;\n    this._buildCalendar();\n  }\n\n  private _selectionMode: AjfCalendarPeriodType = 'day';\n  get selectionMode(): AjfCalendarPeriodType { return this._selectionMode; }\n  set selectionMode(selectionMode: AjfCalendarPeriodType) {\n    this._selectionMode = selectionMode;\n  }\n\n  private _startOfWeekDay = 1;\n  get startOfWeekDay(): AjfCalendarWeekDay {\n    return <AjfCalendarWeekDay>weekDays[this._startOfWeekDay];\n  }\n  set startOfWeekDay(weekDay: AjfCalendarWeekDay) {\n    this._startOfWeekDay = weekDays.indexOf(weekDay);\n\n    if (this._viewMode === 'month') {\n      this._buildCalendar();\n    }\n  }\n\n  private _isoMode: boolean = false;\n\n  get isoMode(): boolean { return this._isoMode; }\n  set isoMode(isoMode: boolean) { this._isoMode = isoMode; }\n\n  private _minDate: Date | null;\n  get minDate(): Date | null { return this._minDate; }\n  set minDate(minDate: Date | null) {\n    this._minDate = minDate != null ? new Date(minDate.valueOf()) : null;\n  }\n\n  private _maxDate: Date | null;\n  get maxDate(): Date | null { return this._maxDate; }\n  set maxDate(maxDate: Date | null) {\n    this._maxDate = maxDate != null ? new Date(maxDate.valueOf()) : null;\n  }\n\n  private _change: EventEmitter<AjfCalendarChange> = new EventEmitter<AjfCalendarChange>();\n  get change(): Observable<AjfCalendarChange> {\n    return this._change.asObservable();\n  }\n\n  private _selectedPeriod: AjfCalendarPeriod | null;\n  private set selectedPeriod(period: AjfCalendarPeriod | null) {\n    this._selectedPeriod = period;\n    this._change.emit({\n      source: this,\n      period: period\n    });\n    this._refreshSelection();\n  }\n\n  get value(): AjfCalendarPeriod | Date | null {\n    if (this._dateOnlyForDay && this.selectionMode === 'day') {\n      return this._selectedPeriod != null ? this._selectedPeriod.startDate : null;\n    }\n    return this._selectedPeriod;\n  }\n  set value(period: AjfCalendarPeriod | Date | null) {\n    if (this._dateOnlyForDay && this.selectionMode === 'day') {\n      if (period instanceof Date &&\n        (this._selectedPeriod == null || period !== this._selectedPeriod.startDate)) {\n        this.selectedPeriod = {\n          type: 'day',\n          startDate: period,\n          endDate: period\n        };\n        this._onChangeCallback(period);\n      }\n    } else if (period instanceof Object && period !== this._selectedPeriod) {\n      this.selectedPeriod = <AjfCalendarPeriod>period;\n      this._onChangeCallback(period);\n    }\n  }\n\n  get calendarRows(): AjfCalendarEntry[][] { return this._calendarRows; }\n  get viewHeader(): string { return this._viewHeader; }\n  get weekDays(): string[] { return this._weekDays; }\n\n  private _viewDate: Date = new Date();\n  private _viewHeader = '';\n\n  private _calendarRows: AjfCalendarEntry[][] = [];\n  private _weekDays: string[] = [];\n\n  constructor(private _cdr: ChangeDetectorRef) { }\n\n  prevPage(): void {\n    if (this._viewMode == 'month') {\n      this.viewDate = subMonths(this.viewDate, 1);\n    } else if (this._viewMode == 'year') {\n      this.viewDate = subYears(this.viewDate, 1);\n    }\n    this._buildCalendar();\n  }\n\n  nextPage(): void {\n    if (this._viewMode == 'month') {\n      this.viewDate = addMonths(this.viewDate, 1);\n    } else if (this._viewMode == 'year') {\n      this.viewDate = addYears(this.viewDate, 1);\n    }\n    this._buildCalendar();\n  }\n\n  previousViewMode(): void {\n    if (this._viewMode == 'decade') {\n      return;\n    } else if (this._viewMode == 'year') {\n      this._viewMode = 'decade';\n    } else if (this._viewMode == 'month') {\n      this._viewMode = 'year';\n    }\n    this._buildCalendar();\n  }\n\n  selectEntry(entry: AjfCalendarEntry): void {\n    if (!this._canSelectEntry(entry)) {\n      return this._nextViewMode(entry);\n    }\n\n    let newPeriod: AjfCalendarPeriod | null = null;\n    if (this._isEntrySelected(entry) == 'full') {\n      newPeriod = null;\n    } else if (this._selectionMode == 'day') {\n      newPeriod = {\n        type: 'day',\n        startDate: entry.date,\n        endDate: entry.date\n      };\n    } else if (this._selectionMode == 'week') {\n      newPeriod = {\n        type: 'week',\n        startDate: this._isoMode ?\n          startOfISOWeek(entry.date) :\n          startOfWeek(entry.date, {weekStartsOn: this._startOfWeekDay}),\n        endDate: this._isoMode ?\n          endOfISOWeek(entry.date) :\n          endOfWeek(entry.date, {weekStartsOn: this._startOfWeekDay})\n      };\n    } else if (this._selectionMode == 'month') {\n      const monthBounds = this._getMonthStartEnd(entry.date);\n      newPeriod = {\n        type: 'month',\n        startDate: new Date(monthBounds.start),\n        endDate: new Date(monthBounds.end)\n      };\n    } else if (this._selectionMode == 'year') {\n      newPeriod = {\n        type: 'year',\n        startDate: startOfYear(entry.date),\n        endDate: endOfYear(entry.date)\n      };\n    }\n    this.value = newPeriod;\n\n    this._cdr.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouchedCallback = fn;\n  }\n\n  writeValue(value: any) {\n    if (typeof value === 'string') {\n      value = parse(value);\n    }\n    this.value = value;\n  }\n\n  ngOnInit(): void {\n    this._buildCalendar();\n  }\n\n  ngAfterContentInit(): void {\n    this._refreshSelection();\n  }\n\n  private _onChangeCallback: (_: any) => void = (_: any) => { };\n  // tslint:disable-next-line\n  private _onTouchedCallback: (_: any) => void = (_: any) => { };\n\n  private _setViewDate(date: Date): void {\n    this._viewDate = date;\n  }\n\n  private _getMonthStartEnd(date: Date): { start: Date, end: Date } {\n    let startDate = startOfMonth(date);\n    let endDate = endOfMonth(date);\n    if (this._isoMode) {\n      const startWeekDay = startDate.getDay();\n      const endWeekDay = endDate.getDay();\n      if (startWeekDay == 0 || startWeekDay > 4) {\n        startDate = addWeeks(startDate, 1);\n      }\n      if (endWeekDay > 0 && endWeekDay < 4) {\n        endDate = subWeeks(endDate, 1);\n      }\n      startDate = startOfISOWeek(startDate);\n      endDate = endOfISOWeek(endDate);\n    }\n    return { start: startDate, end: endDate };\n  }\n\n  private _buildCalendar(): void {\n    if (this._viewMode == 'month') {\n      this._buildMonthView();\n    } else if (this._viewMode == 'year') {\n      this._buildYearView();\n    } else if (this._viewMode == 'decade') {\n      this._buildDecadeView();\n    }\n    this._cdr.markForCheck();\n  }\n\n  private _buildDecadeView(): void {\n    let curYear: number = this._viewDate.getFullYear();\n    let firstYear = curYear - (curYear % 10) + 1;\n    let lastYear = firstYear + 11;\n\n    this._viewHeader = `${firstYear} - ${lastYear}`;\n\n    let curDate: Date = startOfYear(this._viewDate);\n    curDate.setFullYear(firstYear);\n\n    let rows: AjfCalendarEntry[][] = [];\n    for (let i = 0; i < 4; i++) {\n      let row: AjfCalendarEntry[] = [];\n      for (let j = 0; j < 3; j++) {\n        let date = new Date(curDate);\n        let newEntry = new AjfCalendarEntry({\n          type: 'year',\n          date: date,\n          selected: 'none'\n        });\n        newEntry.selected = this._isEntrySelected(newEntry);\n        row.push(newEntry);\n        curDate = addYears(curDate, 1);\n      }\n      rows.push(row);\n    }\n    this._calendarRows = rows;\n  }\n\n  private _buildYearView(): void {\n    this._viewHeader = `${this._viewDate.getFullYear()}`;\n\n    let curDate: Date = startOfYear(this._viewDate);\n\n    let rows: AjfCalendarEntry[][] = [];\n    for (let i = 0; i < 4; i++) {\n      let row: AjfCalendarEntry[] = [];\n      for (let j = 0; j < 3; j++) {\n        let date = new Date(curDate);\n        let newEntry = new AjfCalendarEntry({\n          type: 'month',\n          date: date,\n          selected: 'none'\n        });\n        newEntry.selected = this._isEntrySelected(newEntry);\n        row.push(newEntry);\n        curDate = addMonths(curDate, 1);\n      }\n      rows.push(row);\n    }\n    this._calendarRows = rows;\n  }\n\n  private _buildMonthView(): void {\n    this._viewHeader = format(this._viewDate, 'MMM YYYY');\n\n    this._buildMonthViewWeekDays();\n    const monthBounds = this._getMonthStartEnd(this._viewDate);\n    let viewStartDate: Date = new Date(monthBounds.start);\n    let viewEndDate: Date = new Date(monthBounds.end);\n    if (!this._isoMode) {\n      viewStartDate = startOfWeek(viewStartDate);\n      viewEndDate = endOfWeek(viewEndDate);\n    }\n\n    let rows: AjfCalendarEntry[][] = [];\n    let todayDate = new Date();\n    let curDate = new Date(viewStartDate);\n    let minDate = this.minDate == null ? null : new Date(this.minDate);\n    let maxDate = this.maxDate == null ? null : new Date(this.maxDate);\n    while (curDate < viewEndDate) {\n      let row: AjfCalendarEntry[] = [];\n      for (let i = 0; i < 7; i++) {\n        let disabled = (minDate != null && isBefore(curDate, minDate)) ||\n          (maxDate != null && isAfter(curDate, maxDate));\n        let date = new Date(curDate);\n        let newEntry: AjfCalendarEntry = new AjfCalendarEntry({\n          type: 'day',\n          date: date,\n          selected: 'none',\n          highlight: format(todayDate, 'YYYY-MM-DD') === format(curDate, 'YYYY-MM-DD'),\n          disabled: disabled\n        });\n        newEntry.selected = this._isEntrySelected(newEntry);\n        row.push(newEntry);\n        curDate = addDays(curDate, 1);\n      }\n      rows.push(row);\n    }\n\n    this._calendarRows = rows;\n  }\n\n  private _buildMonthViewWeekDays(): void {\n    let curDate: Date;\n    if (this._isoMode) {\n      curDate = setISODay(startOfWeek(this._viewDate), 1);\n    } else {\n      curDate = startOfWeek(this._viewDate);\n    }\n    let weekDayNames: string[] = [];\n    for (let i = 0; i < 7; i++) {\n      weekDayNames.push(format(curDate, 'dddd'));\n      curDate = addDays(curDate, 1);\n    }\n    this._weekDays = weekDayNames;\n    this._cdr.markForCheck();\n  }\n\n  private _periodOrder(entryType: AjfCalendarPeriodType): number {\n    return ['day', 'week', 'month', 'year'].indexOf(entryType);\n  }\n\n  private _isEntrySelected(entry: AjfCalendarEntry): AjfCalendarEntrySelectedState {\n    if (\n      this._selectedPeriod != null && this._selectedPeriod.startDate != null &&\n      this._selectedPeriod.endDate != null\n    ) {\n      let selectionStart: Date = startOfDay(this._selectedPeriod.startDate);\n      let selectionEnd: Date = endOfDay(this._selectedPeriod.endDate);\n      let selectionPeriodOrder: number = this._periodOrder(this._selectedPeriod.type);\n\n      let entryPeriodOrder: number = this._periodOrder(entry.type);\n      let entryRange: { start: Date, end: Date } = entry.getRange();\n\n      if (entryPeriodOrder <= selectionPeriodOrder &&\n        this._isBetween(entryRange.start, selectionStart, selectionEnd) &&\n        this._isBetween(entryRange.end, selectionStart, selectionEnd)\n      ) {\n        return 'full';\n      } else if (entryPeriodOrder > selectionPeriodOrder &&\n        this._isBetween(selectionStart, entryRange.start, entryRange.end) &&\n        this._isBetween(selectionEnd, entryRange.start, entryRange.end)\n      ) {\n        return 'partial';\n      }\n    }\n\n    return 'none';\n  }\n\n  private _isBetween(date: Date, rangeLeft: Date, rangeRight: Date): boolean {\n    return (isAfter(date, rangeLeft) || isSameDay(date, rangeLeft))\n      && (isBefore(date, rangeRight) || isSameDay(date, rangeRight));\n  }\n\n  private _refreshSelection(): void {\n    for (let row of this._calendarRows) {\n      for (let entry of row) {\n        entry.selected = this._isEntrySelected(entry);\n      }\n    }\n  }\n\n  private _canSelectEntry(entry: AjfCalendarEntry): boolean {\n    if (['day', 'week'].indexOf(this._selectionMode) >= 0 && entry.type != 'day') {\n      return false;\n    }\n    if (this._selectionMode == 'month' && entry.type == 'year') {\n      return false;\n    }\n    return true;\n  }\n\n  private _nextViewMode(entry: AjfCalendarEntry): void {\n    if (this._viewMode == 'decade') {\n      this._viewMode = 'year';\n    } else if (this._viewMode == 'year') {\n      this._viewMode = 'month';\n    } else if (this._viewMode == 'month') {\n      return;\n    }\n    this._viewDate = entry.date;\n    this._buildCalendar();\n  }\n}\n"],"names":["AjfCalendarEntry","params","this","disabled","highlight","keys","Object","type","date","selected","indexOf","prototype","toString","getDate","format","getFullYear","getRange","start","Date","end","curDate","startOfMonth","startOfYear","endOfMonth","endOfYear","AjfCalendarPeriod","weekDays","AjfCalendarChange","AjfCalendar","_cdr","_disabled","_dateOnlyForDay","_viewMode","_selectionMode","_startOfWeekDay","_isoMode","_change","EventEmitter","_viewDate","_viewHeader","_calendarRows","_weekDays","_onChangeCallback","_","_onTouchedCallback","defineProperty","viewDate","_setViewDate","newDisabled","markForCheck","dateOnlyForDay","viewMode","_buildCalendar","selectionMode","weekDay","isoMode","_minDate","minDate","valueOf","_maxDate","maxDate","asObservable","period","_selectedPeriod","emit","source","_refreshSelection","startDate","selectedPeriod","endDate","prevPage","subMonths","subYears","nextPage","addMonths","addYears","previousViewMode","selectEntry","entry","_canSelectEntry","_nextViewMode","newPeriod","_isEntrySelected","startOfISOWeek","startOfWeek","weekStartsOn","endOfISOWeek","endOfWeek","monthBounds","_getMonthStartEnd","value","registerOnChange","fn","registerOnTouched","writeValue","parse","ngOnInit","ngAfterContentInit","startWeekDay","getDay","endWeekDay","addWeeks","subWeeks","_buildMonthView","_buildYearView","_buildDecadeView","curYear","firstYear","lastYear","setFullYear","rows","i","row","j","newEntry","push","_buildMonthViewWeekDays","viewStartDate","viewEndDate","todayDate","isBefore","isAfter","addDays","setISODay","weekDayNames","_periodOrder","entryType","selectionStart","startOfDay","selectionEnd","endOfDay","selectionPeriodOrder","entryPeriodOrder","entryRange","_isBetween","rangeLeft","rangeRight","isSameDay","_i","_a","length","_b","row_1"],"mappings":"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"}