{"version":3,"sources":["src/core/core-checkbox-group.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ajf","core","checkboxGroup","ng","cdk","coercion","forms","rxjs","operators","this","AJF_CHECKBOX_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","AjfCheckboxGroup","multi","AjfCheckboxGroupItemChange","AjfCheckboxGroupChange","_uniqueIdCounter","checkboxes","_value","_disabled","_selected","_change","EventEmitter","change","asObservable","onTouched","_controlValueAccessorChangeFn","_","Object","defineProperty","prototype","get","set","newValue","_updateSelectedCheckboxesFromValue","_emitChangeEvent","enumerable","configurable","_name","value","_updateCheckboxesNames","coerceBooleanProperty","selected","values","forEach","c","push","checked","writeValue","registerOnChange","fn","registerOnTouched","addValue","curValue","slice","indexOf","removeValue","idx","splice","ngAfterContentInit","registerItem","item","_this","checkbox","name","event","source","emit","decorators","type","Directive","args","selector","providers","propDecorators","Input","disabled","Output","AjfCheckboxGroupItem","_checkboxId","BehaviorSubject","checkboxId","_checkedState","checkedState","_disabledState","disabledState","_checkedIconVal","_notCheckedIconVal","icon","combineLatest","pipe","map","r","id","next","getValue","_readonly","readonly","ngOnInit","onInputChange","stopPropagation","_toggle","ctorParameters","checkedIcon","notCheckedIcon","AjfCheckboxGroupModule","NgModule","imports","FormsModule","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core'), require('@angular/forms'), require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@ajf/core/checkbox-group', ['exports', '@angular/cdk/coercion', '@angular/core', '@angular/forms', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ajf = global.ajf || {}, global.ajf.core = global.ajf.core || {}, global.ajf.core.checkboxGroup = {}), global.ng.cdk.coercion, global.ng.core, global.ng.forms, global.rxjs, global.rxjs.operators));\n}(this, (function (exports, coercion, core, forms, rxjs, operators) { 'use strict';\n\n    /**\n     * @license\n     * Copyright (C) 2018 Gnucoop soc. coop.\n     *\n     * This file is part of the Advanced JSON forms (ajf).\n     *\n     * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n     * modify it under the terms of the GNU Affero General Public License as\n     * published by the Free Software Foundation, either version 3 of the License,\n     * or (at your option) any later version.\n     *\n     * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n     * General Public License for more details.\n     *\n     * You should have received a copy of the GNU Affero General Public License\n     * along with Advanced JSON forms (ajf).\n     * If not, see http://www.gnu.org/licenses/.\n     *\n     */\n    var AJF_CHECKBOX_GROUP_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        useExisting: core.forwardRef(function () { return AjfCheckboxGroup; }),\n        multi: true\n    };\n    var AjfCheckboxGroupItemChange = /** @class */ (function () {\n        function AjfCheckboxGroupItemChange() {\n        }\n        return AjfCheckboxGroupItemChange;\n    }());\n    var AjfCheckboxGroupChange = /** @class */ (function () {\n        function AjfCheckboxGroupChange() {\n        }\n        return AjfCheckboxGroupChange;\n    }());\n    var _uniqueIdCounter = 0;\n    var AjfCheckboxGroup = /** @class */ (function () {\n        function AjfCheckboxGroup() {\n            this.checkboxes = [];\n            /** The value for the button toggle group. Should match currently selected button toggle. */\n            this._value = [];\n            /** Disables all toggles in the group. */\n            this._disabled = false;\n            /** The currently selected button toggle, should match the value. */\n            this._selected = [];\n            /** Event emitted when the group's value changes. */\n            this._change = new core.EventEmitter();\n            this.change = this._change.asObservable();\n            /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n            this.onTouched = function () { };\n            /** The method to be called in order to update ngModel. */\n            this._controlValueAccessorChangeFn = function (_) { };\n        }\n        Object.defineProperty(AjfCheckboxGroup.prototype, \"value\", {\n            get: function () { return this._value; },\n            set: function (newValue) {\n                if (this._value !== newValue) {\n                    this._value = newValue;\n                    this._updateSelectedCheckboxesFromValue();\n                    this._emitChangeEvent();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AjfCheckboxGroup.prototype, \"name\", {\n            get: function () { return this._name; },\n            set: function (value) {\n                this._name = value;\n                this._updateCheckboxesNames();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AjfCheckboxGroup.prototype, \"disabled\", {\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AjfCheckboxGroup.prototype, \"selected\", {\n            get: function () { return this._selected; },\n            set: function (selected) {\n                this._selected = selected;\n                var values = [];\n                if (selected) {\n                    selected.forEach(function (c) {\n                        values.push(c.value);\n                        if (!c.checked) {\n                            c.checked = true;\n                        }\n                    });\n                }\n                this._value = values;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Implemented as part of ControlValueAccessor.\n         */\n        AjfCheckboxGroup.prototype.writeValue = function (value) {\n            this.value = value;\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         */\n        AjfCheckboxGroup.prototype.registerOnChange = function (fn) {\n            this._controlValueAccessorChangeFn = fn;\n        };\n        /**\n         * Implemented as part of ControlValueAccessor.\n         */\n        AjfCheckboxGroup.prototype.registerOnTouched = function (fn) {\n            this.onTouched = fn;\n        };\n        AjfCheckboxGroup.prototype.addValue = function (value) {\n            var curValue = (this._value || []).slice(0);\n            if (curValue.indexOf(value) === -1) {\n                curValue.push(value);\n                this.value = curValue;\n            }\n        };\n        AjfCheckboxGroup.prototype.removeValue = function (value) {\n            var curValue = (this._value || []).slice(0);\n            var idx = curValue.indexOf(value);\n            if (idx > -1) {\n                curValue.splice(idx, 1);\n                this.value = curValue;\n            }\n        };\n        AjfCheckboxGroup.prototype.ngAfterContentInit = function () {\n            this._updateCheckboxesNames();\n            this._updateSelectedCheckboxesFromValue();\n        };\n        AjfCheckboxGroup.prototype.registerItem = function (item) {\n            this.checkboxes.push(item);\n        };\n        AjfCheckboxGroup.prototype._updateCheckboxesNames = function () {\n            var _this = this;\n            if (this.checkboxes == null) {\n                return;\n            }\n            this.checkboxes.forEach(function (checkbox) {\n                if (checkbox == null) {\n                    return;\n                }\n                checkbox.name = _this._name;\n            });\n        };\n        AjfCheckboxGroup.prototype._updateSelectedCheckboxesFromValue = function () {\n            var _this = this;\n            if (this.checkboxes == null) {\n                return;\n            }\n            this.checkboxes.forEach(function (checkbox) {\n                if (checkbox == null) {\n                    return;\n                }\n                if ((_this._value || []).indexOf(checkbox.value) > -1) {\n                    checkbox.checked = true;\n                }\n                else {\n                    checkbox.checked = false;\n                }\n            });\n        };\n        /** Dispatch change event with current selection and group value. */\n        AjfCheckboxGroup.prototype._emitChangeEvent = function () {\n            var event = new AjfCheckboxGroupChange();\n            event.source = this;\n            event.value = this._value;\n            this._controlValueAccessorChangeFn(event.value);\n            this._change.emit(event);\n        };\n        AjfCheckboxGroup.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'ajf-checkbox-group,[ajf-checkbox-group]',\n                        providers: [AJF_CHECKBOX_GROUP_VALUE_ACCESSOR]\n                    },] }\n        ];\n        AjfCheckboxGroup.propDecorators = {\n            value: [{ type: core.Input }],\n            name: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            change: [{ type: core.Output }]\n        };\n        return AjfCheckboxGroup;\n    }());\n    var AjfCheckboxGroupItem = /** @class */ (function () {\n        function AjfCheckboxGroupItem(checkboxGroup) {\n            /** The unique ID for this button toggle. */\n            this._checkboxId = new rxjs.BehaviorSubject('');\n            this.checkboxId = this._checkboxId.asObservable();\n            /** Whether or not this button toggle is checked. */\n            this._checkedState = new rxjs.BehaviorSubject(false);\n            this.checkedState = this._checkedState.asObservable();\n            /** Whether or not this button toggle is disabled. */\n            this._disabledState = new rxjs.BehaviorSubject(false);\n            this.disabledState = this._disabledState.asObservable();\n            this._checkedIconVal = new rxjs.BehaviorSubject('');\n            this._notCheckedIconVal = new rxjs.BehaviorSubject('');\n            /** Event emitted when the group value changes. */\n            this._change = new core.EventEmitter();\n            this.change = this._change.asObservable();\n            this.icon = rxjs.combineLatest(this._checkedState, this._checkedIconVal, this._notCheckedIconVal).pipe(operators.map(function (r) { return r[0] ? r[1] : r[2]; }));\n            if (checkboxGroup) {\n                this.checkboxGroup = checkboxGroup;\n                this.checkboxGroup.registerItem(this);\n            }\n        }\n        Object.defineProperty(AjfCheckboxGroupItem.prototype, \"id\", {\n            set: function (id) { this._checkboxId.next(id); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AjfCheckboxGroupItem.prototype, \"checked\", {\n            get: function () { return this._checkedState.getValue(); },\n            set: function (checked) { this._checkedState.next(checked); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AjfCheckboxGroupItem.prototype, \"disabled\", {\n            get: function () {\n                var disabled = this._disabledState.getValue();\n                return disabled || (this.checkboxGroup != null && this.checkboxGroup.disabled);\n            },\n            set: function (disabled) {\n                this._disabledState.next(disabled != null && disabled !== false);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AjfCheckboxGroupItem.prototype, \"value\", {\n            get: function () { return this._value; },\n            set: function (value) {\n                if (this._value !== value) {\n                    this._value = value;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AjfCheckboxGroupItem.prototype, \"readonly\", {\n            get: function () { return this._readonly; },\n            set: function (readonly) {\n                this._readonly = coercion.coerceBooleanProperty(readonly);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AjfCheckboxGroupItem.prototype, \"checkedIcon\", {\n            get: function () { return this._checkedIconVal.getValue(); },\n            set: function (icon) { this._checkedIconVal.next(icon); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AjfCheckboxGroupItem.prototype, \"notCheckedIcon\", {\n            get: function () { return this._notCheckedIconVal.getValue(); },\n            set: function (icon) { this._notCheckedIconVal.next(icon); },\n            enumerable: true,\n            configurable: true\n        });\n        AjfCheckboxGroupItem.prototype.ngOnInit = function () {\n            if (this.id == null) {\n                this.id = \"ajf-checkbox-group-item-\" + _uniqueIdCounter++;\n            }\n            if (this.checkboxGroup && this.checkboxGroup.value &&\n                this.checkboxGroup.value.indexOf(this._value) > -1) {\n                this.checked = true;\n            }\n        };\n        /** Checks the button toggle due to an interaction with the underlying native input. */\n        AjfCheckboxGroupItem.prototype.onInputChange = function (event) {\n            event.stopPropagation();\n            this._toggle();\n        };\n        /** Toggle the state of the current button toggle. */\n        AjfCheckboxGroupItem.prototype._toggle = function () {\n            this.checked = !this.checked;\n            if (this.checkboxGroup != null) {\n                if (this.checked) {\n                    this.checkboxGroup.addValue(this._value);\n                }\n                else {\n                    this.checkboxGroup.removeValue(this._value);\n                }\n            }\n        };\n        AjfCheckboxGroupItem.decorators = [\n            { type: core.Directive }\n        ];\n        /** @nocollapse */\n        AjfCheckboxGroupItem.ctorParameters = function () { return [\n            { type: AjfCheckboxGroup }\n        ]; };\n        AjfCheckboxGroupItem.propDecorators = {\n            id: [{ type: core.Input }],\n            name: [{ type: core.Input }],\n            checked: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            readonly: [{ type: core.Input }],\n            checkedIcon: [{ type: core.Input }],\n            notCheckedIcon: [{ type: core.Input }],\n            change: [{ type: core.Output }]\n        };\n        return AjfCheckboxGroupItem;\n    }());\n\n    /**\n     * @license\n     * Copyright (C) 2018 Gnucoop soc. coop.\n     *\n     * This file is part of the Advanced JSON forms (ajf).\n     *\n     * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n     * modify it under the terms of the GNU Affero General Public License as\n     * published by the Free Software Foundation, either version 3 of the License,\n     * or (at your option) any later version.\n     *\n     * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n     * General Public License for more details.\n     *\n     * You should have received a copy of the GNU Affero General Public License\n     * along with Advanced JSON forms (ajf).\n     * If not, see http://www.gnu.org/licenses/.\n     *\n     */\n    var AjfCheckboxGroupModule = /** @class */ (function () {\n        function AjfCheckboxGroupModule() {\n        }\n        AjfCheckboxGroupModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            forms.FormsModule\n                        ],\n                        declarations: [\n                            AjfCheckboxGroup\n                        ],\n                        exports: [\n                            AjfCheckboxGroup\n                        ]\n                    },] }\n        ];\n        return AjfCheckboxGroupModule;\n    }());\n\n    /**\n     * @license\n     * Copyright (C) 2018 Gnucoop soc. coop.\n     *\n     * This file is part of the Advanced JSON forms (ajf).\n     *\n     * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n     * modify it under the terms of the GNU Affero General Public License as\n     * published by the Free Software Foundation, either version 3 of the License,\n     * or (at your option) any later version.\n     *\n     * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n     * General Public License for more details.\n     *\n     * You should have received a copy of the GNU Affero General Public License\n     * along with Advanced JSON forms (ajf).\n     * If not, see http://www.gnu.org/licenses/.\n     *\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.AJF_CHECKBOX_GROUP_VALUE_ACCESSOR = AJF_CHECKBOX_GROUP_VALUE_ACCESSOR;\n    exports.AjfCheckboxGroup = AjfCheckboxGroup;\n    exports.AjfCheckboxGroupChange = AjfCheckboxGroupChange;\n    exports.AjfCheckboxGroupItem = AjfCheckboxGroupItem;\n    exports.AjfCheckboxGroupItemChange = AjfCheckboxGroupItemChange;\n    exports.AjfCheckboxGroupModule = AjfCheckboxGroupModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=core-checkbox-group.umd.js.map\n"]}