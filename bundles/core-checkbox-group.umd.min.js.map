{"version":3,"file":"core-checkbox-group.umd.min.js","sources":["../../src/core/checkbox-group/checkbox-group.ts","../../src/core/checkbox-group/checkbox-group-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {\n  AfterContentInit, Directive, EventEmitter, Input, forwardRef, OnInit, Output, QueryList\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nimport {combineLatest, BehaviorSubject, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {coerceBooleanProperty} from '@ajf/core/utils';\n\n\nexport const AJF_CHECKBOX_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => AjfCheckboxGroup),\n  multi: true\n};\n\nexport class AjfCheckboxGroupItemChange<T> {\n  source: AjfCheckboxGroupItem<T>;\n  value: any;\n}\n\nexport class AjfCheckboxGroupChange<T> {\n  source: AjfCheckboxGroup<T>;\n  value: any;\n}\n\nlet _uniqueIdCounter = 0;\n\n\n@Directive({\n  selector: 'ajf-checkbox-group,[ajf-checkbox-group]',\n  providers: [AJF_CHECKBOX_GROUP_VALUE_ACCESSOR]\n})\nexport class AjfCheckboxGroup<T> implements AfterContentInit, ControlValueAccessor {\n  /** Child button toggle buttons. */\n  checkboxes: QueryList<AjfCheckboxGroupItem<T>>;\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: T[] = [];\n  get value(): T[] { return this._value; }\n  @Input() set value(newValue: T[]) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n      this._updateSelectedCheckboxesFromValue();\n      this._emitChangeEvent();\n    }\n  }\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string;\n  get name(): string { return this._name; }\n  @Input() set name(value: string) {\n    this._name = value;\n    this._updateCheckboxesNames();\n  }\n\n  /** Disables all toggles in the group. */\n  private _disabled:  boolean = false;\n  get disabled(): boolean { return this._disabled; }\n  @Input() set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: AjfCheckboxGroupItem<T>[] = [];\n  get selected() { return this._selected; }\n  set selected(selected: AjfCheckboxGroupItem<T>[]) {\n    this._selected = selected;\n    let values: T[] = [];\n    if (selected) {\n      selected.forEach(c => {\n        values.push(c.value);\n        if (!c.checked) {\n          c.checked = true;\n        }\n      });\n    }\n    this._value = values;\n  }\n\n  /** Event emitted when the group's value changes. */\n  private _change: EventEmitter<AjfCheckboxGroupChange<T>> =\n    new EventEmitter<AjfCheckboxGroupChange<T>>();\n    @Output() readonly change: Observable<AjfCheckboxGroupChange<T>> = this._change.asObservable();\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  writeValue(value: T[]) {\n    this.value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  registerOnChange(fn: (value: T[]) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  addValue(value: T) {\n    let curValue = (this._value || []).slice(0);\n    if (curValue.indexOf(value) === -1) {\n      curValue.push(value);\n      this.value = curValue;\n    }\n  }\n\n  removeValue(value: T) {\n    let curValue = (this._value || []).slice(0);\n    let idx = curValue.indexOf(value);\n    if (idx > -1) {\n      curValue.splice(idx, 1);\n      this.value = curValue;\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._updateCheckboxesNames();\n    this._updateSelectedCheckboxesFromValue();\n  }\n\n  /** The method to be called in order to update ngModel. */\n  private _controlValueAccessorChangeFn: (value: any) => void = (_) => {};\n\n  private _updateCheckboxesNames(): void {\n    if (this.checkboxes == null) { return; }\n    this.checkboxes.forEach((checkbox) => {\n      checkbox.name = this._name;\n    });\n  }\n\n  private _updateSelectedCheckboxesFromValue(): void {\n    if (this.checkboxes == null) { return; }\n    this.checkboxes.forEach(checkbox => {\n      if ((this._value || []).indexOf(checkbox.value) > -1) {\n        checkbox.checked = true;\n      } else {\n        checkbox.checked = false;\n      }\n    });\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  private _emitChangeEvent(): void {\n    let event = new AjfCheckboxGroupChange<T>();\n    event.source = this;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this._change.emit(event);\n  }\n}\n\nexport class AjfCheckboxGroupItem<T> implements OnInit {\n  /** The unique ID for this button toggle. */\n  private _checkboxId: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  readonly checkboxId: Observable<string> = this._checkboxId.asObservable();\n\n  set id(id: string) { this._checkboxId.next(id); }\n\n  name: string;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  readonly checkboxGroup: AjfCheckboxGroup<T>;\n\n  /** Whether or not this button toggle is checked. */\n  private _checkedState: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  readonly checkedState: Observable<boolean> = this._checkedState.asObservable();\n  get checked(): boolean { return this._checkedState.getValue(); }\n  set checked(checked: boolean) { this._checkedState.next(checked); }\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabledState: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  readonly disabledState: Observable<boolean> = this._disabledState.asObservable();\n  get disabled(): boolean {\n    const disabled = this._disabledState.getValue();\n    return disabled || (this.checkboxGroup != null && this.checkboxGroup.disabled);\n  }\n  set disabled(disabled: boolean) {\n    this._disabledState.next(disabled != null && disabled !== false);\n  }\n\n  /** Value assigned to this button toggle. */\n  private _value: T;\n  get value(): T { return this._value; }\n  set value(value: T) {\n    if (this._value !== value) {\n      this._value = value;\n    }\n  }\n\n  private _checkedIconVal: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  get checkedIcon(): string { return this._checkedIconVal.getValue(); }\n  set checkedIcon(icon: string) { this._checkedIconVal.next(icon); }\n\n  private _notCheckedIconVal: BehaviorSubject<string> =\n      new BehaviorSubject<string>('');\n  get notCheckedIcon(): string { return this._notCheckedIconVal.getValue(); }\n  set notCheckedIcon(icon: string) { this._notCheckedIconVal.next(icon); }\n\n  readonly icon: Observable<string>;\n\n  /** Event emitted when the group value changes. */\n  private _change: EventEmitter<AjfCheckboxGroupItemChange<T>>\n    = new EventEmitter<AjfCheckboxGroupItemChange<T>>();\n  readonly change: Observable<AjfCheckboxGroupItemChange<T>> = this._change.asObservable();\n\n  constructor(checkboxGroup?: AjfCheckboxGroup<T>) {\n    this.icon = combineLatest(\n      this._checkedState, this._checkedIconVal, this._notCheckedIconVal\n    ).pipe(\n      map(r => r[0] ? r[1] : r[2])\n    );\n\n    if (checkboxGroup) {\n      this.checkboxGroup = checkboxGroup;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `ajf-checkbox-group-item-${_uniqueIdCounter++}`;\n    }\n\n    if (\n      this.checkboxGroup && this.checkboxGroup.value &&\n      this.checkboxGroup.value.indexOf(this._value) > -1\n    ) {\n      this.checked = true;\n    }\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._toggle();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n\n    if (this.checkboxGroup != null) {\n      if (this.checked) {\n        this.checkboxGroup.addValue(this._value);\n      } else {\n        this.checkboxGroup.removeValue(this._value);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport {AjfCheckboxGroup} from './checkbox-group';\n\n\n@NgModule({\n  imports: [\n    FormsModule\n  ],\n  declarations: [\n    AjfCheckboxGroup\n  ],\n  exports: [\n    AjfCheckboxGroup\n  ]\n})\nexport class AjfCheckboxGroupModule { }\n"],"names":["AJF_CHECKBOX_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","AjfCheckboxGroup","multi","_uniqueIdCounter","this","_value","_disabled","_selected","_change","EventEmitter","change","asObservable","onTouched","_controlValueAccessorChangeFn","_","Object","defineProperty","prototype","newValue","_updateSelectedCheckboxesFromValue","_emitChangeEvent","_name","value","_updateCheckboxesNames","coerceBooleanProperty","selected","values","forEach","c","push","checked","writeValue","registerOnChange","fn","registerOnTouched","addValue","curValue","slice","indexOf","removeValue","idx","splice","ngAfterContentInit","_this","checkboxes","checkbox","name","event","AjfCheckboxGroupChange","source","emit","type","Directive","args","selector","providers","Input","disabled","Output","AjfCheckboxGroupItem","checkboxGroup","_checkboxId","BehaviorSubject","checkboxId","_checkedState","checkedState","_disabledState","disabledState","_checkedIconVal","_notCheckedIconVal","icon","combineLatest","pipe","map","r","id","next","getValue","ngOnInit","onInputChange","stopPropagation","_toggle","AjfCheckboxGroupModule","NgModule","imports","FormsModule","declarations","exports"],"mappings":"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"}