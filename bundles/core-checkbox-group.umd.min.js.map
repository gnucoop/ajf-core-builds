{"version":3,"file":"core-checkbox-group.umd.min.js","sources":["../../src/core/checkbox-group/checkbox-group.ts","../../src/core/checkbox-group/checkbox-group-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AfterContentInit, Directive, EventEmitter, Input, forwardRef, OnInit,\n  Output} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nimport {combineLatest, BehaviorSubject, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {coerceBooleanProperty} from '@ajf/core/utils';\n\n\nexport const AJF_CHECKBOX_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => AjfCheckboxGroup),\n  multi: true\n};\n\nexport class AjfCheckboxGroupItemChange<T> {\n  source: AjfCheckboxGroupItem<T>;\n  value: any;\n}\n\nexport class AjfCheckboxGroupChange<T> {\n  source: AjfCheckboxGroup<T>;\n  value: any;\n}\n\nlet _uniqueIdCounter = 0;\n\n\n@Directive({\n  selector: 'ajf-checkbox-group,[ajf-checkbox-group]',\n  providers: [AJF_CHECKBOX_GROUP_VALUE_ACCESSOR]\n})\nexport class AjfCheckboxGroup<T> implements AfterContentInit, ControlValueAccessor {\n  checkboxes: AjfCheckboxGroupItem<T>[] = [];\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: T[] = [];\n  get value(): T[] { return this._value; }\n  @Input() set value(newValue: T[]) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n      this._updateSelectedCheckboxesFromValue();\n      this._emitChangeEvent();\n    }\n  }\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string;\n  get name(): string { return this._name; }\n  @Input() set name(value: string) {\n    this._name = value;\n    this._updateCheckboxesNames();\n  }\n\n  /** Disables all toggles in the group. */\n  private _disabled:  boolean = false;\n  get disabled(): boolean { return this._disabled; }\n  @Input() set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: AjfCheckboxGroupItem<T>[] = [];\n  get selected() { return this._selected; }\n  set selected(selected: AjfCheckboxGroupItem<T>[]) {\n    this._selected = selected;\n    let values: T[] = [];\n    if (selected) {\n      selected.forEach(c => {\n        values.push(c.value);\n        if (!c.checked) {\n          c.checked = true;\n        }\n      });\n    }\n    this._value = values;\n  }\n\n  /** Event emitted when the group's value changes. */\n  private _change: EventEmitter<AjfCheckboxGroupChange<T>> =\n    new EventEmitter<AjfCheckboxGroupChange<T>>();\n    @Output() readonly change: Observable<AjfCheckboxGroupChange<T>> = this._change.asObservable();\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  writeValue(value: T[]) {\n    this.value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  registerOnChange(fn: (value: T[]) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  addValue(value: T) {\n    let curValue = (this._value || []).slice(0);\n    if (curValue.indexOf(value) === -1) {\n      curValue.push(value);\n      this.value = curValue;\n    }\n  }\n\n  removeValue(value: T) {\n    let curValue = (this._value || []).slice(0);\n    let idx = curValue.indexOf(value);\n    if (idx > -1) {\n      curValue.splice(idx, 1);\n      this.value = curValue;\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._updateCheckboxesNames();\n    this._updateSelectedCheckboxesFromValue();\n  }\n\n  registerItem(item: AjfCheckboxGroupItem<T>): void {\n    this.checkboxes.push(item);\n  }\n\n  /** The method to be called in order to update ngModel. */\n  private _controlValueAccessorChangeFn: (value: any) => void = (_) => {};\n\n  private _updateCheckboxesNames(): void {\n    if (this.checkboxes == null) { return; }\n    this.checkboxes.forEach((checkbox) => {\n      if (checkbox == null) { return; }\n      checkbox.name = this._name;\n    });\n  }\n\n  private _updateSelectedCheckboxesFromValue(): void {\n    if (this.checkboxes == null) { return; }\n    this.checkboxes.forEach(checkbox => {\n      if (checkbox == null) { return; }\n      if ((this._value || []).indexOf(checkbox.value) > -1) {\n        checkbox.checked = true;\n      } else {\n        checkbox.checked = false;\n      }\n    });\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  private _emitChangeEvent(): void {\n    let event = new AjfCheckboxGroupChange<T>();\n    event.source = this;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this._change.emit(event);\n  }\n}\n\nexport class AjfCheckboxGroupItem<T> implements OnInit {\n  /** The unique ID for this button toggle. */\n  private _checkboxId: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  readonly checkboxId: Observable<string> = this._checkboxId.asObservable();\n\n  set id(id: string) { this._checkboxId.next(id); }\n\n  name: string;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  readonly checkboxGroup: AjfCheckboxGroup<T>;\n\n  /** Whether or not this button toggle is checked. */\n  private _checkedState: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  readonly checkedState: Observable<boolean> = this._checkedState.asObservable();\n  get checked(): boolean { return this._checkedState.getValue(); }\n  set checked(checked: boolean) { this._checkedState.next(checked); }\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabledState: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  readonly disabledState: Observable<boolean> = this._disabledState.asObservable();\n  get disabled(): boolean {\n    const disabled = this._disabledState.getValue();\n    return disabled || (this.checkboxGroup != null && this.checkboxGroup.disabled);\n  }\n  set disabled(disabled: boolean) {\n    this._disabledState.next(disabled != null && disabled !== false);\n  }\n\n  /** Value assigned to this button toggle. */\n  private _value: T;\n  get value(): T { return this._value; }\n  set value(value: T) {\n    if (this._value !== value) {\n      this._value = value;\n    }\n  }\n\n  private _checkedIconVal: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  get checkedIcon(): string { return this._checkedIconVal.getValue(); }\n  set checkedIcon(icon: string) { this._checkedIconVal.next(icon); }\n\n  private _notCheckedIconVal: BehaviorSubject<string> =\n      new BehaviorSubject<string>('');\n  get notCheckedIcon(): string { return this._notCheckedIconVal.getValue(); }\n  set notCheckedIcon(icon: string) { this._notCheckedIconVal.next(icon); }\n\n  readonly icon: Observable<string>;\n\n  /** Event emitted when the group value changes. */\n  private _change: EventEmitter<AjfCheckboxGroupItemChange<T>>\n    = new EventEmitter<AjfCheckboxGroupItemChange<T>>();\n  readonly change: Observable<AjfCheckboxGroupItemChange<T>> = this._change.asObservable();\n\n  constructor(checkboxGroup?: AjfCheckboxGroup<T>) {\n    this.icon = combineLatest(\n      this._checkedState, this._checkedIconVal, this._notCheckedIconVal\n    ).pipe(\n      map(r => r[0] ? r[1] : r[2])\n    );\n\n    if (checkboxGroup) {\n      this.checkboxGroup = checkboxGroup;\n      this.checkboxGroup.registerItem(this);\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `ajf-checkbox-group-item-${_uniqueIdCounter++}`;\n    }\n\n    if (\n      this.checkboxGroup && this.checkboxGroup.value &&\n      this.checkboxGroup.value.indexOf(this._value) > -1\n    ) {\n      this.checked = true;\n    }\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._toggle();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n\n    if (this.checkboxGroup != null) {\n      if (this.checked) {\n        this.checkboxGroup.addValue(this._value);\n      } else {\n        this.checkboxGroup.removeValue(this._value);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport {AjfCheckboxGroup} from './checkbox-group';\n\n\n@NgModule({\n  imports: [\n    FormsModule\n  ],\n  declarations: [\n    AjfCheckboxGroup\n  ],\n  exports: [\n    AjfCheckboxGroup\n  ]\n})\nexport class AjfCheckboxGroupModule { }\n"],"names":["AJF_CHECKBOX_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","AjfCheckboxGroup","multi","_uniqueIdCounter","Object","defineProperty","prototype","this","_value","newValue","_updateSelectedCheckboxesFromValue","_emitChangeEvent","_name","value","_updateCheckboxesNames","_disabled","coerceBooleanProperty","_selected","selected","values","forEach","c","push","checked","writeValue","registerOnChange","fn","_controlValueAccessorChangeFn","registerOnTouched","onTouched","addValue","curValue","slice","indexOf","removeValue","idx","splice","ngAfterContentInit","registerItem","item","checkboxes","_this","checkbox","name","event","AjfCheckboxGroupChange","source","_change","emit","type","Directive","args","selector","providers","Input","disabled","change","Output","EventEmitter","asObservable","_","AjfCheckboxGroupItem","id","_checkboxId","next","_checkedState","getValue","_disabledState","checkboxGroup","_checkedIconVal","icon","_notCheckedIconVal","ngOnInit","onInputChange","stopPropagation","_toggle","BehaviorSubject","checkboxId","checkedState","disabledState","combineLatest","pipe","map","r","AjfCheckboxGroupModule","NgModule","imports","FormsModule","declarations","exports"],"mappings":"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"}