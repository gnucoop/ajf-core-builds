{"version":3,"file":"core-forms.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/core/forms/attachments.ts","../../src/core/forms/get-type-name.ts","../../src/core/forms/choices.ts","../../src/core/forms/errors.ts","../../src/core/forms/math.ts","../../src/core/forms/validation.ts","../../src/core/forms/warning.ts","../../src/core/forms/nodes.ts","../../src/core/forms/field-utils.ts","../../src/core/forms/field-icon.ts","../../src/core/forms/nodes-instances.ts","../../src/core/forms/field.ts","../../src/core/forms/form-renderer-utils.ts","../../src/core/forms/validation-service.ts","../../src/core/forms/form-renderer.ts","../../src/core/forms/form.ts","../../src/core/forms/bool-to-int.ts","../../src/core/forms/table-row-class.ts","../../src/core/forms/forms-module.ts","../../src/core/forms/forms.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {deepCopy} from '@ajf/core/utils';\n\nexport enum AjfAttachmentsType {\n  Link,\n  Pdf,\n  LENGTH\n}\n\nexport interface IAjfAttachment {\n  label: string;\n  value: any;\n  type: string;\n}\n\n/**\n * This class will define an ajf attachment\n */\nexport class AjfAttachment<T> {\n  get label(): string { return this._label; }\n  get value(): T { return this._value; }\n  get type(): string { return this._type; }\n\n  private _label: string;\n  private _value: T;\n  private _type: string;\n\n  constructor(obj?: any) {\n    this._label = obj && obj.label || null;\n    this._value = obj && obj.value || null;\n    this._type = obj && obj.type || null;\n  }\n}\n\n/**\n * This class will define an ajf attachments orgin\n */\nexport abstract class AjfAttachmentsOrigin {\n  private _name: string;\n\n  /**\n   * this static method will create attachment\n   * @param obj : any - object attachment\n   * @return AjfAttachment\n   */\n  static create(obj: any): any {\n    let attachments: IAjfAttachment[] = [];\n    if (obj.attachments instanceof Array) {\n      for (let i = 0; i < obj.attachments.length; i++) {\n        let att: any = obj.attachments[i];\n        switch (att.type) {\n        case AjfAttachmentsType.Link:\n          attachments.push(new AjfAttachment<string>(att));\n          break;\n        case AjfAttachmentsType.Pdf:\n          attachments.push(new AjfAttachment<string>(att));\n          break;\n        default:\n          throw new Error('Invalid attachment type');\n        }\n      }\n    }\n    obj.attachments = attachments;\n    return new AjfAttachmentsFixedOrigin(obj);\n  }\n  /**\n   * this static method will load an AjfAttachmentsOrigin from json\n   * @param obj : any - object Attachments\n   * @return AjfAttachmentsOrigin\n   */\n  static fromJson(obj: any): AjfAttachmentsOrigin {\n    obj = deepCopy(obj);\n    let keys: string[] = Object.keys(obj);\n    if (keys.indexOf('type') === -1) {\n      throw new Error('Attachments origin type missing type');\n    }\n    let type: string = obj.type;\n    delete obj.type;\n    switch (type) {\n    case 'fixed':\n      return AjfAttachmentsFixedOrigin.create(obj);\n    default:\n      throw new Error('Invalid attachment origin type');\n    }\n  }\n\n  getName(): string { return this._name; }\n\n  constructor(obj?: any) { this._name = obj && obj.name || null; }\n\n  abstract getAttachments(): IAjfAttachment[];\n}\n/**\n * This class will define an ajf attachments fixed origin\n */\nexport class AjfAttachmentsFixedOrigin extends AjfAttachmentsOrigin {\n  private _attachments: IAjfAttachment[];\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this._attachments = obj && obj.attachments || [];\n  }\n\n  getAttachments(): IAjfAttachment[] { return this._attachments; }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nexport function getTypeName(v: any): string {\n  let typeStr = typeof v;\n  return typeStr === 'object'\n    ? v.constructor.toString().match(/\\w+/g)[1]\n    : typeStr;\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Observable, Subscription} from 'rxjs';\n\nimport {AjfJsonSerializable} from '@ajf/core/models';\nimport {deepCopy} from '@ajf/core/utils';\n\nimport {getTypeName} from './get-type-name';\n\nexport enum AjfChoicesType {\n  String,\n  Number,\n  LENGTH\n}\n\nexport interface IAjfChoicesOrigin {\n  getType(): string;\n  getName(): string;\n  getLabel(): string;\n  getChoices(): Array<any>;\n  getChoicesType(): any;\n  setName(name: string): void;\n  setLabel(label: string): void;\n}\n\nexport class AjfChoice<T> extends AjfJsonSerializable {\n  label: string;\n  value: T;\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.label = obj && obj.label || '';\n    this.value = obj && obj.value || null;\n  }\n}\n\nexport abstract class AjfChoicesOrigin<T> extends AjfJsonSerializable implements\n    IAjfChoicesOrigin {\n  private _name: string;\n  private _label: string;\n  private _choicesType: string;\n\n  static create(type: string, obj?: any): any {\n    switch (type) {\n    case 'string':\n      return new AjfChoicesFixedOrigin<string>(obj);\n    case 'number':\n      return new AjfChoicesFixedOrigin<number>(obj);\n    default:\n      return null;\n    }\n  }\n\n  static fromJson(obj: any): AjfChoicesOrigin<any> {\n    obj = deepCopy(obj);\n    let keys: string[] = Object.keys(obj);\n    if (keys.indexOf('type') === -1) {\n      throw new Error('Choices origin type missing type');\n    }\n    let type: string = obj.type;\n    delete obj.type;\n    switch (type) {\n    case 'fixed':\n      return new AjfChoicesFixedOrigin<any>(obj);\n    case 'function':\n      return new AjfChoicesFunctionOrigin<any>(obj);\n    case 'observable':\n      return new AjfChoicesObservableOrigin<any>(obj);\n    case 'observableArray':\n      return new AjfChoicesObservableArrayOrigin<any>(obj);\n    case 'promise':\n      return new AjfChoicesObservableOrigin<any>(obj);\n    default:\n      throw new Error('Invalid choices origin type');\n    }\n  }\n\n  constructor(obj?: any) {\n    super();\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat(\n        [ 'type', 'name', 'label', 'choicesType' ]);\n\n    this._name = obj && obj.name || null;\n    this._label = obj && obj.label || null;\n    this._choicesType = obj && obj.choicesType || null;\n  }\n\n  abstract getType(): string;\n\n  getName(): string { return this._name; }\n\n  getLabel(): string { return this._label; }\n\n  setName(name: string): void { this._name = name; }\n\n  setLabel(label: string): void { this._label = label; }\n\n  abstract getChoices(): Array<AjfChoice<T>>;\n\n  getChoicesType(): string {\n    return this._choicesType || this.guessChoicesType();\n  }\n\n  private guessChoicesType(): string {\n    let cs = this.getChoices();\n    if (cs && cs.length > 0) {\n      this._choicesType = getTypeName(cs[0].value);\n    }\n    return this._choicesType;\n  }\n}\n\nexport interface IAjfChoicesFunction<T> extends Function { (): AjfChoice<T>[]; }\n\nexport class AjfChoicesFixedOrigin<T> extends AjfChoicesOrigin<T> {\n  private _choices: AjfChoice<T>[];\n\n  getType(): string { return 'fixed'; }\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat('choices');\n\n    this._choices = obj && <AjfChoice<T>[]>obj.choices || [];\n  }\n\n  getChoices(): AjfChoice<T>[] { return this._choices; }\n\n  setChoices(choices: AjfChoice<T>[]) { this._choices = choices.slice(0); }\n}\n\nexport class AjfChoicesFunctionOrigin<T> extends AjfChoicesOrigin<T> {\n  private _generator: IAjfChoicesFunction<T>;\n  get generator(): IAjfChoicesFunction<T> { return this._generator; }\n\n  getType(): string { return 'function'; }\n\n  constructor(generator: IAjfChoicesFunction<T>, obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat('generator');\n\n    this._generator = generator;\n  }\n\n  getChoices(): AjfChoice<T>[] { return this._generator(); }\n}\n\nexport class AjfChoicesObservableOrigin<T> extends AjfChoicesOrigin<T> {\n  private _currentChoices: AjfChoice<T>[] = [];\n  private _subscription: Subscription = Subscription.EMPTY;\n\n  get observable(): Observable<AjfChoice<T>> {\n    return this._observable;\n  }\n\n  getType(): string { return 'observable'; }\n\n  constructor(private _observable: Observable<AjfChoice<T>>, obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat('observable');\n\n    let self = this;\n    this._subscription = _observable.subscribe(\n        (x: AjfChoice<T>) => self._currentChoices.push(x));\n  }\n\n  getChoices(): AjfChoice<T>[] { return this._currentChoices.splice(0); }\n\n  destroy(): void {\n    this._subscription.unsubscribe();\n  }\n}\n\nexport class AjfChoicesObservableArrayOrigin<T> extends AjfChoicesOrigin<T> {\n  private _currentChoices: AjfChoice<T>[] = [];\n  private _subscription: Subscription = Subscription.EMPTY;\n\n  get observable(): Observable<AjfChoice<T>[]> {\n    return this._observable;\n  }\n\n  getType(): string { return 'observableArray'; }\n\n  constructor(private _observable: Observable<AjfChoice<T>[]>, obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat('observable');\n\n    let self = this;\n    this._subscription = _observable.subscribe(\n        (x: AjfChoice<T>[]) => self._currentChoices = x.splice(0));\n  }\n\n  getChoices(): AjfChoice<T>[] { return this._currentChoices.splice(0); }\n\n  destroy(): void {\n    this._subscription.unsubscribe();\n  }\n}\n\nexport class AjfChoicesPromiseOrigin<T> extends AjfChoicesOrigin<T> {\n  private _choices: AjfChoice<T>[] = [];\n\n  getType(): string { return 'promise'; }\n\n  constructor(promise: Promise<AjfChoice<T>[]>, obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat('promise');\n\n    promise.then((x: AjfChoice<T>[]) => { this._choices = x.splice(0); });\n  }\n\n  getChoices(): AjfChoice<T>[] { return this._choices.splice(0); }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfError} from '@ajf/core/models';\n\n/**\n * This class will define an Ajf invalid field definition error\n */\nexport class AjfInvalidFieldDefinitionError extends AjfError {\n  get name(): string { return 'AjfInvalidFieldDefinitionError'; }\n\n  constructor(message?: string) {\n    super(message);\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nexport function factorial(n: number): number {\n  let f = 1;\n  for (let i: number = n; i > 1; i--) {\n    f = f * i;\n  }\n  return f;\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCondition, AjfJsonSerializable} from '@ajf/core/models';\nimport {deepCopy} from '@ajf/core/utils';\n\n\nexport class AjfValidationResult {\n\n  result: boolean;\n  error: string;\n  clientValidation: boolean;\n\n  /**\n   * this constructor will assign the parameters value to a class variables\n   * @param res : boolean\n   * @param err : string\n   * @cVal : boolean\n   */\n  constructor(res: boolean, err: string, cVal: boolean) {\n    this.result = res;\n    this.error = err;\n    this.clientValidation = cVal;\n  }\n}\n\n/**\n * This class will define an ajf validation\n */\nexport class AjfValidation extends AjfCondition {\n  clientValidation: boolean;\n  errorMessage: string;\n\n  /**\n   * this static method will load an AjfValidation from json\n   * @param obj  : any - object validation\n   * @return AjfValidation\n   */\n  static fromJson(obj: any): AjfValidation {\n    obj = deepCopy(obj);\n    return new AjfValidation(obj);\n  }\n\n  /**\n   * this static method will get an ajfValidation with maxValue setted\n   * @param maxValue : number - max value\n   * @return AjfValidation\n   */\n  static getMaxCondition(maxValue: number): AjfValidation {\n    return new AjfValidation({\n      condition : '$value <= ' + maxValue.toString(),\n      errorMessage : 'Value must be <= ' + maxValue.toString()\n    });\n  }\n\n  /**\n   * this static method will get an ajfValidation with minValue setted\n   * @param minValue : number - min value\n   * @return AjfValidation\n   */\n  static getMinCondition(minValue: number): AjfValidation {\n    return new AjfValidation({\n      condition : '$value >= ' + minValue.toString(),\n      errorMessage : 'Value must be >= ' + minValue.toString()\n    });\n  }\n\n  /**\n   * this static method will get an ajfValidation with notEmpty setted\n   * @return AjfValidation\n   */\n  static getNotEmptyCondition(): AjfValidation {\n    return new AjfValidation({\n      condition : `notEmpty($value)`,\n      errorMessage : `Value must not be empty`\n    });\n  }\n\n  /**\n   * this static method will get an ajfValidation with maxDigit setted\n   * @return AjfValidation\n   */\n  static getMaxDigitsCondition(maxValue: number): AjfValidation {\n    return new AjfValidation({\n      condition : `$value ? $value.toString().length <= ${maxValue.toString()} : false`,\n      errorMessage : 'Digits count must be <= ' + maxValue.toString()\n    });\n  }\n\n  /**\n   * this static method will get an ajfValidation with minDigit setted\n   * @return AjfValidation\n   */\n  static getMinDigitsCondition(minValue: number): AjfValidation {\n    return new AjfValidation({\n      condition : `$value ? $value.toString().length >= ${minValue.toString()} : false`,\n      errorMessage : 'Digits count must be >= ' + minValue.toString()\n    });\n  }\n\n  /**\n   * this constructor will assign the obj value to a class variables and call\n   * super()\n   */\n  constructor(obj?: any) {\n    super(obj);\n    this.clientValidation = obj && obj.clientValidation || false;\n    this.errorMessage = obj && obj.errorMessage || 'Undefined Error';\n\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat(['clientValidation', 'errorMessage']);\n  }\n\n  /**\n   * this public method will evaluate context or forceFormula\n   * @param context      : any - context\n   * @param forceFormula : string - formula\n   * @return AjfValidationResult\n   */\n  evaluate(context?: any, forceFormula?: string): AjfValidationResult {\n    return new AjfValidationResult(super.evaluate(context, forceFormula),\n                                   this.errorMessage, this.clientValidation);\n  }\n}\n\n/**\n * This class will define an ajf validation group\n */\nexport class AjfValidationGroup extends AjfJsonSerializable {\n  forceValue: AjfCondition;\n  maxValue: AjfValidation | null;\n  minValue: AjfValidation | null;\n  notEmpty: AjfValidation | null;\n  maxDigits: AjfValidation | null;\n  minDigits: AjfValidation | null;\n  conditions: AjfValidation[];\n\n  /**\n   * this static method will load an AjfValidationGroup from json\n   * @param obj  : any - object validationGroup\n   * @return AjfValidationGroup\n   */\n  static fromJson(obj: any): AjfValidationGroup {\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('maxValue') > -1 && typeof obj.maxValue === 'number') {\n      obj.maxValue = AjfValidation.getMaxCondition(obj.maxValue);\n    }\n\n    if (keys.indexOf('minValue') > -1 && typeof obj.minValue === 'number') {\n      obj.minValue = AjfValidation.getMinCondition(obj.minValue);\n    }\n\n    if (keys.indexOf('notEmpty') > -1) {\n      obj.notEmpty = AjfValidation.getNotEmptyCondition();\n    }\n\n    if (keys.indexOf('forceValue') > -1) {\n      obj.forceValue = AjfCondition.fromJson(obj.forceValue);\n    }\n\n    if (keys.indexOf('maxDigits') > -1 && typeof obj.maxDigits === 'number') {\n      obj.maxDigits = AjfValidation.getMaxDigitsCondition(obj.maxDigits);\n    }\n\n    if (keys.indexOf('minDigits') > -1 && typeof obj.minDigits === 'number') {\n      obj.minDigits = AjfValidation.getMinDigitsCondition(obj.minDigits);\n    }\n\n    if (keys.indexOf('conditions') > -1 && obj.conditions instanceof Array) {\n      let conditions: AjfCondition[] = [];\n      for (let c of obj.conditions) {\n        conditions.push(AjfValidation.fromJson(c));\n      }\n      obj.conditions = conditions;\n    }\n\n    return new AjfValidationGroup(obj);\n  }\n\n  /**\n   * this constructor will assign the obj value to a class variables\n   * @param obj : any\n   */\n  constructor(obj?: any) {\n    super(obj);\n\n    this.forceValue = obj && obj.forceValue || null;\n    this.maxValue = obj && obj.maxValue || null;\n    this.minValue = obj && obj.minValue || null;\n    this.notEmpty = obj && obj.notEmpty || null;\n    this.maxDigits = obj && obj.maxDigits || null;\n    this.minDigits = obj && obj.minDigits || null;\n    this.conditions = obj && obj.conditions || [];\n\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat([\n        'forceValue', 'maxValue', 'minValue', 'notEmpty',\n        'maxDigits', 'minDigits', 'conditions'\n      ]);\n  }\n\n  toJson(): any {\n    const json: any = {};\n    if (this.forceValue != null) {\n      json['forceValue'] = true;\n    }\n\n    if (this.maxValue != null) {\n      json['maxValue'] = this.maxValue.condition.replace('$value <= ', '');\n    }\n\n    if (this.minValue != null) {\n      json['minValue'] = this.minValue.condition.replace('$value >= ', '');\n    }\n\n    if (this.notEmpty != null) {\n      json['notEmpty'] = true;\n    }\n\n    if (this.maxDigits != null) {\n      json['maxDigits'] = this.maxDigits.condition.replace(\n        '$value ? $value.toString().length <=  : false', '');\n    }\n\n    if (this.minDigits != null) {\n      json['minDigits'] = this.minDigits.condition.replace(\n        '$value ? $value.toString().length >=  : false', '');\n    }\n\n    if (this.conditions != null) {\n      json['conditions'] = this.conditions.map(c => c.toJson());\n    }\n\n    return json;\n  }\n\n  /**\n   * this protected method evaluate max value\n   * @param value : any\n   * @return AjfValidationResult\n   */\n  protected _evaluateMaxValue(value: any) {\n    if (this.maxValue == null) { return null; }\n    return this.maxValue.evaluate({'$value' : value});\n  }\n\n  /**\n   * this protected method evaluate min value\n   * @param value : any\n   * @return AjfValidationResult\n   */\n  protected _evaluateMinvalue(value: any) {\n    if (this.minValue == null) { return null; }\n    return this.minValue.evaluate({'$value' : value});\n  }\n\n  /**\n   * this protected method evaluate not empty value\n   * @param value : any\n   * @return AjfValidationResult\n   */\n  protected _evaluateNotEmpty(value: any) {\n    if (this.notEmpty == null) { return null; }\n    return this.notEmpty.evaluate({'$value' : value});\n  }\n\n  /**\n   * this protected method evaluate conditions\n   * @param context : any\n   * @return AjfValidationResult[]\n   */\n  protected _evaluateConditions(context: any): AjfValidationResult[] {\n    let res: AjfValidationResult[] = [];\n    this.conditions.forEach((cond) => {\n      res.push(cond.evaluate(context));\n    });\n    return res;\n  }\n\n  /**\n   * this public method evaluate\n   * @param value   : any\n   * @param context : any\n   * @return AjfValidationResult[]\n   */\n  evaluate(value: any, context?: any): AjfValidationResult[] {\n    let res: AjfValidationResult[] = [];\n    let ctx = deepCopy(context);\n    ctx['$value'] = value;\n    res = this._evaluateConditions(ctx);\n    if (this.maxValue) {\n      const maxValue = this._evaluateMaxValue(value);\n      if (maxValue != null) {\n        res.push();\n      }\n    }\n    if (this.minValue) {\n      const minValue = this._evaluateMinvalue(value);\n      if (minValue != null) {\n        res.push(minValue);\n      }\n    }\n    if (this.notEmpty) {\n      const notEmpty = this._evaluateNotEmpty(value);\n      if (notEmpty != null) {\n        res.push(notEmpty);\n      }\n    }\n    if (this.maxDigits) {\n      res.push(this.maxDigits.evaluate({'$value' : value}));\n    }\n    if (this.minDigits) {\n      res.push(this.minDigits.evaluate({'$value' : value}));\n    }\n    return res;\n  }\n  /**\n   * this public method evaluate force value\n   * @param context : any\n   * @return string\n   */\n  evaluateForceValue(context: any) {\n    return this.forceValue.evaluate(context);\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCondition, AjfJsonSerializable} from '@ajf/core/models';\n\n\n/**\n * This class will define an ajf warning result\n */\nexport class AjfWarningResult {\n\n  result: boolean;\n  warning: string;\n\n  /**\n   * this constructor will assign the parameters value to a class variables\n   * @param res : boolean\n   * @param wrn : string\n   */\n  constructor(res: boolean, wrn: string) {\n    this.result = res;\n    this.warning = wrn;\n  }\n}\n\n/**\n * This class will define an ajf warning\n */\nexport class AjfWarning extends AjfCondition {\n  warningMessage: string;\n\n  /**\n   * this static method will load an AjfWarning from json\n   * @param obj  : any - object warning\n   * @return AjfWarning\n   */\n  static fromJson(obj: any): AjfWarning { return new AjfWarning(obj); }\n\n  static getNotEmptyWarning(): AjfWarning {\n    return new AjfWarning({\n      condition : `notEmpty($value)`,\n      warningMessage : `Value must not be empty`\n    });\n  }\n\n  /**\n   * this constructor will assign the obj value to a class variables and call\n   * super()\n   */\n  constructor(obj?: any) {\n    super(obj);\n    this.warningMessage = obj && obj.warningMessage || 'Undefined Error';\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat(['warningMessage']);\n  }\n\n  /**\n   * this public method will evaluate context or forceFormula\n   * @param context      : any - context\n   * @param forceFormula : string - formula\n   * @return AjfWarningResult\n   */\n  evaluate(context?: any, forceFormula?: string): AjfWarningResult {\n    return new AjfWarningResult(super.evaluate(context, forceFormula),\n                                this.warningMessage);\n  }\n}\n\n/**\n * This class will define an ajf warning group\n */\nexport class AjfWarningGroup extends AjfJsonSerializable {\n  notEmpty: AjfWarning | null;\n  conditions: AjfWarning[];\n\n  /**\n   * this static method will load an AjfWarningGroup from json\n   * @param obj  : any - object warningGroup\n   * @return AjfValidationGroup\n   */\n  static fromJson(obj: any): AjfWarningGroup {\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('notEmpty') > -1) {\n      obj.notEmpty = AjfWarning.getNotEmptyWarning();\n    }\n\n    if (keys.indexOf('conditions') > -1 && obj.conditions instanceof Array) {\n      let conditions: AjfCondition[] = [];\n      for (let c of obj.conditions) {\n        conditions.push(AjfWarning.fromJson(c));\n      }\n      obj.conditions = conditions;\n    }\n\n    return new AjfWarningGroup(obj);\n  }\n\n  /**\n   * this constructor will assign the obj value to a class variables\n   * @param obj : any\n   */\n  constructor(obj?: any) {\n    super(obj);\n\n    this.notEmpty = obj && obj.notEmpty || null;\n    this.conditions = obj && obj.conditions || null;\n\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat(['notEmpty', 'conditions']);\n  }\n\n  /**\n   * this protected method evaluate conditions\n   * @param context : any\n   * @return AjfWarningResult[]\n   */\n  protected _evaluateConditions(context: any): AjfWarningResult[] {\n    let res: AjfWarningResult[] = [];\n    this.conditions.forEach((cond) => {\n      res.push(cond.evaluate(context));\n    });\n    return res;\n  }\n\n  /**\n   * this public method evaluate\n   * @param value   : any\n   * @param context : any\n   * @return AjfWarningResult[]\n   */\n  evaluate(context?: any): AjfWarningResult[] {\n    let res: AjfWarningResult[] = this._evaluateConditions(context);\n    return res;\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCondition, AjfFormula, AjfJsonSerializable} from '@ajf/core/models';\nimport {deepCopy} from '@ajf/core/utils';\n\nimport {AjfAttachmentsOrigin} from './attachments';\nimport {IAjfChoicesOrigin} from './choices';\nimport {AjfInvalidFieldDefinitionError} from './errors';\nimport {factorial} from './math';\nimport {AjfValidationGroup} from './validation';\nimport {AjfWarningGroup} from './warning';\n\n\nexport enum AjfNodeType {\n  AjfField,\n  AjfFieldNodeLink,\n  AjfNodeGroup,\n  AjfSlide,\n  AjfRepeatingSlide,\n  LENGTH\n}\n\n\n/**\n * This class will define an ajf node\n */\nexport class AjfNode extends AjfJsonSerializable {\n  // node identification number\n  private _id: number;\n  get id(): number { return this._id; }\n  set id(id: number) { this._id = id; }\n\n  // id of predecessor node\n  private _parent: number;\n  get parent(): number { return this._parent; }\n  set parent(parent: number) { this._parent = parent; }\n\n  // is a id of parent node,  if this node is part of an AjfNodeGroup\n  private _parentNode: number;\n  get parentNode(): number { return this._parentNode; }\n  set parentNode(parentNode: number) { this._parentNode = parentNode; }\n\n  // an AjfCondition array\n  private _conditionalBranches: AjfCondition[];\n  /**\n   * this method will get the conditionalBranches of the field\n   * @return : _conditionalBranches\n   */\n  get conditionalBranches(): AjfCondition[] {\n    return this._conditionalBranches;\n  }\n  /**\n   * this method will set the conditionalBranches of the field\n   * @param conditionalBranches : AjfCondition[] - the new conditionalBranches\n   */\n  set conditionalBranches(conditionalBranches: AjfCondition[]) {\n    this._conditionalBranches = conditionalBranches;\n  }\n\n  // the name of the field\n  private _name: string;\n  /**\n   * this method will get the current name of field\n   * @return : _name\n   */\n  get name(): string {\n    return this._name;\n  }\n  /**\n   * this method will set the current name of field\n   * @param name : string - the new name\n   */\n  set name(name: string) {\n    this._name = name;\n  }\n  // hte label of the field\n  private _label: string;\n  /**\n   * this method will get the label of the field\n   * @return : _label\n   */\n  get label(): string {\n    return this._label;\n  }\n  /**\n   * this method will set the label of the field\n   * @param label : string - the new label\n   */\n  set label(label: string) {\n    this._label = label;\n  }\n\n  // AjfCondition for handling visibility\n  private _visibility: AjfCondition | null;\n  /**\n   * this method will get the visibility of the field\n   * @return : _visibility\n   */\n  get visibility(): AjfCondition | null {\n    return this._visibility;\n  }\n  /**\n   * this method will set the visibility of the field\n   * @param visibility : AjfCondition - the new visibility\n   */\n  set visibility(visibility: AjfCondition | null) {\n    this._visibility = visibility;\n  }\n\n  /**\n   * this method will load an AjfNode from json\n   * @param obj                : any - object node\n   * @param choicesOrigins     : any[] - array of choicesOrigins\n   * @param attachmentsOrigins : any[] - array of attachmentsOrigins\n   * @return AjfNode\n   */\n  static fromJson(obj: any, choicesOrigins?: any[], attachmentsOrigins?: any[],\n      context?: any): AjfNode {\n    // array of string:  contains a keys Object\n    // example:\n    // [\"id\", \"name\", \"label\", \"visibility\", \"hasChoices\", \"parent\",\n    //  \"parentNode\", \"nodeType\", \"conditionalBranches\", \"fieldType\", \"nodes\"]\n    obj = deepCopy(obj);\n    if (context) {\n      context = deepCopy(context);\n    }\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('nodeType') === -1) {\n      throw new Error('Node type missing type');\n    }\n\n    let nodeType = obj.nodeType;\n    delete obj.nodeType;\n    if (AjfNodeType[nodeType] == null) {\n      throw new Error('Invalid node type');\n    }\n\n    if (keys.indexOf('visibility') > -1) {\n      obj.visibility = AjfCondition.fromJson(obj.visibility);\n    }\n\n    if (keys.indexOf('conditionalBranches') > -1 && obj.conditionalBranches instanceof Array) {\n      let cbs: AjfCondition[] = [];\n      for (let i = 0 ; i < obj.conditionalBranches.length ; i ++) {\n        cbs.push(AjfCondition.fromJson(obj.conditionalBranches[i]));\n      }\n      if (cbs.length == 0) {\n        cbs.push(AjfCondition.alwaysCondition());\n      }\n      obj.conditionalBranches = cbs;\n    }\n\n    return AjfNode.createNode(nodeType, obj, choicesOrigins, attachmentsOrigins, context);\n  }\n  /**\n   * this method will create an AjfNode\n   * @param nodeType           : identified a type of node (nodeGroup or nodeField)\n   * @param obj                : any - object node\n   * @param choicesOrigins     : any[] - array of choicesOrigins\n   * @param attachmentsOrigins : any[] - array of attachmentsOrigins\n   * @return AjfNode\n   */\n  static createNode(\n    nodeType: AjfNodeType, obj?: any, choicesOrigins?: any[],\n    attachmentsOrigins?: any[], context?: any\n  ): AjfNode {\n    choicesOrigins = choicesOrigins || [];\n    attachmentsOrigins = attachmentsOrigins || [];\n    switch (nodeType) {\n      case AjfNodeType.AjfNodeGroup:\n        return AjfNodeGroup.fromJson(obj, choicesOrigins, attachmentsOrigins, context);\n      case AjfNodeType.AjfField:\n        return AjfField.fromJson(obj, choicesOrigins, attachmentsOrigins, context);\n      case AjfNodeType.AjfRepeatingSlide:\n        return AjfRepeatingSlide.fromJson(obj, choicesOrigins, attachmentsOrigins, context);\n      case AjfNodeType.AjfSlide:\n        return AjfSlide.fromJson(obj, choicesOrigins, attachmentsOrigins, context);\n      default:\n        throw new Error('Invalid node type');\n    }\n  }\n  /**\n   * this method get the nodeType\n   * @return AjfNodeType\n   */\n  get nodeType(): AjfNodeType {\n    const thisObj: any = this;\n    if (thisObj instanceof AjfField) {\n      return AjfNodeType.AjfField;\n    }\n    if (thisObj instanceof AjfFieldNodeLink) {\n      return AjfNodeType.AjfFieldNodeLink;\n    }\n    if (thisObj instanceof AjfNodeGroup) {\n      return AjfNodeType.AjfNodeGroup;\n    }\n    if (thisObj instanceof AjfRepeatingSlide) {\n      return AjfNodeType.AjfRepeatingSlide;\n    }\n    if (thisObj instanceof AjfSlide) {\n      return AjfNodeType.AjfSlide;\n    }\n    throw new Error('Invalid node type');\n  }\n  /**\n   * this constructor will assign the obj value to a class variables\n   */\n  constructor(obj?: any) {\n    super();\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat([\n      'id', 'nodeType', 'parent', 'parentNode', 'visibility', 'name', 'label',\n      'conditionalBranches'\n    ]);\n\n    this._id         = obj && obj.id          || null;\n    this._parent     = obj && obj.parent      || null;\n    this._parentNode = obj && obj.parentNode  || 0;\n    this._visibility = obj && obj.visibility  || AjfCondition.alwaysCondition();\n    this._name       = obj && obj.name        || null;\n    this._label      = obj && obj.label       || null;\n    this._conditionalBranches = obj && obj.conditionalBranches || [AjfCondition.alwaysCondition()];\n  }\n\n  /**\n   * this method will set the conditiona branch number of the field\n   * @param cbn : number\n   */\n  setConditionalBranchesNum(cbn: number): void {\n    if (this.getMaxConditionalBranches() >= 0) {\n      cbn = Math.min(cbn, this.getMaxConditionalBranches());\n    }\n    if (cbn < this.conditionalBranches.length) {\n      this.conditionalBranches = this.conditionalBranches.slice(0, cbn);\n    } else if (cbn > this.conditionalBranches.length) {\n      for (let i = this.conditionalBranches.length; i < cbn; i++) {\n        this.conditionalBranches.push(AjfCondition.alwaysCondition());\n      }\n    }\n  }\n\n  /**\n   * this method will get the max xonditional branches of the field\n   * @return number\n   */\n  getMaxConditionalBranches(): number {\n    return -1;\n  }\n}\n\nexport class AjfFieldNodeLink extends AjfNode {\n}\n\n/**\n * this enumerate any field type\n */\nexport enum AjfFieldType {\n  String,\n  Text,\n  Number,\n  Boolean,\n  SingleChoice,\n  MultipleChoice,\n  Formula,\n  Empty,\n  Date,\n  DateInput,\n  Time,\n  Table,\n  LENGTH\n}\n\n/**\n * This class will define an ajf node group\n */\nexport class AjfNodeGroup extends AjfNode {\n  // array of ajfNode\n  private _nodes: AjfNode[];\n  get nodes(): AjfNode[] { return this._nodes; }\n  set nodes(nodes: AjfNode[]) { this._nodes = nodes; }\n\n  // is a node group repeat condition\n  // example: \"opd_treatment == 'Yes' && ($groupReps || 1) || 0\"\n  private _formulaReps: AjfFormula;\n  get formulaReps(): AjfFormula { return this._formulaReps; }\n  set formulaReps(formulaReps: AjfFormula) { this._formulaReps = formulaReps; }\n\n  // max number of repetitions\n  private _maxReps: number;\n  get maxReps(): number { return this._maxReps; }\n  set maxReps(maxReps: number) { this._maxReps = maxReps; }\n\n  // min number of repetitions\n  private _minReps: number;\n  get minReps(): number { return this._minReps; }\n  set minReps(minReps: number) { this._minReps = minReps; }\n\n  /**\n   * this method will load an AjfNodeGroup from json\n   * @param obj                : any - object node\n   * @param choicesOrigins     : any[] - array of choicesOrigins\n   * @param attachmentsOrigins : any[] - array of attachmentsOrigins\n   * @return AjfNodeGroup\n   */\n  static fromJson(obj: any, choicesOrigins: any[], attachmentsOrigins: any[],\n      context: any): AjfNodeGroup {\n    // array of string:  contains a keys Object\n    // example:\n    // [\"id\", \"parent\", \"parentNode\", \"formulaReps\", \"nodes\"]\n    obj = deepCopy(obj);\n    if (context) {\n      context = deepCopy(context);\n    }\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('nodes') > -1 && obj.nodes instanceof Array) {\n      let nodes: AjfNode[] = [];\n      for (let i = 0 ; i < obj.nodes.length ; i ++) {\n        nodes.push(AjfNode.fromJson(obj.nodes[i], choicesOrigins, attachmentsOrigins));\n      }\n      obj.nodes = nodes;\n    }\n\n    if (keys.indexOf('formulaReps') > -1 && obj.formulaReps != null) {\n      obj.formulaReps = AjfFormula.fromJson(obj.formulaReps);\n    }\n\n    if (keys.indexOf('visibility') > -1 && obj.visibility != null) {\n      obj.visibility = AjfCondition.fromJson(obj.visibility);\n    }\n\n    if (keys.indexOf('conditionalBranches') > -1 && obj.conditionalBranches instanceof Array) {\n      let cbs: AjfCondition[] = [];\n      for (let i = 0 ; i < obj.conditionalBranches.length ; i ++) {\n        cbs.push(AjfCondition.fromJson(obj.conditionalBranches[i]));\n      }\n      obj.conditionalBranches = cbs;\n    }\n\n    let ret =  new AjfNodeGroup(obj);\n\n    return ret;\n  }\n  /**\n   * this constructor will assign the obj value to a class variables\n   */\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat([\n      'formulaReps', 'minReps', 'maxReps', 'nodes'\n    ]);\n\n    this.nodes = obj && obj.nodes || [];\n    this.formulaReps = obj && obj.formulaReps || null;\n    this.maxReps = obj && obj.maxReps || null;\n    this.minReps = obj && obj.minReps || null;\n  }\n}\n\nexport interface IAjfSlide {\n  nodes: AjfNode[];\n}\n\n/**\n * Represents a form slide.\n * Slides are specialized node groups used to layout the form.\n * They must be at the root level of the form\n *\n * @export\n */\nexport class AjfSlide extends AjfNode implements IAjfSlide {\n  private _nodes: AjfNode[];\n  get nodes(): AjfNode[] { return this._nodes.slice(0); }\n  set nodes(nodes: AjfNode[]) { this._nodes = nodes.slice(0); }\n\n  static fromJson(\n    obj: any, choicesOrigins: any[], attachmentsOrigins: any[], context: any\n  ): AjfSlide {\n    obj = deepCopy(obj);\n    if (context) {\n      context = deepCopy(context);\n    }\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('visibility') > -1 && obj.visibility != null) {\n      obj.visibility = AjfCondition.fromJson(obj.visibility);\n    }\n\n    if (keys.indexOf('nodes') > -1 && obj.nodes instanceof Array) {\n      let nodes: AjfNode[] = [];\n      for (let i = 0 ; i < obj.nodes.length ; i ++) {\n        nodes.push(AjfNode.fromJson(obj.nodes[i], choicesOrigins, attachmentsOrigins));\n      }\n      obj.nodes = nodes;\n    }\n\n    if (keys.indexOf('conditionalBranches') > -1 && obj.conditionalBranches instanceof Array) {\n      let cbs: AjfCondition[] = [];\n      for (let i = 0 ; i < obj.conditionalBranches.length ; i ++) {\n        cbs.push(AjfCondition.fromJson(obj.conditionalBranches[i]));\n      }\n      obj.conditionalBranches = cbs;\n    }\n\n    return new AjfSlide(obj);\n  }\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat(['nodes']);\n\n    this._nodes = obj && obj.nodes || [];\n  }\n}\n\nexport class AjfRepeatingSlide extends AjfSlide {\n  private _formulaReps: AjfFormula | null;\n  get formulaReps(): AjfFormula | null { return this._formulaReps; }\n  set formulaReps(formulaReps: AjfFormula | null) { this._formulaReps = formulaReps; }\n\n  // max number of repetitions\n  private _maxReps: number;\n  get maxReps(): number { return this._maxReps; }\n  set maxReps(maxReps: number) { this._maxReps = maxReps; }\n\n  // min number of repetitions\n  private _minReps: number;\n  get minReps(): number { return this._minReps; }\n  set minReps(minReps: number) { this._minReps = minReps; }\n\n  static fromJson(\n    obj: any, choicesOrigins: any[], attachmentsOrigins: any[], context: any\n  ): AjfRepeatingSlide {\n    obj = deepCopy(obj);\n    if (context) {\n      context = deepCopy(context);\n    }\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('visibility') > -1 && obj.visibility != null) {\n      obj.visibility = AjfCondition.fromJson(obj.visibility);\n    }\n\n    if (keys.indexOf('nodes') > -1 && obj.nodes instanceof Array) {\n      let nodes: AjfNode[] = [];\n      for (let i = 0 ; i < obj.nodes.length ; i ++) {\n        nodes.push(AjfNode.fromJson(obj.nodes[i], choicesOrigins, attachmentsOrigins));\n      }\n      obj.nodes = nodes;\n    }\n\n    if (keys.indexOf('formulaReps') > -1 && obj.formulaReps != null) {\n      obj.formulaReps = AjfFormula.fromJson(obj.formulaReps);\n    }\n\n    if (keys.indexOf('conditionalBranches') > -1 && obj.conditionalBranches instanceof Array) {\n      let cbs: AjfCondition[] = [];\n      for (let i = 0 ; i < obj.conditionalBranches.length ; i ++) {\n        cbs.push(AjfCondition.fromJson(obj.conditionalBranches[i]));\n      }\n      obj.conditionalBranches = cbs;\n    }\n\n    return new AjfRepeatingSlide(obj);\n  }\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat([\n      'nodes', 'formulaReps', 'minReps', 'maxReps'\n    ]);\n\n    this.formulaReps = obj && obj.formulaReps || null;\n    this.nodes = obj && obj.nodes || [];\n    this.minReps = obj && obj.minReps || 1;\n    this.maxReps = obj && obj.maxReps || 0;\n  }\n}\n\n/**\n * This class will define an ajf Field\n */\nexport abstract class AjfField extends AjfNode {\n  // a field description\n  private _description: string;\n  /**\n   * this method will get the description of the field\n   * @return : _description\n   */\n  get description(): string {\n    return this._description;\n  }\n  /**\n   * this method will set the description of the field\n   * @param description : string - the new description\n   */\n  set description(description: string) {\n    this._description = description;\n  }\n\n  // a boolean to identify an editable status\n  private _editable: boolean;\n  /**\n   * this method will get the editable status  of the field\n   * @return : _editable\n   */\n  get editable(): boolean {\n    return this._editable;\n  }\n  //  an AjfFormula\n  private _formula: AjfFormula | null;\n  /**\n   * this method will get the formula of the field\n   * @return : _formula\n   */\n  get formula(): AjfFormula | null {\n    return this._formula;\n  }\n  set formula(formula: AjfFormula | null) {\n    this._formula = formula;\n  }\n\n  // a boolean to identify if the field have choices\n  private _hasChoices = false;\n  /**\n   * this method will get the hasChoices status of the field\n   * @return : _hasChoices\n   */\n  get hasChoices(): boolean {\n    return this._hasChoices;\n  }\n\n  //  a default value\n  private _defaultValue: any;\n\n  /**\n   * this method will get the default value of the field\n   * @return : _defaultValue\n   */\n  get defaultValue(): any {\n    return this._defaultValue;\n  }\n\n  /**\n   * this method will set the defaultValue of the field\n   * @param defaultValue : any - the new defaultValue\n   */\n  set defaultValue(defaultValue: any) {\n    if (defaultValue == null || this.validateValue(defaultValue)) {\n      this._defaultValue = defaultValue;\n    } else {\n      throw new AjfInvalidFieldDefinitionError(\n        'The default value is not valid for this field type');\n    }\n  }\n\n  private _size: 'normal' | 'small' | 'smaller' | 'tiny' | 'mini';\n  get size(): 'normal' | 'small' | 'smaller' | 'tiny' | 'mini' {\n    return this._size;\n  }\n  set size(size: 'normal' | 'small' | 'smaller' | 'tiny' | 'mini') {\n    this._size = size;\n  }\n\n  //  an AjfValidationGroup\n  private _validation: AjfValidationGroup | null;\n\n  /**\n   * this method will get the validation value of the field\n   * @return : _validation\n   */\n  get validation(): AjfValidationGroup | null {\n    return this._validation;\n  }\n  set validation(validation: AjfValidationGroup | null) {\n    this._validation = validation;\n  }\n\n  // an AjfWarningGroup\n  private _warning: AjfWarningGroup | null;\n\n  /**\n   * this method will get the warning value of the field\n   * @return : _warning\n   */\n  get warning(): AjfWarningGroup | null {\n    return this._warning;\n  }\n  set warning(warning: AjfWarningGroup | null) {\n    this._warning = warning;\n  }\n\n  //  a boolean to identify if field has attachments\n  private _hasAttachments = false;\n  /**\n   * this method will get the hasAttachments status of the field\n   * @return : _hasAttachments\n   */\n  get hasAttachments(): boolean { return this._hasAttachments; }\n\n  // an AjfAttachmentsOrigin\n  private _attachmentsOrigin: AjfAttachmentsOrigin;\n\n  /**\n   * this method will get the attachmentsOrigin of the field\n   * @return : AjfAttachmentsOrigin\n   */\n  get attachmentsOrigin(): AjfAttachmentsOrigin | null {\n    return this.hasAttachments && this._attachmentsOrigin || null;\n  }\n\n  /**\n   * this method will get the attachments of the field\n   * @return : any the attachments\n   */\n  get attachments(): any[] {\n      return this.hasAttachments &&\n         this._attachmentsOrigin.getAttachments()  || [];\n  }\n\n  private _nextSlideCondition: AjfCondition | null;\n  get nextSlideCondition(): AjfCondition | null {\n    return this._nextSlideCondition;\n  }\n  set nextSlideCondition(condition: AjfCondition | null) {\n    this._nextSlideCondition = condition;\n  }\n\n  // @TODO Maybe not used??\n  private _nextSlide: boolean;\n  get nextSlide(): boolean {\n    return this._nextSlide;\n  }\n  set nextSlide(val: boolean) {\n    this._nextSlide = val;\n  }\n\n  /**\n   * this method will get the field type\n   * @return : AjfFieldType\n   */\n  get fieldType(): AjfFieldType {\n    const thisObj: any = this;\n    if (thisObj instanceof AjfFormulaField) {\n      return AjfFieldType.Formula;\n    }\n    if (thisObj instanceof AjfMultipleChoiceField) {\n      return AjfFieldType.MultipleChoice;\n    }\n    if (thisObj instanceof AjfSingleChoiceField) {\n      return AjfFieldType.SingleChoice;\n    }\n    if (thisObj instanceof AjfBooleanField) {\n      return AjfFieldType.Boolean;\n    }\n    if (thisObj instanceof AjfNumberField) {\n      return AjfFieldType.Number;\n    }\n    if (thisObj instanceof AjfTextField) {\n      return AjfFieldType.Text;\n    }\n    if (thisObj instanceof AjfStringField) {\n      return AjfFieldType.String;\n    }\n    if (thisObj instanceof AjfDateField) {\n      return AjfFieldType.Date;\n    }\n    if (thisObj instanceof AjfDateInputField) {\n      return AjfFieldType.DateInput;\n    }\n    if (thisObj instanceof AjfTableField) {\n      return AjfFieldType.Table;\n    }\n    if (thisObj instanceof AjfTimeField) {\n      return AjfFieldType.Time;\n    }\n    return AjfFieldType.Empty;\n  }\n\n  /**\n   * this method will get the node type of the field\n   * @return : AjfFieldType\n   */\n  get nodeType(): AjfNodeType { return AjfNodeType.AjfField; }\n\n  /**\n   * this method will create new field\n   * @return : ajfField\n   */\n  static create(fieldType: AjfFieldType, obj?: any): AjfField {\n    let ret: AjfField;\n    switch (fieldType) {\n      case AjfFieldType.String:\n        ret = new AjfStringField(obj);\n        break;\n      case AjfFieldType.Text:\n        ret = new AjfTextField(obj);\n        break;\n      case AjfFieldType.Number:\n        ret = new AjfNumberField(obj);\n        break;\n      case AjfFieldType.Boolean:\n        ret = new AjfBooleanField(obj);\n        break;\n      case AjfFieldType.SingleChoice:\n        ret = new AjfSingleChoiceField(obj);\n        break;\n      case AjfFieldType.MultipleChoice:\n        ret = new AjfMultipleChoiceField(obj);\n        break;\n      case AjfFieldType.Formula:\n        ret = new AjfFormulaField(obj);\n        break;\n      case AjfFieldType.Empty:\n        ret = new AjfEmptyField(obj);\n        break;\n      case AjfFieldType.Date:\n        ret = new AjfDateField(obj);\n        break;\n      case AjfFieldType.DateInput:\n        ret = new AjfDateInputField(obj);\n        break;\n      case AjfFieldType.Time:\n        ret = new AjfTimeField(obj);\n        break;\n      case AjfFieldType.Table:\n        ret = new AjfTableField(obj);\n        break;\n      default:\n        throw new Error('Invalid field type');\n    }\n    return ret;\n  }\n\n  /**\n   * this method will load an AjfField from json\n   * @param obj                : any - object node\n   * @param choicesOrigins     : any[] - array of choicesOrigins\n   * @param attachmentsOrigins : any[] - array of attachmentsOrigins\n   * @return AjfNode\n   */\n  static fromJson(obj: any, choicesOrigins: any[], attachmentsOrigins: any[],\n      context: any): AjfField {\n    // array of string: contains a keys object\n    // example:\n    // [\"id\", \"name\", \"label\", \"visibility\", \"hasChoices\", \"parent\",\n    // \"parentNode\", \"conditionalBranches\", \"fieldType\", \"nodes\"]\n    obj = deepCopy(obj);\n    if (context) {\n      context = deepCopy(context);\n    }\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('fieldType') === -1) {\n      throw new Error('Field type missing type');\n    }\n    let fieldType = obj.fieldType;\n    delete obj.fieldType;\n    if (AjfFieldType[fieldType] == null) {\n      throw new Error('Invalid field type');\n    }\n\n    if (keys.indexOf('visibility') > -1 && obj.visibility != null) {\n      obj.visibility = AjfCondition.fromJson(obj.visibility);\n    }\n\n    if (keys.indexOf('formula') > -1 && obj.formula != null) {\n      obj.formula = AjfFormula.fromJson(obj.formula);\n    }\n\n    if (keys.indexOf('choicesFilter') > -1 && obj.choicesFilter != null) {\n      obj.choicesFilter = AjfFormula.fromJson(obj.choicesFilter);\n    }\n\n    if (keys.indexOf('validation') > -1 && obj.validation != null) {\n      obj.validation = AjfValidationGroup.fromJson(obj.validation);\n    }\n\n    if (keys.indexOf('warning') > -1  && obj.warning != null) {\n      obj.warning = AjfWarningGroup.fromJson(obj.warning);\n    }\n\n    if (keys.indexOf('choicesOriginRef') > -1) {\n      let origins = choicesOrigins.filter(x => x.getName() === obj.choicesOriginRef);\n      obj.choicesOrigin = origins.length > 0 ? origins[0] : null;\n    }\n\n    if (keys.indexOf('attachmentsOriginRef') > -1) {\n      let origins = attachmentsOrigins.filter(x => x.getName() === obj.attachmentsOriginRef);\n      obj.attachmentsOrigin = origins.length > 0 ? origins[0] : null;\n    }\n\n    if (keys.indexOf('triggerConditions') > -1 &&\n        obj.triggerConditions != null &&\n        obj.triggerConditions.length > 0) {\n      obj.triggerConditions = obj.triggerConditions\n        .map((t: any) => {\n          return AjfCondition.fromJson(t);\n        });\n    }\n\n    if (keys.indexOf('nodes') > -1 && obj.nodes instanceof Array) {\n      let nodes: AjfNode[] = [];\n      for (let i = 0 ; i < obj.nodes.length ; i ++) {\n        let childNode = obj.nodes[i];\n        childNode.parentField = obj.id;\n        nodes.push(AjfNode.fromJson(childNode, choicesOrigins, attachmentsOrigins, context));\n      }\n      obj.nodes = nodes;\n    }\n\n    if (keys.indexOf('nextSlideCondition') > -1 && obj.nextSlideCondition != null) {\n      obj.nextSlideCondition = AjfCondition.fromJson(obj.nextSlideCondition);\n    }\n\n    if (keys.indexOf('conditionalBranches') > -1 && obj.conditionalBranches instanceof Array) {\n      let cbs: AjfCondition[] = [];\n      for (let i = 0 ; i < obj.conditionalBranches.length ; i ++) {\n        cbs.push(AjfCondition.fromJson(obj.conditionalBranches[i]));\n      }\n      obj.conditionalBranches = cbs;\n    }\n\n    return AjfField.create(fieldType, obj);\n  }\n  /**\n   * this constructor will assign the obj value to a class variables\n   */\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat([\n      'fieldType', 'description',\n      'editable', 'formula', 'validation', 'warning', 'hasChoices', 'defaultValue', 'size',\n      'nextSlideCondition'\n    ]);\n\n    this._description         = obj && obj.description         || null;\n    this._formula             = obj && obj.formula             || null;\n    this._validation          = obj && obj.validation          || null;\n    this._warning             = obj && obj.warning             || null;\n    this._attachmentsOrigin   = obj && obj.attachmentsOrigin   || null;\n    this.defaultValue         = obj && obj.defaultValue != null ? obj.defaultValue : null;\n    this._size                = obj && obj.size                || 'normal';\n    this._nextSlideCondition  = obj && obj.nextSlideCondition  || null;\n\n    this.setHasAttachments(this._attachmentsOrigin && true || false);\n\n    this._hasChoices = false;\n    this.setEditable();\n  }\n\n  /**\n   * this method will set the editable value of the field\n   * @param editable : boolean\n   */\n  protected setEditable(editable = true) {\n    this._editable = editable;\n  }\n\n  /**\n   * this method will set the HasChoices value of the field\n   * @param hasChoices : boolean\n   */\n  protected setHasChoices(hasChoices: boolean) {\n    this._hasChoices = hasChoices;\n  }\n\n  /**\n   * this method will set the hasAttachments value of the field\n   * @param hasAttachments : boolean\n   */\n  protected setHasAttachments(hasAttachments: boolean) {\n    this._hasAttachments = hasAttachments;\n  }\n\n  abstract validateValue(defaultValue: any): boolean;\n}\n\n/**\n * This class will define an ajf empty field\n */\nexport class AjfEmptyField extends AjfField {\n  HTML: string;\n\n  validateValue(_: any): boolean {\n    return true;\n  }\n\n  constructor(obj?: any) {\n    super(obj);\n    this.jsonExportedMembers = this.jsonExportedMembers.concat([\n      'HTML'\n    ]);\n    this.HTML = obj && obj.HTML || null;\n  }\n}\n\n/**\n * This class will define an ajf string field\n */\nexport class AjfStringField extends AjfField {\n  validateValue(value: any): boolean {\n    return value === value.toString();\n  }\n}\n\n/**\n * This class will define an ajf text field\n */\n\nexport class AjfTextField extends AjfStringField {\n}\n\n/**\n * This class will define an ajf number field\n */\nexport class AjfNumberField extends AjfField {\n  validateValue(value: any): boolean {\n    return value === parseInt(value, 10) || value === parseFloat(value);\n  }\n}\n\n/**\n * This class will define an ajf boolean field\n */\nexport class AjfBooleanField extends AjfField {\n  validateValue(value: any): boolean {\n    return value === !!value;\n  }\n\n  getMaxConditionalBranches(): number {\n    return 2;\n  }\n}\n\n/**\n * This class will define an ajf field with choices\n */\nexport class AjfFieldWithChoices extends AjfField {\n  choicesOrigin: IAjfChoicesOrigin;\n  choicesFilter: AjfFormula;\n  forceExpanded: boolean;\n  forceNarrow: boolean;\n  triggerConditions: AjfCondition[];\n\n  get choices(): any[] {\n    return this.choicesOrigin && this.choicesOrigin.getChoices() || [];\n  }\n\n  get choicesOriginRef(): string {\n    return this.choicesOrigin.getName();\n  }\n\n  validateValue(_: any): boolean {\n    return true;\n  }\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat([\n        'choicesOriginRef', 'choicesFilter',\n        'forceExpanded', 'forceNarrow', 'triggerConditions'\n      ]);\n\n    this.choicesOrigin     = obj && obj.choicesOrigin     || null;\n    this.choicesFilter     = obj && obj.choicesFilter     || null;\n    this.forceExpanded     = obj && obj.forceExpanded     || false;\n    this.forceNarrow       = obj && obj.forceNarrow       || false;\n    this.triggerConditions = obj && obj.triggerConditions || null;\n\n    this.setHasChoices(true);\n  }\n}\n\n/**\n * This class will define an ajf field with SingleChoice\n */\nexport class AjfSingleChoiceField extends AjfFieldWithChoices {\n  constructor(obj?: any) {\n    super(obj);\n  }\n\n  validateValue(value: any): boolean {\n    return value == null || this.choices.filter(x => x === value).length > 0;\n  }\n\n  getMaxConditionalBranches(): number {\n    return Math.max(1, this.choices.length + 1);\n  }\n}\n\n/**\n * This class will define an ajf field with MultipleChoice\n */\nexport class AjfMultipleChoiceField extends AjfSingleChoiceField {\n  constructor(obj?: any) {\n    let defaultValue = obj && obj.defaultValue || [];\n    obj = {...obj || {}, defaultValue};\n    super(obj);\n  }\n\n  validateValue(value: any): boolean {\n    if (value instanceof Array) {\n      let i = 0;\n      let l: number = value.length;\n      let good = true;\n      while (good && i < l) {\n        good = super.validateValue(value[i++]);\n      }\n      return good;\n    } else {\n      return super.validateValue(value);\n    }\n  }\n\n  getMaxConditionalBranches(): number {\n    let total = 0;\n    let l: number = this.choices.length;\n    let f: number[] = [1];\n\n    for (let i = 1; i <= l; i++) {\n      f.push(factorial(i));\n    }\n\n    for (let i = 1; i <= l; i++) {\n      total += f[l] / (f[i] * f[l - i]);\n    }\n\n    return total;\n  }\n}\n\n/**\n * This class will define an formula field\n */\nexport class AjfFormulaField extends AjfNumberField {\n  constructor(obj?: any) {\n    super(obj);\n    this.setEditable(false);\n  }\n}\n\n/**\n * This class will define an ajf date field\n */\nexport class AjfDateField extends AjfField {\n  minDate: Date | 'today';\n  maxDate: Date | 'today';\n\n  minDateValue: Date;\n  maxDateValue: Date;\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat(['maxDate', 'minDate']);\n\n    this.minDate = obj && obj.minDate || null;\n    this.maxDate = obj && obj.maxDate || null;\n\n    this.minDateValue = this.minDate === 'today' ? new Date() : <Date>this.minDate;\n    this.maxDateValue = this.maxDate === 'today' ? new Date() : <Date>this.maxDate;\n  }\n\n  validateValue(value: any): boolean {\n    return value === value.toString();\n  }\n}\n\n\nexport class AjfDateInputField extends AjfField {\n  constructor(obj?: any) {\n    super(obj);\n  }\n\n  validateValue(value: any): boolean {\n    return value === value.toString();\n  }\n}\n\nexport class AjfTimeField extends AjfField {\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat([]);\n  }\n\n  validateValue(value: any): boolean {\n    return value === value.toString();\n  }\n}\n\nexport class AjfTableField extends AjfField {\n  rows: string[][];\n  columnLabels: string[] = [];\n  rowLabels: string[] = [];\n  hideEmptyRows: boolean = false;\n\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.setEditable(obj && obj.editable || false);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat(\n      [ 'rows', 'columnLabels', 'rowLabels' ]);\n\n    this.rows = obj && obj.rows || [];\n    this.columnLabels = obj && obj.columnLabels || [];\n    this.rowLabels = obj && obj.rowLabels || [];\n    this.hideEmptyRows = obj && obj.hideEmptyRows || false;\n  }\n\n  validateValue(value: any): boolean { return value === value.toString(); }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfFieldType} from './nodes';\n\nexport function fieldIconName(type: AjfFieldType): string {\n  return `ajf-icon-field-${AjfFieldType[type].toLowerCase()}`;\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\nimport {fieldIconName} from './field-utils';\nimport {AjfField, AjfFieldType} from './nodes';\n\n@Pipe({name: 'fieldIcon'})\nexport class FieldIconPipe implements PipeTransform {\n  transform(field: AjfField | AjfFieldType): string {\n    return fieldIconName(field instanceof AjfField ? field.fieldType : field);\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {EventEmitter} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable, ReplaySubject} from 'rxjs';\n\nimport {AjfCondition, AjfFormula} from '@ajf/core/models';\nimport {AjfChoice} from './choices';\nimport {\n  AjfDateField, AjfEmptyField, AjfField, AjfFieldWithChoices, AjfNode, AjfNodeGroup,\n  AjfRepeatingSlide, AjfSlide, AjfTableField, IAjfSlide\n} from './nodes';\nimport {AjfValidationGroup, AjfValidationResult} from './validation';\nimport {AjfWarningGroup, AjfWarningResult} from './warning';\n\n\nexport interface AjfFieldState {\n  visibility: boolean;\n  value: any;\n}\n\nexport interface IAjfNodeInstance {\n  node: AjfNode;\n  prefix?: number[];\n  visible?: boolean;\n}\n\n\nexport class AjfNodeInstance implements IAjfNodeInstance {\n  private _updatedEvt: EventEmitter<void> = new EventEmitter<void>();\n  private _updated: Observable<void>;\n  get updated(): Observable<void> { return this._updated; }\n\n  private _node: AjfNode;\n  get node(): AjfNode { return this._node; }\n  // is the index of node loop\n  private _prefix: number[];\n  get prefix(): number[] { return this._prefix.slice(0); }\n  // if is true this node is visible on the form\n  private _visible: boolean;\n  get visible(): boolean { return this._visible; }\n\n  get suffix(): string {\n    if (this.prefix == null || this.prefix.length == 0) { return ''; }\n    return `__${this.prefix.join('__')}`;\n  }\n\n  /**\n   * this method will get the complete name of the field\n   * @return : string\n   */\n  get completeName(): string {\n    return `${this.node.name}${this.suffix}`;\n  }\n\n  //  index of conditionalBranches that verified the branch\n  verifiedBranch: number;\n  conditionalBranches: AjfCondition[];\n\n  visibility: AjfCondition | null;\n\n  constructor(params: IAjfNodeInstance, _context?: any) {\n    this._updated = this._updatedEvt.asObservable();\n\n    this._node = params.node;\n    this._prefix = params.prefix != null ? params.prefix.slice(0) : [];\n    this._visible = params.visible != null ? params.visible : true;\n  }\n\n  protected setNode(node: AjfNode) { this._node = node; }\n\n  triggerUpdate(): void {\n    this._updatedEvt.emit();\n  }\n\n  /**\n   * Update nodes visibility based on context value.\n   * Returns true if the visibility has changes\n   *\n   * @param context Context value\n   * @param branchVisibility\n   *\n   * @memberOf AjfNodeInstance\n   */\n  updateVisibility(context: any, branchVisibility = true): boolean {\n    if (this.visibility == null) { return false; }\n    const visibility: AjfCondition = this.visibility;\n\n    const oldVisibility: boolean = this.visible;\n    let newVisibility: boolean = branchVisibility && visibility.evaluate(context);\n    if (newVisibility !== this.visible) {\n      this._visible = newVisibility;\n    }\n\n    return oldVisibility !== newVisibility;\n  }\n\n  updateConditionalBranches(context: any): boolean {\n    const conditionalBranches = this.conditionalBranches;\n\n    if (conditionalBranches != null) {\n      const oldBranch = this.verifiedBranch;\n      let idx = 0;\n      let found = false;\n      while (idx < conditionalBranches.length && !found) {\n        let verified: boolean = conditionalBranches[idx].evaluate(context);\n        if (verified) {\n          found = true;\n          if (idx !== this.verifiedBranch) {\n            this.verifiedBranch = idx;\n          }\n        }\n        idx++;\n      }\n\n      if (oldBranch !== this.verifiedBranch) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\nexport class AjfFieldInstance extends AjfNodeInstance {\n  // if the field pass the validation\n  valid: boolean;\n  // number of repetitions\n  reps = 0;\n  // an array of AjfValidationResult\n  protected _validationResults: AjfValidationResult[] = [];\n  // an array of AjfWarningResult\n  protected _warningResults: AjfWarningResult[] = [];\n  protected _defaultValue: any = null;\n\n  get field(): AjfField { return <AjfField>this.node; }\n  set field(field: AjfField) { this.setNode(field); }\n\n  private _value: any;\n  // the value of field\n  get value(): any { return this._value != null && this._value || this._defaultValue; }\n  set value(value: any) { this._value = value; }\n\n  private _triggerWarning: ReplaySubject<void> = new ReplaySubject<void>(1);\n  get triggerWarning(): Observable<void> { return this._triggerWarning.asObservable(); }\n\n  constructor(params: IAjfNodeInstance, context?: any) {\n    super(params, context);\n    if (this.node != null && context != null) {\n      if (context[this.node.name] != null) {\n        this.value = context[this.node.name];\n      } else if (context[this.completeName] != null) {\n        this.value = context[this.completeName];\n      } else {\n        this.value = null;\n      }\n    }\n    const defVal = (<AjfField>this.node).defaultValue;\n    this._defaultValue = this.node && defVal != null ? defVal : null;\n  }\n\n  /**\n   * this method will get the validationResults value of the field\n   * @return : _validationResults\n   */\n  get validationResults(): AjfValidationResult[] {\n    return this._validationResults;\n  }\n\n  /**\n   * this method will get the warningResults value of the field\n   * @return : _warningResults\n   */\n  get warningResults(): AjfWarningResult[] {\n    return this._warningResults;\n  }\n\n  formula: AjfFormula | null;\n  validation: AjfValidationGroup | null;\n  warning: AjfWarningGroup | null;\n  nextSlideCondition: AjfCondition | null;\n\n  updateFormula(context: any): { changed: boolean, value: any } {\n    const formula = this.formula;\n    const editable = this.field.editable;\n    if (formula != null && this.visible && (!editable || (editable && this.value == null))) {\n      let newValue: any = formula.evaluate(context);\n      const oldValue = this.value;\n      if (newValue !== this.value) {\n        this.value = newValue;\n        context[this.completeName] = this.value;\n        context.$value = this.value;\n      }\n      return {\n        changed: newValue !== oldValue,\n        value: newValue\n      };\n    }\n    return { changed: false, value: this.value };\n  }\n\n  private _makeSupplementaryContext(context: any, supplementaryInformations: any): any {\n    Object.keys(supplementaryInformations).forEach((key) => {\n      context[`__supplementary__${key}__`] = supplementaryInformations[key];\n    });\n    return context;\n  }\n\n  updateValidation(context: any, supplementaryInformations?: any): void {\n    const validation = this.validation;\n    if (validation == null) { return; }\n\n    if (supplementaryInformations) {\n      this._makeSupplementaryContext(context, supplementaryInformations);\n    }\n\n    if (context[this.completeName] != null && validation && validation.forceValue) {\n      this.value = validation.evaluateForceValue(context);\n      context[this.completeName] = this.value;\n      context.$value = this.value;\n    }\n\n    if (validation != null) {\n      this._validationResults = validation.evaluate(context[this.completeName], context);\n      this.valid = this.validationResults\n        .reduce((prev: boolean, x: AjfValidationResult) => prev && x.result, true);\n    } else {\n      this.valid = true;\n    }\n  }\n\n  updateWarning(context: any): void {\n    const warning = this.warning;\n\n    if (context[this.completeName] != null && warning) {\n      this._warningResults = warning.evaluate(context);\n    }\n  }\n\n  updateNextSlideCondition(context: any): boolean {\n    if (this.nextSlideCondition != null) {\n      return this.nextSlideCondition.evaluate(context);\n    }\n    return false;\n  }\n\n  /**\n   * this method will update the state of the field\n   * @param   context         : any - the context of the field to update\n   * @param   branchVisibility: boolean\n   */\n  updateFieldState(context: any, branchVisibility = true): void {\n    this.updateVisibility(context, branchVisibility);\n    this.updateConditionalBranches(context);\n    this.updateFormula(context);\n    this.updateValidation(context);\n    this.updateWarning(context);\n    this.updateNextSlideCondition(context);\n  }\n\n  emitTriggerWarning(): void {\n    this._triggerWarning.next();\n  }\n}\n\nexport class AjfFieldWithChoicesInstance extends AjfFieldInstance {\n  choicesFilter: AjfFormula;\n  filteredChoices: AjfChoice<any>[];\n  triggerConditions: AjfCondition[];\n\n  get field(): AjfFieldWithChoices { return <AjfFieldWithChoices>this.node; }\n  set field(field: AjfFieldWithChoices) { this.setNode(field); }\n\n  private _triggerSelection: ReplaySubject<null> = new ReplaySubject<null>(1);\n  get triggerSelection(): Observable<null> { return this._triggerSelection.asObservable(); }\n  private _firstTriggerConditionDone: any = {};\n\n  constructor(params: IAjfNodeInstance, context?: any) {\n    super(params, context);\n    this.filteredChoices = this.field.choices.slice(0);\n  }\n\n  updateFilteredChoices(context: any): void {\n    if (this.choicesFilter != null) {\n      this.filteredChoices = this.field.choicesOrigin\n        .getChoices()\n        .filter(c => {\n          context.$choiceValue = c.value;\n          return this.choicesFilter.evaluate(context);\n        });\n    } else {\n      this.filteredChoices = this.field.choicesOrigin\n        .getChoices();\n    }\n  }\n\n  updateTriggerConditions(context: any): boolean {\n    if (this._firstTriggerConditionDone[this.completeName]) {\n      return false;\n    }\n    let found = false;\n    const conditionsNum = this.triggerConditions.length;\n    for (let i = 0 ; i < conditionsNum ; i++) {\n      if (this.triggerConditions[i].evaluate(context)) {\n        found = true;\n        break;\n      }\n    }\n    this._firstTriggerConditionDone[this.completeName] = found;\n    return found;\n  }\n\n  emitTriggerSelection(): void {\n    this._triggerSelection.next(null);\n  }\n}\n\nexport class AjfNodeGroupInstance extends AjfNodeInstance {\n  nodesNames: string[];\n  nodes: AjfNodeInstance[];\n  flatNodes: AjfNodeInstance[];\n  formulaReps: AjfFormula | null;\n\n  // number of repetitions\n  private _reps: number;\n  get reps(): number { return this._reps; }\n  set reps(reps: number) {\n    this._reps = reps;\n    this._repsArr = new Array(reps);\n  }\n\n  private _repsArr: Array<number>;\n  get repsArr(): Array<number> { return this._repsArr; }\n\n  get valid(): boolean {\n    return this.nodes.map(n => {\n      if (Object.keys(n).indexOf('valid') > -1) {\n        return (<any>n).valid;\n      }\n      return true;\n    }).reduce((v1, v2) => v1 && v2);\n  }\n\n  get nodeGroup(): AjfNodeGroup { return <AjfNodeGroup>this.node; }\n  protected setNodeGroup(nodeGroup: AjfNodeGroup) { this.setNode(nodeGroup); }\n\n  constructor(params: IAjfNodeInstance, context?: any) {\n    super(params, context);\n  }\n\n  updateRepsNum(context: any): number {\n    const oldReps: number = this.reps || 0;\n    if (this.nodeGroup.formulaReps == null) {\n      const ctxReps = context[this.completeName];\n      if (ctxReps != null) {\n        this.reps = ctxReps;\n      } else if (oldReps == 0) {\n        this.reps = 1;\n      }\n    } else {\n      let newReps = this.nodeGroup.formulaReps.evaluate(context);\n      if (newReps !== oldReps) {\n        this.reps = newReps;\n      }\n    }\n    return oldReps;\n  }\n}\n\nexport interface IAjfSlideInstance extends IAjfNodeInstance {\n  nodes: AjfNodeInstance[];\n  flatNodes: AjfNodeInstance[];\n  readonly valid: boolean;\n  readonly slide: IAjfSlide;\n}\n\nexport class AjfSlideInstance extends AjfNodeInstance implements IAjfSlideInstance {\n  nodes: AjfNodeInstance[] = [];\n  flatNodes: AjfNodeInstance[] = [];\n  position: number;\n  get valid(): boolean {\n    return this.flatNodes.map(n => {\n      if (n.visible && Object.keys(n).indexOf('valid') > -1) {\n        return (<any>n).valid;\n      }\n      return true;\n    }).reduce((v1, v2) => v1 && v2, true);\n  }\n  get slide(): AjfSlide { return <AjfSlide>this.node; }\n  protected setSlide(slide: AjfSlide) { this.setNode(slide); }\n}\n\nexport class AjfRepeatingSlideInstance extends AjfSlideInstance implements IAjfSlideInstance {\n  formulaReps: AjfFormula;\n  position: number;\n  slideNodes: AjfNodeInstance[][];\n  canRemoveGroup: boolean;\n  canAddGroup: boolean;\n\n  private _reps: number;\n  get reps(): number { return this._reps; }\n  set reps(reps: number) {\n    this._reps = reps;\n    this.canRemoveGroup = this.slide.minReps === 0 || reps > this.slide.minReps;\n    this.canAddGroup = this.slide.maxReps === 0 || reps < this.slide.maxReps;\n    this._repsArr = new Array(reps);\n  }\n\n  private _repsArr: Array<number>;\n  get repsArr(): Array<number> { return this._repsArr; }\n\n  get slide(): AjfRepeatingSlide { return <AjfRepeatingSlide>this.node; }\n\n  get nodesPerSlide(): number {\n    return this.nodes != null ? this.nodes.length / this.reps : 0;\n  }\n\n  protected setSlide(slide: AjfRepeatingSlide) { this.setNode(slide); }\n\n  constructor(params: IAjfNodeInstance, context?: any) {\n    super(params, context);\n  }\n\n  validSlide(idx: number): boolean {\n    if (idx >= this.slideNodes.length) {\n      return true;\n    }\n    return this.slideNodes[idx]\n      .map(n => {\n        if (n.visible && Object.keys(n).indexOf('valid') > -1) {\n          return (<any>n).valid;\n        }\n        return true;\n      }).reduce((v1, v2) => v1 && v2, true);\n  }\n\n  slidePosition(idx: number): number {\n    return this.position + idx;\n  }\n\n  updateRepsNum(context: any): number {\n    const oldReps: number = this.reps || 0;\n    if (this.slide.formulaReps == null) {\n      const ctxReps = context[this.completeName];\n      if (ctxReps != null) {\n        this.reps = ctxReps;\n      } else if (oldReps == 0) {\n        this.reps = 1;\n      }\n    } else {\n      let newReps = this.slide.formulaReps.evaluate(context);\n      if (newReps !== oldReps) {\n        this.reps = newReps;\n      }\n    }\n    return oldReps;\n  }\n}\n\nexport class AjfTableFieldInstance extends AjfFieldInstance {\n\n  constructor(params: IAjfNodeInstance, context?: any) {\n    super(params, context);\n    this.setValue(context);\n    this._hideEmptyRows = (<AjfTableField>this.node).hideEmptyRows;\n  }\n\n  private _hideEmptyRows: boolean;\n\n  get hideEmptyRows(): boolean {\n    return this._hideEmptyRows;\n  }\n\n  private _matrixValue: string[][];\n  private _matrixFormControl: FormControl[][];\n  private _matrixFormControlWithLabels: (FormControl | string)[][];\n  private _context: any = {};\n\n\n  get controls(): FormControl[][] {\n    return this._matrixFormControl;\n  }\n\n  set controls(v: FormControl[][]) {\n    this._matrixFormControl = v;\n    this._matrixFormControlWithLabels = this._controlsWithLabels();\n  }\n\n  get controlsWithLabels(): (FormControl | string)[][] {\n    return this._matrixFormControlWithLabels;\n  }\n\n  private _controlsWithLabels(): (FormControl | string) [][] {\n    let node = <AjfTableField>this.node;\n    let ret: (FormControl | string)[][] = [];\n    let i = 0;\n    for (let rowLabel of <any>(node.rowLabels)) {\n      ret.push([rowLabel].concat(<any>this._matrixFormControl[i]));\n      i = i + 1;\n    }\n    ret.unshift([node.label].concat(node.columnLabels));\n    return ret;\n  }\n\n  get value() {\n    let node = <AjfTableField>this.node;\n    if (node.editable) {\n      return this._matrixFormControl;\n    }\n    return this._matrixValue;\n  }\n  set value(_v: any) {}\n\n  get context(): any {\n    return this._context;\n  }\n\n  setValue(context: any) {\n    let node = <AjfTableField>this.node;\n    if (!node.editable) {\n      let value: string[][] = [];\n      let rowIndex = 0;\n      node.rows.forEach((row) => {\n        row.forEach((k) => {\n          this._context[k] = context[k];\n        });\n        value[rowIndex] = [node.rowLabels[rowIndex]]\n          .concat(\n          row.map(k => context[k])\n          );\n        rowIndex += 1;\n      });\n      value.unshift([node.label].concat(node.columnLabels));\n      this._matrixValue = value;\n    } else {\n      this._context = context;\n    }\n  }\n\n  get visibleColumns(): string[][] {\n    if (this.hideEmptyRows) {\n      return this.value\n        .filter((column: any[]) =>\n          column\n            .slice(1)\n            .reduce((a: any, b: any) => {\n              return a || (b != null && b !== '' && b !== 0 && b !== '0');\n            }, false));\n    }\n    return this.value;\n  }\n}\n\nexport class AjfDateFieldInstance extends AjfFieldInstance {\n  get field(): AjfDateField { return this.field; }\n  set field(field: AjfDateField) { this.setNode(field); }\n}\n\nexport class AjfEmptyFieldInstance extends AjfFieldInstance {\n  get field(): AjfEmptyField { return this.field; }\n  set field(field: AjfEmptyField) { this.setNode(field); }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AfterViewInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\nimport {Observable, Subscription} from 'rxjs';\nimport {filter, withLatestFrom} from 'rxjs/operators';\n\nimport {AjfFieldType, AjfFieldWithChoices} from './nodes';\nimport {\n  AjfDateFieldInstance, AjfEmptyFieldInstance, AjfFieldInstance,\n  AjfFieldWithChoicesInstance, AjfTableFieldInstance\n} from './nodes-instances';\nimport {AjfFormRendererService} from './form-renderer';\n\nexport interface AjfFormFieldWarningAlertResult { result: boolean; }\n\nexport class AjfFormFieldValueChanged { field: AjfFormField; }\n\n\nexport abstract class AjfFormField implements AfterViewInit, OnDestroy, OnInit {\n  // AjfFieldType obj implement the type of field\n  // ( String, Text, Number, Boolean, SingleChoice, MultipleChoice,\n  // Formula, Empty, Composed )\n  ajfFieldTypes = AjfFieldType;\n  // this observable implement abstract control\n  control: Observable<AbstractControl | null>;\n\n  private _fieldInstance: AjfFieldInstance;\n  get fieldInstance(): AjfFieldInstance { return this._fieldInstance; }\n  set fieldInstance(fieldInstance: AjfFieldInstance) {\n    this._fieldInstance = fieldInstance;\n    this._fieldUpdateSubscription.unsubscribe();\n    this._fieldUpdateSubscription = fieldInstance.updated.subscribe(() => {\n      if (this._changeDetectionRef) {\n        try {\n          this._changeDetectionRef.detectChanges();\n        } catch (e) { }\n      }\n    });\n  }\n\n  get fwcInst(): AjfFieldWithChoicesInstance {\n    return this._fieldInstance as AjfFieldWithChoicesInstance;\n  }\n  get fwc(): AjfFieldWithChoices { return this._fieldInstance.field as AjfFieldWithChoices; }\n  get datefInst(): AjfDateFieldInstance { return this._fieldInstance as AjfDateFieldInstance; }\n  get tablefInst(): AjfTableFieldInstance { return this._fieldInstance  as AjfTableFieldInstance; }\n  get emptyfInst(): AjfEmptyFieldInstance { return this._fieldInstance as AjfEmptyFieldInstance; }\n\n  singleChoiceSelect: any;\n  multipleChoiceSelect: any;\n\n  // this private AjfFieldValueChanged event emitter emit an event when the\n  // field value is changed\n  private _valueChanged: EventEmitter<AjfFormFieldValueChanged> =\n      new EventEmitter<AjfFormFieldValueChanged>();\n  // this @output expose the value changed like an observable\n  get valueChanged(): Observable<AjfFormFieldValueChanged> {\n    return this._valueChanged.asObservable();\n  }\n\n  private _triggerSelectionSubscription: Subscription = Subscription.EMPTY;\n  private _triggerWarningSubscription: Subscription = Subscription.EMPTY;\n  private _fieldUpdateSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * this constructor will init _rendererService _changeDetectionRef _alertCtrl\n   * and init the messagesWarning subscription\n   */\n  constructor(protected _rendererService: AjfFormRendererService,\n              protected _changeDetectionRef: ChangeDetectorRef) {}\n\n  abstract showWarningAlertPrompt(\n    messagesWarning: string[]\n  ): Observable<AjfFormFieldWarningAlertResult>;\n\n  /**\n   * this method will init the control, the filtere choices and the change\n   * detection reference\n   */\n  ngOnInit(): void {\n    this.control = this._rendererService.getControl(this.fieldInstance);\n    this._triggerWarningSubscription = this.fieldInstance.triggerWarning\n      .pipe(\n        withLatestFrom(this.control),\n        filter(v => v[1] != null)\n      )\n      .subscribe((v: [void, AbstractControl | null]) => {\n        const control = v[1];\n        const s = this.showWarningAlertPrompt(\n          this.fieldInstance.warningResults.filter(w => w.result).map(w => w.warning)\n        ).subscribe(\n          (r: AjfFormFieldWarningAlertResult) => {\n            if (r.result) { control!.setValue(null); }\n          },\n          (_e: any) => { if (s) { s.unsubscribe(); }},\n          () => { if (s) { s.unsubscribe(); }}\n        );\n      });\n  }\n\n  ngAfterViewInit() {\n    if (this.fieldInstance instanceof AjfFieldWithChoicesInstance) {\n      this._triggerSelectionSubscription = this.fieldInstance.triggerSelection\n        .subscribe(() => {\n          this._triggerSelection();\n        });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._triggerSelectionSubscription.unsubscribe();\n    this._triggerWarningSubscription.unsubscribe();\n    this._fieldUpdateSubscription.unsubscribe();\n  }\n\n  private _triggerSelection(): void {\n    if (this.singleChoiceSelect != null && !this.singleChoiceSelect._isOpen) {\n      this.singleChoiceSelect.open();\n    } else if (this.multipleChoiceSelect != null &&\n               !this.multipleChoiceSelect._isOpen) {\n      this.multipleChoiceSelect.open();\n    }\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {tokenize, Token} from 'esprima';\n\nimport {AjfCondition, AjfFormula} from '@ajf/core/models';\n\nimport {\n  AjfField, AjfFieldWithChoices, AjfNode, AjfNodeGroup, AjfRepeatingSlide, AjfSlide, AjfTableField\n} from './nodes';\nimport {\n  AjfFieldInstance, AjfTableFieldInstance, AjfFieldWithChoicesInstance, AjfNodeGroupInstance,\n  AjfNodeInstance, AjfRepeatingSlideInstance, AjfSlideInstance, IAjfSlideInstance\n} from './nodes-instances';\nimport {AjfValidation, AjfValidationGroup} from './validation';\nimport {AjfWarning, AjfWarningGroup} from './warning';\n\n\nexport function orderedNodes(nodes: AjfNode[], parent: number | null): AjfNode[] {\n  let newNodes: AjfNode[] = [];\n  nodes.filter((n: AjfNode) => n.parent == parent)\n    .sort((n1: AjfNode, n2: AjfNode) => n1.parentNode - n2.parentNode)\n    .forEach((n: AjfNode) => {\n      newNodes.push(n);\n      newNodes = newNodes.concat(orderedNodes(nodes, n.id));\n    });\n  return newNodes;\n}\n\nexport function isRepeatingNode(node: AjfNode): boolean {\n  return node != null && (\n    node instanceof AjfRepeatingSlide ||\n    node instanceof AjfNodeGroup\n  );\n}\n\nexport function isContainerNode(node: AjfNode): boolean {\n  return node != null && (\n    node instanceof AjfSlide ||\n    node instanceof AjfRepeatingSlide ||\n    node instanceof AjfNodeGroup\n  );\n}\n\nexport function flattenNodes(nodes: AjfNode[]): AjfNode[] {\n  let flatNodes: AjfNode[] = [];\n  nodes.forEach((node: AjfNode) => {\n    flatNodes.push(node);\n    if (\n      node instanceof AjfNodeGroup ||\n      node instanceof AjfSlide ||\n      node instanceof AjfRepeatingSlide\n    ) {\n      flatNodes = flatNodes.concat(flattenNodes(node.nodes));\n    }\n  });\n  return flatNodes;\n}\n\nexport function flattenNodesInstances(\n  nodes: AjfNodeInstance[], includeGroups = false\n): AjfNodeInstance[] {\n  let flatNodes: AjfNodeInstance[] = [];\n  nodes.forEach((nodeInstance: AjfNodeInstance) => {\n    if (nodeInstance instanceof AjfFieldInstance) {\n      flatNodes.push(nodeInstance);\n    }\n    // @TODO missing composed fields\n    if (\n      nodeInstance instanceof AjfNodeGroupInstance ||\n      nodeInstance instanceof AjfSlideInstance ||\n      nodeInstance instanceof AjfRepeatingSlideInstance\n    ) {\n      if (includeGroups) {\n        flatNodes.push(nodeInstance);\n      }\n      flatNodes = flatNodes.concat(flattenNodesInstances(nodeInstance.nodes, includeGroups));\n    }\n  });\n  return flatNodes;\n}\n\nexport function getAncestorRepeatingNodes(\n  allNodes: AjfNode[] | AjfNodeInstance[], node: AjfNode\n): AjfNode[] {\n  let nodeGroups: AjfNode[] = [];\n  let curParent: number | null = node.parent;\n  while (curParent != null) {\n    node = (<any[]>allNodes).find((n: AjfNode | AjfNodeInstance) => {\n      return n instanceof AjfNode ? n.id == curParent : n.node.id == curParent;\n    });\n    if (node instanceof AjfNodeInstance) {\n      node = node.node;\n    }\n    if (isRepeatingNode(node)) {\n      nodeGroups.push(node);\n    }\n    curParent = node != null ? node.parent : null;\n  }\n  return nodeGroups;\n}\n\nexport function getAncestorRepeatingNodesNames(\n  allNodes: AjfNode[] | AjfNodeInstance[], node: AjfNode\n): {[prop: string]: number} {\n  let names: {[prop: string]: number} = {};\n  getAncestorRepeatingNodes(allNodes, node)\n    .forEach((n, idx) => {\n      ((<AjfNodeGroup>n).nodes || [])\n        .forEach((sn) => {\n          if (sn instanceof AjfField) {\n            names[sn.name] = idx;\n          }\n        });\n    });\n  return names;\n}\n\nexport function flattenNodesTree(nodes: AjfNodeInstance[]): IAjfSlideInstance[] {\n  let flatTree: IAjfSlideInstance[] = [];\n  nodes\n    .forEach((nodeInstance: AjfNodeInstance) => {\n      if (\n        nodeInstance instanceof AjfSlideInstance ||\n        nodeInstance instanceof AjfRepeatingSlideInstance\n      ) {\n        flatTree.push(nodeInstance);\n        nodeInstance.flatNodes = flattenNodesInstances(nodeInstance.nodes);\n      }\n    });\n  return flatTree;\n}\n\nexport function normalizeFormula(\n  formula: string, ancestorsNames: {[prop: string]: number}, prefix: number[]\n): string {\n  const ancestorsNameStrings = Object.keys(ancestorsNames);\n  const tokens = tokenize(formula)\n    .filter((token: Token) => token.type == 'Identifier' && token.value != '$value')\n    .map((token: Token) => token.value);\n  tokens.forEach((t) => {\n    if (ancestorsNameStrings.indexOf(t) > -1) {\n      formula = formula.replace(\n        new RegExp(`\\\\b${t}\\\\b`, 'g'),\n        `${t}__${prefix.slice(ancestorsNames[t]).join('__')}`\n      );\n    }\n  });\n  return formula;\n}\n\nfunction getInstanceCondition(\n  condition: AjfCondition, ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfCondition {\n  const oldCondition = condition.condition;\n  let newCondition = normalizeFormula(oldCondition, ancestorsNames, prefix);\n  if (newCondition === oldCondition) {\n    return condition;\n  }\n  return new AjfCondition({condition: newCondition});\n}\n\nfunction getInstanceFormula(\n  formula: AjfFormula, ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfFormula {\n  const oldFormula = formula.formula;\n  let newFormula = normalizeFormula(oldFormula, ancestorsNames, prefix);\n  if (newFormula === oldFormula) {\n    return formula;\n  }\n  return new AjfFormula({formula: newFormula});\n}\n\nfunction getInstanceConditions(\n  conditions: AjfCondition[], ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfCondition[] {\n  let changed = false;\n  const newConditions = conditions.map((condition) => {\n    const newCondition = getInstanceCondition(condition, ancestorsNames, prefix);\n    if (newCondition !== condition) {\n      changed = true;\n    }\n    return newCondition;\n  });\n  return changed ? newConditions : conditions;\n}\n\nfunction getInstanceValidation(\n  validation: AjfValidation, ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfValidation {\n  const oldValidation = validation.condition;\n  let newValidation = normalizeFormula(oldValidation, ancestorsNames, prefix);\n  if (newValidation === oldValidation) {\n    return validation;\n  }\n  return new AjfValidation({condition: newValidation});\n}\n\nfunction getInstanceValidations(\n  validations: AjfValidation[], ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfValidation[] {\n  let changed = false;\n  const newValidations = validations.map((validation) => {\n    const newValidation = getInstanceValidation(validation, ancestorsNames, prefix);\n    if (newValidation !== validation) {\n      changed = true;\n    }\n    return newValidation;\n  });\n  return changed ? newValidations : validations;\n}\n\nfunction getInstanceWarning(\n  warning: AjfWarning, ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfWarning {\n  const oldWarning = warning.condition;\n  let newWarning = normalizeFormula(oldWarning, ancestorsNames, prefix);\n  if (newWarning === oldWarning) {\n    return warning;\n  }\n  return new AjfWarning({condition: newWarning});\n}\n\nfunction getInstanceWarnings(\n  warnings: AjfWarning[], ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfWarning[] {\n  let changed = false;\n  const newWarnings = warnings.map((warning) => {\n    const newWarning = getInstanceWarning(warning, ancestorsNames, prefix);\n    if (newWarning !== warning) {\n      changed = true;\n    }\n    return newWarning;\n  });\n  return changed ? newWarnings : warnings;\n}\n\nexport function nodeToNodeInstance(\n  allNodes: AjfNode[] | AjfNodeInstance[], node: AjfNode, prefix: number[], context: any\n): AjfNodeInstance | null {\n  let instance: AjfNodeInstance | null = null;\n  if (node instanceof AjfFieldWithChoices) {\n    instance = new AjfFieldWithChoicesInstance({node: node, prefix: prefix}, context);\n  } else if (node instanceof AjfTableField) {\n    instance = new AjfTableFieldInstance({node: node, prefix: prefix}, context);\n  } else if (node instanceof AjfField) {\n    instance = new AjfFieldInstance({node: node, prefix: prefix}, context);\n  } else if (node instanceof AjfNodeGroup) {\n    instance = new AjfNodeGroupInstance({node: node, prefix: prefix}, context);\n  } else if (node instanceof AjfRepeatingSlide) {\n    instance = new AjfRepeatingSlideInstance({node: node, prefix: prefix}, context);\n  } else if (node instanceof AjfSlide) {\n    instance = new AjfSlideInstance({node: node, prefix: prefix}, context);\n  }\n  if (instance != null) {\n    const hasPrefix = prefix != null && prefix.length > 0;\n    if (hasPrefix) {\n      const ancestorsNames = getAncestorRepeatingNodesNames(allNodes, node);\n\n      if (node.visibility != null) {\n        const oldVisibility = node.visibility.condition;\n        const newVisibility = normalizeFormula(oldVisibility, ancestorsNames, prefix);\n        instance.visibility = newVisibility !== oldVisibility ? new AjfCondition({\n          condition: newVisibility\n        }) : node.visibility;\n      }\n\n      instance.conditionalBranches = getInstanceConditions(\n        instance.node.conditionalBranches, ancestorsNames, prefix\n      );\n\n      if (\n          instance instanceof AjfNodeGroupInstance || instance instanceof AjfRepeatingSlideInstance\n        ) {\n        const formulaReps = instance instanceof AjfNodeGroupInstance ?\n          instance.nodeGroup.formulaReps :\n          instance.slide.formulaReps;\n        if (formulaReps != null) {\n          const oldFormula = formulaReps.formula;\n          let newFormula = normalizeFormula(oldFormula, ancestorsNames, prefix);\n          instance.formulaReps = newFormula !== oldFormula ?\n            new AjfFormula({formula: newFormula}) : formulaReps;\n        }\n      } else if (instance instanceof AjfFieldInstance) {\n        if (instance.field.formula != null) {\n          instance.formula = getInstanceFormula(instance.field.formula, ancestorsNames, prefix);\n        }\n\n        if (instance.field.validation != null) {\n          const newConditions = getInstanceValidations(\n            instance.field.validation.conditions, ancestorsNames, prefix\n          );\n          if (newConditions !== instance.field.validation.conditions) {\n            instance.validation = new AjfValidationGroup(instance.field.validation);\n            instance.validation.conditions = newConditions;\n          } else {\n            instance.validation = instance.field.validation;\n          }\n        }\n\n        if (instance.field.warning != null) {\n          const newWarnings = getInstanceWarnings(\n            instance.field.warning.conditions, ancestorsNames, prefix\n          );\n          if (newWarnings !== instance.field.warning.conditions) {\n            instance.warning = new AjfWarningGroup(instance.field.warning);\n            instance.warning.conditions = newWarnings;\n          } else {\n            instance.warning = instance.field.warning;\n          }\n        }\n\n        if (instance.field.nextSlideCondition != null) {\n          instance.nextSlideCondition = getInstanceCondition(\n            instance.field.nextSlideCondition, ancestorsNames, prefix\n          );\n        }\n\n        if (instance instanceof AjfFieldWithChoicesInstance) {\n          if (instance.field.choicesFilter != null) {\n            instance.choicesFilter = getInstanceFormula(\n              instance.field.choicesFilter, ancestorsNames, prefix\n            );\n          }\n          if (instance.field.triggerConditions != null) {\n            instance.triggerConditions = getInstanceConditions(\n              instance.field.triggerConditions, ancestorsNames, prefix\n            );\n          }\n        }\n      }\n    } else {\n      instance.visibility = instance.node.visibility;\n      instance.conditionalBranches = instance.node.conditionalBranches;\n      if (\n        instance instanceof AjfNodeGroupInstance || instance instanceof AjfRepeatingSlideInstance\n      ) {\n        instance.formulaReps = (instance instanceof AjfNodeGroupInstance ?\n          instance.nodeGroup : instance.slide).formulaReps;\n      } else if (instance instanceof AjfFieldInstance) {\n        instance.formula = instance.field.formula;\n        instance.validation = instance.field.validation;\n        instance.warning = instance.field.warning;\n        instance.nextSlideCondition = instance.field.nextSlideCondition;\n        if (instance instanceof AjfFieldWithChoicesInstance) {\n          instance.choicesFilter = instance.field.choicesFilter;\n          instance.triggerConditions = instance.field.triggerConditions;\n        }\n      }\n    }\n  }\n  return instance;\n}\n\nexport function findNodeInstanceInTree(\n  nodes: AjfNodeInstance[], node: AjfNodeInstance\n): {container: AjfNodeInstance[], index: number} {\n  const index = nodes.indexOf(node);\n  if (index > -1) {\n    return {container: nodes, index: index};\n  }\n  const groups = nodes.filter(n => isContainerNodeInstance(n));\n  let i = 0;\n  const len = groups.length;\n  while (i < len) {\n    const res = findNodeInstanceInTree((<any>groups[i]).node.nodes, node);\n    if (res.index > -1) {\n      return res;\n    }\n    i++;\n  }\n  return {\n    container: [],\n    index: -1\n  };\n}\n\nexport function flattenNodeInstances(nodes: AjfNodeInstance[] = []): AjfNodeInstance[] {\n  let flatNodes: AjfNodeInstance[] = [];\n  nodes.forEach((nodeInstance: AjfNodeInstance) => {\n    flatNodes.push(nodeInstance);\n    if (\n      nodeInstance instanceof AjfNodeGroupInstance ||\n      nodeInstance instanceof AjfSlideInstance ||\n      nodeInstance instanceof AjfRepeatingSlideInstance\n    ) {\n      flatNodes = flatNodes.concat(flattenNodeInstances(nodeInstance.nodes));\n    }\n  });\n  return flatNodes;\n}\n\nexport function isContainerNodeInstance(node: AjfNodeInstance): boolean {\n  return node != null && (\n    node instanceof AjfSlideInstance ||\n    node instanceof AjfRepeatingSlideInstance ||\n    node instanceof AjfNodeGroupInstance\n  );\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {AjfValidatedProperty} from '@ajf/core/models';\n\n\n@Injectable()\nexport class AjfValidationService {\n  private _baseUtilFunctions: string[] = [\n    `/**\n        * count the number of digit contained on x.\n        * @param  x the value used for digit count\n        * @return the count of the digit\n      */\n    var digitCount = function(x) { return x.toString().length; }`,\n    `/**\n        * count the number of decimal contained on x.\n        * @param  x the value used for decimal count\n        * @return the count of the decimal\n      */\n    var decimalCount = function(x) {\n      return (parseFloat(x).toString().split('.')[1] || []).length;\n    }`,\n    `/**\n        * check if x is integer\n        * @param  x the value used for check\n        * @return true if x is a number\n      */\n    var isInt = function(x) { return !/[,.]/.test(x); }`,\n    `/**\n        * check if x is not empity\n        * @param  x the value used for check\n        * @return true if x defined and not null and the number of digit is > 0\n      */\n    var notEmpty = function (x) {\n      return (typeof x !== 'undefined' && x !== null ? x.toString().length > 0 : false);\n    }`,\n    `/**\n        * check if x is contained on array\n        * @param  x the value used for check\n        * @return the position of x on array or if array === x\n      */\n    var valueInChoice = function(array, x) { return array.indexOf(x) > -1 || array === x; }`,\n    `var scanGroupField = function(reps, acc, callback) {\n        for (var i = 0; i < reps; i++) {\n            acc = callback(acc, i);\n        }\n        return acc;\n    }`,\n    `/**\n        * sum the value contained on array\n        * @param  x the array\n        * @return the sum\n      */\n    var sum = function(array) {return array.reduce(function(a, b){ return a + b; }, 0); }`,\n    `var dateOperations = function(dString, period, operation, v) {\n        fmt = 'MM/DD/YYYY';\n        var d = (typeof dString !== 'undefined') ? dateUtils.parse(dString) : new Date();\n        if (operation == 'remove') {\n          v = -v;\n        }\n        var dateOp;\n        switch (period) {\n          case 'day':\n            dateOp = dateUtils.addDays;\n            break;\n          case 'month':\n            dateOp = dateUtils.addMonths;\n            break;\n          case 'year':\n            dateOp = dateUtils.addYears;\n            break;\n          default:\n            return -1;\n        }\n        return dateUtils.format(dateOp(d, v), fmt);\n      }`,\n    `/**\n        * round the num\n        * @param  num the value to round\n        * @param  digits how many digit\n        * @return num rounded\n      */\n      var round = function(num, digits) {\n        digits = digits || 0;\n        var f = 0;\n        try { f = parseFloat(num); } catch (e) { }\n        var m = Math.pow(10, digits);\n        return Math.round(f * m) / m;\n      }`,\n    `/**\n        * extract the property of the source object with property != null\n        * @param  source array of object wich contains property\n        * @param  property the property on wich we want filter\n        * @return array of dates\n      */\n      var extractArray = function(source, property, property2) {\n        source = (source || []).slice(0);\n        var l = source.length;\n        var res = [];\n        for (var i = 0; i < l ; i++) {\n          if (source[i][property] != null && source[i][property2] != null) {\n            res.push(source[i][property] + source[i][property2]);\n          }\n          else if (source[i][property] != null) {\n            res.push(source[i][property]);\n          }\n        }\n        return res;\n      }`,\n    `/**\n        * extract the property of the source object with property != null\n        * @param  source array of object wich contains property\n        * @param  propertues string array the properties to sum\n        * @return the sum\n      */\n      var extractSum = function(source, properties) {\n        var sum = 0;\n        properties = (properties || []).slice(0);\n        var l = properties.length;\n\n        for (var i = 0; i < l ; i++) {\n          var array = extractArray(source, properties[i]);\n          var leng = array.length;\n          for(var j = 0; j < leng; i++) {\n            sum += array[j];\n          }\n        }\n        return sum;\n      }`,\n      `/**\n        * extract the array of sum for each week != null\n        * @param  source array of object wich contains property\n        * @param  propertues string array the properties to sum\n        * @return the sum\n      */\n      var extractArraySum = function(source, properties) {\n        var arrays = [];\n        properties = (properties || []).slice(0);\n\n        for (var propI = 0; propI < properties.length ; propI++) {\n          var array = extractArray(source, properties[propI]);\n          arrays.push(array);\n        }\n\n        var res = [];\n        for (var weekI = 0; weekI < array.length; weekI ++ ) {\n          var sum = 0;\n          for (var propI = 0; propI < properties.length ; propI++) {\n            sum = sum + arrays[propI][weekI]\n          }\n          res.push(sum);\n        }\n        return res;\n      }`,\n    `/**\n        * draw a threshold line on chart related to the property\n        * @param  source array of object wich contains property\n        * @param  property the property on wich we want filter\n        * @return array of dates\n      */\n      var drawThreshold = function(source, property, treshold) {\n        source = (source || []).slice(0);\n        var l = source.length;\n        var res = [];\n        for (var i = 0; i < l ; i++) {\n          if (source[i][property] != null) {\n            res.push(treshold);\n          }\n        }\n        return res;\n      }`,\n    `/**\n        * extract the dates of the source object with property != null\n        * @param  source array of object wich contains property and date_start\n        * @param  property the property on wich we want to calculate dates\n        * @param  format the format of the date\n        * @return array of dates\n      */\n      var extractDates = function(source, property, format) {\n        source = (source || []).slice(0);\n        var l = source.length;\n        var res = [];\n        var prefix = '';\n        for (var i = 0; i < l ; i++) {\n          if (source[i][property] != null) {\n            switch(format) {\n              case \"WW\":\n                prefix = \"W\";\n                break;\n              case \"MM\":\n                prefix = \"M\";\n                break;\n              default:\n                prefix = \"\";\n            }\n            res.push(prefix + formatDate(source[i][\"date_start\"], format));\n          }\n        }\n        return res;\n      }`,\n    `/**\n        * extract the last property contains in source != null\n        * @param  source array of object wich contains property and date_start\n        * @param  property the property to find\n        * @return the last property != null\n      */\n      var lastProperty = function(source, property) {\n        source = (source || []).slice(0);\n        var l = source.length -1;\n\n        while (l >= 0 && source[l][property] == null) {\n          l--;\n          if (l < 0) return 0;\n        }\n        return l >= 0 ? source[l][property] : 0;\n      }`,\n    `var sumLastProperties = function(source, properties) {\n        source = (source || []).slice(0);\n        var sum = 0;\n        for (var i = 0; i < properties.length; i++) {\n          sum += lastProperty(source, properties[i]);\n        }\n\n        return sum;\n      }`,\n    `/**\n        * compute the trend of the property contained on the source.\n        * @param  source array of object wich contains property\n        * @param  property the property on wich we want to calculate the trend\n        * @return an html icon that identifies the trend\n      */\n      var calculateTrendProperty = function(source, property) {\n        source = (source || []).slice(0);\n        var last = source.length - 1;\n        while (source[last][property] == null) {\n          if (last == 0) {\n            break;\n          }\n          last--;\n        }\n        var lastLast = last - 1;\n        if (last == 0) {\n          lastLast = last;\n        } else {\n          while (source[lastLast][property] == null) {\n            if (lastLast == 0) {\n              lastLast = last;\n              break;\n            }\n            lastLast--;\n          }\n        }\n\n        var lastProperty = source[last]?(source[last][property] || 0): 0;\n        var lastLastProperty = source[lastLast]?(source[lastLast][property] || 0): 0;\n\n        if (lastProperty == lastLastProperty) {\n          return '<p><i class=\"material-icons\" style=\"color:blue\">trending_flat</i></p>';\n        } else if (lastProperty > lastLastProperty) {\n          return '<p><i class=\"material-icons\" style=\"color:green\">trending_up</i></p>';\n        } else {\n          return '<p><i class=\"material-icons\" style=\"color:red\">trending_down</i></p>';\n        }\n      }`,\n    `/**\n        * compute the average value of the property contained on the source.\n        * @param  source array of object wich contains property\n        * @param  property the property on wich we want to calculate the average\n        * @param  range the range on wich we want to calculate the average\n        * @param  coefficent the coefficent used for calculate the treshold\n                  if coefficent is 0 mean return the count of property > 0\n        * @return the average value || the count of property > 0\n      */\n      var calculateAvgProperty = function(source, property, range, coefficient) {\n        source = (source || []).slice(0);\n\n        source.pop();\n\n        coefficient = coefficient || 1;\n        range = range || 12;\n\n        var l = source.length;\n        var res = 0;\n        var counter = 0;\n        var noZero = 0;\n\n        if(l < range) {\n          range = l;\n        }\n\n        while (range != 0) {\n          counter++;\n          if (source[l - 1][property] != null) {\n            res += source[l - 1][property];\n\n            if (source[l - 1][property] > 0) {\n              noZero++;\n            }\n          }\n          l--;\n          range--;\n        }\n\n        if (coefficient == 0) {\n          return noZero;\n        } else {\n          var treshold = (res/counter)*coefficient || 0;\n          return treshold;\n        }\n      }`,\n    `var alert = function(source, property, treshold, fmt) {\n        source = (source || []).slice(0);\n        var l = source.length;\n\n        if ( lastProperty(source, property)  > treshold ) {\n          return '<p><i class=\"material-icons\" style=\"color:red\">warning</i></p>';\n          } else {\n            return '<p></p>';\n          }\n      }`,\n    `var formatNumber = function(num, fmt) {\n        fmt = fmt || '0,0[.]0';\n        return numeral(num).format(fmt);\n      }`,\n    `var formatDate = function(date, fmt) {\n        fmt = fmt || 'MM-DD-YYYY';\n        return dateUtils.format(date, fmt);\n      }`,\n    `var isoMonth = function(date, fmt) {\n        fmt = fmt || 'MM';\n        var du = dateUtils;\n        return du.format(du.addDays(du.startOfMonth(date), 4),fmt)\n      }`,\n    `var nextCounterValue = function(counterName, firstValue) {\n        firstValue = firstValue != null ? firstValue : 0;\n        if (execContext['$$'+counterName] == null) {\n          execContext['$$'+counterName] = firstValue;\n        } else {\n          execContext['$$'+counterName]++;\n        }\n        return execContext['$$'+counterName];\n      }`,\n    `var getCoordinate = function(source, zoom) {\n        zoom = zoom || 6;\n        if(source == null) {\n          return [51.505,-0.09, zoom];\n        } else {\n          return [source[0], source[1], zoom];\n        }\n      }`\n  ];\n\n  private _functions: (Function | string)[] = [];\n  private _functionsStr: string = '';\n\n  constructor() {\n    this._initFunctions();\n  }\n\n  addFunction(f: Function | string): void {\n    this._functions.push(f);\n    this._initFunctions();\n  }\n\n  addFunctionHandler(name: string, fn: any): void {\n    if (AjfValidatedProperty.utils[name] === undefined) {\n      AjfValidatedProperty.utils[name] = {fn};\n    }\n  }\n\n  private _initFunctions(): void {\n    const functionsStr = this._functions\n      .map(f => typeof f === 'string' ? f : f.toString())\n      .join('; ');\n    this._functionsStr = `${this._baseUtilFunctions.join('; ')}; ${functionsStr}`;\n    AjfValidatedProperty.UTIL_FUNCTIONS = this._functionsStr;\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {EventEmitter, Injectable} from '@angular/core';\nimport {AbstractControl, FormControl, FormGroup} from '@angular/forms';\n\nimport {BehaviorSubject, Observable, Subject, Subscriber, Subscription, timer} from 'rxjs';\nimport {\n  debounceTime, filter, map, pairwise, publishReplay, refCount,\n  scan, share, startWith, withLatestFrom\n} from 'rxjs/operators';\n\nimport {AjfCondition} from '@ajf/core/models';\nimport {deepCopy} from '@ajf/core/utils';\nimport {AjfForm} from './forms';\nimport {AjfEmptyField, AjfNode, AjfNodeGroup, AjfTableField} from './nodes';\nimport {\n  AjfFieldInstance, AjfFieldWithChoicesInstance, AjfNodeGroupInstance, AjfNodeInstance,\n  AjfRepeatingSlideInstance, AjfSlideInstance, AjfTableFieldInstance, IAjfNodeInstance,\n  IAjfSlideInstance\n} from './nodes-instances';\nimport {\n  IAjfNodesInstancesOperation, IAjfRendererUpdateMap, IAjfRendererUpdateMapOperation,\n  IAjfRendererUpdateTableMapOperation\n} from './form-renderer-operations';\nimport {\n  flattenNodes, flattenNodesTree, flattenNodesInstances, isContainerNode,\n  isRepeatingNode, nodeToNodeInstance, orderedNodes\n} from './form-renderer-utils';\nimport {AjfValidationService} from './validation-service';\n\nimport {tokenize, Token} from 'esprima';\n\n\nexport enum AjfFormInitStatus {\n  Initializing,\n  Complete\n}\n\n\n@Injectable()\nexport class AjfFormRendererService {\n  private _visibilityNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _visibilityNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _repetitionNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _repetitionNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _conditionalBranchNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _conditionalBranchNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _formulaNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _formulaNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _validationNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _validationNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _warningNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _warningNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _filteredChoicesNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _filteredChoicesNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _triggerConditionsNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _triggerConditionsNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _nextSlideConditionsNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _nextSlideConditionsNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _formInitEvent: EventEmitter<AjfFormInitStatus> = new EventEmitter<AjfFormInitStatus>();\n  readonly formInitEvent: Observable<AjfFormInitStatus> = this._formInitEvent.asObservable();\n\n  private _formGroup: BehaviorSubject<FormGroup | null> =\n    new BehaviorSubject<FormGroup | null>(null);\n  readonly formGroup: Observable<FormGroup | null> = this._formGroup.asObservable();\n\n  private _form: BehaviorSubject<{form: AjfForm | null, context?: any} | null> =\n    new BehaviorSubject<{form: AjfForm | null, context?: any} | null>(null);\n  private _nodes: Observable<AjfNodeInstance[]>;\n  private _flatNodes: Observable<IAjfNodeInstance[]>;\n  private _flatNodesTree: Observable<IAjfSlideInstance[]>;\n  private _nodesUpdates: Subject<IAjfNodesInstancesOperation>\n    = new Subject<IAjfNodesInstancesOperation>();\n  private _errorPositions: Observable<number[]>;\n  private _errors: Observable<number>;\n\n  private _formGroupSubscription: Subscription = Subscription.EMPTY;\n  private _valueChanged: Subject<void> = new Subject<void>();\n\n  private _nodesMaps: Observable<IAjfRendererUpdateMap>[];\n\n  private _nextSlideTrigger: EventEmitter<AjfNodeInstance> = new EventEmitter<AjfNodeInstance>();\n  readonly nextSlideTrigger: Observable<AjfNodeInstance> = this._nextSlideTrigger.asObservable();\n\n  private _slidesNum: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n  readonly slidesNum: Observable<number> = this._slidesNum.asObservable();\n\n  get nodesTree(): Observable<IAjfSlideInstance[]> { return this._flatNodesTree; }\n  get errorPositions(): Observable<number[]> { return this._errorPositions; }\n  get errors(): Observable<number> { return this._errors; }\n  get currentSupplementaryInformations(): any {\n    const form = this._form.getValue();\n    return form != null && form.form != null ? form.form.supplementaryInformations : null;\n  }\n\n  constructor(_: AjfValidationService) {\n    this._initUpdateMapStreams();\n    this._initNodesStreams();\n    this._initErrorsStreams();\n    this._initFormStreams();\n    this._updateFormValueAndValidity();\n  }\n\n  setForm(form: AjfForm | null, context: any = {}) {\n    this._initUpdateMapStreams();\n    if (\n      form != null && Object.keys(context).length === 0 &&\n      Object.keys(form.initContext).length > 0\n    ) {\n      context = form.initContext;\n    }\n    const currentForm = this._form.getValue();\n    if (\n      (currentForm == null && form != null) ||\n      (currentForm != null && form !== currentForm.form)\n    ) {\n      this._form.next({form: form, context: context});\n    }\n  }\n\n  getFormValue(): any {\n    const formGroup = this._formGroup.getValue();\n    if (formGroup == null) { return {}; }\n    let res = deepCopy(formGroup.value);\n    return res;\n  }\n\n  addGroup(group: AjfNodeGroupInstance | AjfRepeatingSlideInstance): Observable<boolean> {\n    return new Observable<boolean>((subscriber: Subscriber<boolean>) => {\n      if (group.formulaReps != null) {\n        subscriber.next(false);\n        subscriber.complete();\n        return;\n      }\n      const maxReps = group instanceof AjfNodeGroupInstance ?\n        group.nodeGroup.maxReps : group.slide.maxReps;\n      if (maxReps > 0 && group.reps + 1 > maxReps) {\n        subscriber.next(false);\n        subscriber.complete();\n        return;\n      }\n      const oldReps = group.reps;\n      group.reps = group.reps + 1;\n      this._nodesUpdates.next((nodes: AjfNodeInstance[]): AjfNodeInstance[] => {\n        const flatNodes = flattenNodesInstances(nodes, true);\n        this._adjustReps(flatNodes, group, oldReps, this.getFormValue());\n        subscriber.next(true);\n        subscriber.complete();\n        return nodes;\n      });\n    });\n  }\n\n  removeGroup(group: AjfNodeGroupInstance | AjfRepeatingSlideInstance): Observable<boolean> {\n    return new Observable<boolean>((subscriber: Subscriber<boolean>) => {\n      if (group.formulaReps != null) {\n        subscriber.next(false);\n        subscriber.complete();\n        return;\n      }\n      const minReps = group instanceof AjfNodeGroupInstance ?\n        group.nodeGroup.minReps : group.slide.minReps;\n      if (group.reps - 1 < minReps) {\n        subscriber.next(false);\n        subscriber.complete();\n        return;\n      }\n      const oldReps = group.reps;\n      group.reps = group.reps - 1;\n      this._nodesUpdates.next((nodes: AjfNodeInstance[]): AjfNodeInstance[] => {\n        this._adjustReps(nodes, group, oldReps, this.getFormValue());\n        subscriber.next(true);\n        subscriber.complete();\n        return nodes;\n      });\n    });\n  }\n\n  getControl(field: AjfFieldInstance): Observable<AbstractControl | null> {\n    return this.formGroup.pipe(\n      map((f) => {\n        const fieldName = field.completeName;\n        return f != null && f.contains(fieldName) ? f.controls[fieldName] : null;\n      })\n    );\n  }\n\n  private _initErrorsStreams(): void {\n    this._errorPositions = this._valueChanged.pipe(\n      withLatestFrom(this._nodes, this._form),\n      filter(v => v[2] != null && v[2].form != null),\n      map((v: [void, AjfNodeInstance[], {form: AjfForm | null, context?: any} | null]) => {\n        const nodes = v[1];\n        const form = v[2]!.form!;\n        let currentPosition = 0;\n        const errors: number[] = [];\n        nodes.forEach((node) => {\n          if (node instanceof AjfRepeatingSlideInstance) {\n            for (let i = 0 ; i < node.reps ; i ++) {\n              if (node.visible) {\n                currentPosition++;\n                if (i == 0) {\n                  node.position = currentPosition;\n                }\n                if (!node.validSlide(i)) {\n                  errors.push(currentPosition);\n                }\n              }\n            }\n          } else if (node instanceof AjfSlideInstance) {\n            if (node.visible) {\n              currentPosition++;\n              node.position = currentPosition;\n              if (!node.valid) {\n                errors.push(currentPosition);\n              }\n            }\n          }\n        });\n        form.valid = errors.length == 0;\n        this._slidesNum.next(currentPosition);\n        return errors;\n      }),\n      publishReplay(),\n      refCount()\n    );\n    this._errors = this._errorPositions.pipe(\n      map(e => e != null ? e.length : 0),\n      startWith(0),\n      publishReplay(),\n      refCount()\n    );\n  }\n\n  private _initUpdateMapStreams(): void {\n    this._visibilityNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._visibilityNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._repetitionNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._repetitionNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._conditionalBranchNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._conditionalBranchNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._formulaNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._formulaNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._validationNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._validationNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._warningNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._warningNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._filteredChoicesNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._filteredChoicesNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._triggerConditionsNodesMap =\n      (<Observable<IAjfRendererUpdateTableMapOperation>>this._triggerConditionsNodesMapUpdates)\n        .pipe(\n          scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateTableMapOperation) => {\n            return op(rmap);\n          }, {}),\n          startWith<IAjfRendererUpdateMap>({}),\n          share()\n        );\n    this._nextSlideConditionsNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._nextSlideConditionsNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n\n    this._nodesMaps = [\n      this._visibilityNodesMap,\n      this._repetitionNodesMap,\n      this._conditionalBranchNodesMap,\n      this._formulaNodesMap,\n      this._validationNodesMap,\n      this._warningNodesMap,\n      this._nextSlideConditionsNodesMap,\n      this._filteredChoicesNodesMap,\n      this._triggerConditionsNodesMap\n    ];\n  }\n\n  private _initFormStreams(): void {\n    const formObs = <Observable<{form: AjfForm | null, context?: any}>>this._form;\n    formObs\n      .pipe(map((_form) => {\n        return this._initFormGroupStreams(new FormGroup({}));\n      }))\n      .subscribe(this._formGroup);\n    formObs\n      .pipe(map((form) => {\n        return (_nodesInstances: AjfNodeInstance[]): AjfNodeInstance[] => {\n          const nodes = form != null && form.form != null ?\n            this._orderedNodesInstancesTree(\n              flattenNodes(form.form.nodes), form.form.nodes, undefined, [], form.context\n            ) : [];\n          let currentPosition = 0;\n          nodes.forEach((node) => {\n            if (node instanceof AjfRepeatingSlideInstance) {\n              for (let i = 0 ; i < node.reps ; i ++) {\n                if (node.visible) {\n                  currentPosition++;\n                  if (i == 0) {\n                    node.position = currentPosition;\n                  }\n                }\n              }\n            } else if (node instanceof AjfSlideInstance) {\n              if (node.visible) {\n                currentPosition++;\n                node.position = currentPosition;\n              }\n            }\n          });\n          return nodes;\n        };\n      }))\n      .subscribe(this._nodesUpdates);\n  }\n\n  private _initNodeInstance(\n    allNodes: AjfNode[] | AjfNodeInstance[], node: AjfNode,\n    prefix: number[], context: any, branchVisibility = true\n  ): AjfNodeInstance | null {\n    let instance = nodeToNodeInstance(allNodes, node, prefix, context);\n    if (instance != null) {\n      if (\n        instance instanceof AjfNodeGroupInstance ||\n        instance instanceof AjfRepeatingSlideInstance\n      ) {\n        this._explodeRepeatingNode(allNodes, instance, context);\n      } else if ( instance instanceof AjfSlideInstance ) {\n        instance.nodes = this._orderedNodesInstancesTree(\n          allNodes, instance.slide.nodes, instance.slide.id, prefix, context\n        );\n      }\n      instance.updateVisibility(context, branchVisibility);\n      instance.updateConditionalBranches(context);\n      if (instance instanceof AjfFieldWithChoicesInstance) {\n        instance.updateFilteredChoices(context);\n      } else if (instance instanceof AjfFieldInstance) {\n        instance.value = context[instance.completeName];\n        instance.updateFieldState(context);\n      }\n      this._addNodeInstance(instance);\n    }\n    return instance;\n  }\n\n  private _adjustReps(\n    allNodes: AjfNode[] | AjfNodeInstance[],\n    instance: AjfNodeGroupInstance | AjfRepeatingSlideInstance,\n    oldReps: number, context: any\n  ): { added: AjfNodeInstance[] | null, removed: AjfNodeInstance[] | null } {\n    const newReps = instance.reps;\n    const result: { added: AjfNodeInstance[] | null, removed: AjfNodeInstance[] | null } = {\n      added: null,\n      removed: null\n    };\n    if (oldReps < newReps) {\n      const newNodes: AjfNodeInstance[] = [];\n      if (instance.nodes == null) {\n        instance.nodes = [];\n      }\n      if (instance instanceof AjfNodeGroupInstance) {\n        const node = new AjfEmptyField({\n          'label': instance.node.label\n        });\n        const newInstance = this._initNodeInstance(\n          allNodes, node, instance.prefix.slice(0), context);\n        if (newInstance != null) {\n          instance.nodes.push(newInstance);\n        }\n      }\n      for (let i = oldReps ; i < newReps ; i++) {\n        const prefix = instance.prefix.slice(0);\n        const group = instance instanceof AjfNodeGroupInstance ?\n          instance.nodeGroup : instance.slide;\n        prefix.push(i);\n        orderedNodes(group.nodes, instance.node.id)\n          .forEach((n) => {\n            const newInstance = this._initNodeInstance(allNodes, n, prefix, context);\n            if (newInstance != null) {\n              newNodes.push(newInstance);\n              instance.nodes.push(newInstance);\n            }\n          });\n        this._addNodeInstance(instance);\n      }\n      result.added = newNodes;\n    } else if (oldReps > newReps) {\n      let nodesNum = instance.nodes.length / oldReps;\n      if (instance instanceof AjfNodeGroupInstance) {\n        nodesNum ++;\n      }\n      result.removed = instance.nodes.splice(newReps * nodesNum, nodesNum);\n      result.removed.forEach((n => {\n        this._removeNodeInstance(n);\n      }));\n    }\n    if (oldReps != newReps && instance.formulaReps == null) {\n      const fg = this._formGroup.getValue();\n      if (fg != null && fg.contains(instance.completeName)) {\n        fg.controls[instance.completeName].setValue(instance.reps);\n      }\n    }\n    instance.flatNodes = flattenNodesInstances(instance.nodes);\n    if (instance instanceof AjfRepeatingSlideInstance) {\n      const slideNodes: AjfNodeInstance[][] = [];\n      const nodesPerSlide = instance.nodesPerSlide;\n      for (let i = 0 ; i < instance.reps ; i++) {\n        const startNode = i * nodesPerSlide;\n        slideNodes.push(instance.nodes.slice(startNode, startNode + nodesPerSlide));\n      }\n      instance.slideNodes = slideNodes;\n    }\n    return result;\n  }\n\n  private _updateFormValueAndValidity(): void {\n    this._nodesUpdates.asObservable()\n    .pipe(\n      withLatestFrom(this._formGroup),\n      filter(( values: [IAjfNodesInstancesOperation, FormGroup | null ]) => values[1] !== null)\n    )\n    .subscribe(( values: [IAjfNodesInstancesOperation, FormGroup | null ]) => {\n      const form: FormGroup = <FormGroup>values[1];\n      form.updateValueAndValidity();\n    });\n  }\n\n  private _explodeRepeatingNode(\n    allNodes: AjfNode[] | AjfNodeInstance[],\n    instance: AjfNodeGroupInstance | AjfRepeatingSlideInstance,\n    context: any\n  ) {\n    const oldReps = instance.updateRepsNum(context);\n    if (oldReps !== instance.reps) {\n      this._adjustReps(allNodes, instance, oldReps, context);\n    }\n  }\n\n  private _orderedNodesInstancesTree(\n    allNodes: AjfNode[] | AjfNodeInstance[],\n    nodes: AjfNode[], parent: number | null = null,\n    prefix: number[] = [], context: any\n  ): AjfNodeInstance[] {\n    let nodesInstances: AjfNodeInstance[] = [];\n    const curSuffix = prefix.length > 0 ? '__' + prefix.join('__') : '';\n    orderedNodes(nodes, parent)\n      .forEach((node: AjfNode) => {\n        const parentNodeInstance = nodesInstances.find(\n          ni => ni.node.id == node.parent && ni.suffix == curSuffix);\n        const branchVisibility = parentNodeInstance != null ?\n          parentNodeInstance.verifiedBranch != null &&\n          parentNodeInstance.verifiedBranch == node.parentNode : true;\n        const nni = this._initNodeInstance(allNodes, node, prefix, context, branchVisibility);\n        if (nni != null) {\n          nodesInstances.push(nni);\n        }\n      });\n    return nodesInstances;\n  }\n\n  private _formValueDelta(oldValue: any, newValue: any): string[] {\n    return Object.keys(newValue)\n      .filter((k) => oldValue[k] !== newValue[k]);\n  }\n\n  private _initFormGroupStreams(formGroup: FormGroup): FormGroup {\n    this._formGroupSubscription.unsubscribe();\n    let init = true;\n    let initForm = true;\n    this._formInitEvent.emit(AjfFormInitStatus.Initializing);\n    this._formGroupSubscription = formGroup.valueChanges.pipe(\n      startWith<any>({}),\n      pairwise(),\n      debounceTime(200),\n      withLatestFrom<\n        [any, any], [[any, any], IAjfRendererUpdateMap, IAjfRendererUpdateMap,\n        IAjfRendererUpdateMap, IAjfRendererUpdateMap, IAjfRendererUpdateMap,\n        IAjfRendererUpdateMap, IAjfRendererUpdateMap, IAjfRendererUpdateMap,\n        IAjfRendererUpdateMap, AjfNodeInstance[]]\n      >(...(this._nodesMaps), this._flatNodes)\n    ).subscribe((\n        v: [[any, any], IAjfRendererUpdateMap, IAjfRendererUpdateMap,\n        IAjfRendererUpdateMap, IAjfRendererUpdateMap, IAjfRendererUpdateMap,\n        IAjfRendererUpdateMap, IAjfRendererUpdateMap, IAjfRendererUpdateMap,\n        IAjfRendererUpdateMap, AjfNodeInstance[]]\n      ) => {\n        const oldFormValue = init && {} || v[0][0];\n        init = false;\n        const newFormValue = v[0][1];\n        const visibilityMap = v[1];\n        const repetitionMap = v[2];\n        const conditionalBranchesMap = v[3];\n        const formulaMap = v[4];\n        const validationMap = v[5];\n        const warningMap = v[6];\n        const nextSlideConditionsMap = v[7];\n        const filteredChoicesMap = v[8];\n        const triggerConditionsMap = v[9];\n        const nodes = v[10];\n\n        const delta = this._formValueDelta(oldFormValue, newFormValue);\n        const deltaLen = delta.length;\n        let updatedNodes: AjfNodeInstance[] = [];\n\n        delta.forEach((fieldName) => {\n          updatedNodes = updatedNodes.concat(nodes.filter(n => n.completeName === fieldName));\n          if (visibilityMap[fieldName] != null) {\n            visibilityMap[fieldName].forEach(nodeInstance => {\n              const visibilityChanged = nodeInstance.updateVisibility(newFormValue);\n              if (visibilityChanged && !nodeInstance.visible) {\n                const fg = this._formGroup.getValue();\n                if (fg != null) {\n                  const s = timer(200).subscribe(() => {\n                    if (s && !s.closed) { s.unsubscribe(); }\n                    fg.controls[nodeInstance.completeName].setValue(null);\n                  });\n                }\n                if (nodeInstance instanceof AjfFieldInstance) {\n                  (<AjfFieldInstance>nodeInstance).value = null;\n                }\n              } else if (\n                visibilityChanged && nodeInstance.visible &&\n                nodeInstance instanceof AjfFieldInstance\n              ) {\n                const fg = this._formGroup.getValue();\n                const res = (<AjfFieldInstance>nodeInstance).updateFormula(newFormValue);\n                if (fg != null && res.changed) {\n                  fg.controls[nodeInstance.completeName].setValue(res.value);\n                }\n              }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (repetitionMap[fieldName] != null) {\n            repetitionMap[fieldName].forEach(nodeInstance => {\n              if (\n                nodeInstance instanceof AjfNodeGroupInstance ||\n                nodeInstance instanceof AjfRepeatingSlideInstance\n              ) {\n                const oldReps = nodeInstance.updateRepsNum(newFormValue);\n                if (oldReps !== nodeInstance.reps) {\n                  this._adjustReps(nodes, nodeInstance, oldReps, newFormValue);\n                }\n              }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (conditionalBranchesMap[fieldName] != null) {\n            conditionalBranchesMap[fieldName].forEach((nodeInstance) => {\n              // const branchChanged = nodeInstance.updateConditionalBranches(newFormValue);\n              nodeInstance.updateConditionalBranches(newFormValue);\n              // if (branchChanged) {\n                const verifiedBranch = nodeInstance.verifiedBranch;\n                nodeInstance.conditionalBranches.forEach((_condition, idx) => {\n                  if (idx == verifiedBranch) {\n                    this._showSubtree(newFormValue, nodes, nodeInstance, idx);\n                  } else {\n                    this._hideSubtree(newFormValue, nodes, nodeInstance, idx);\n                  }\n                });\n              // }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (formulaMap[fieldName] != null) {\n            formulaMap[fieldName].forEach((nodeInstance) => {\n              if (nodeInstance instanceof AjfFieldInstance) {\n                const res = nodeInstance.updateFormula(newFormValue);\n                const fg = this._formGroup.getValue();\n                if (fg != null && res.changed) {\n                  nodeInstance.updateValidation(newFormValue);\n                  fg.controls[nodeInstance.completeName].setValue(res.value);\n                }\n              }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (validationMap[fieldName] != null) {\n            validationMap[fieldName].forEach((nodeInstance) => {\n              if (nodeInstance instanceof AjfFieldInstance) {\n                newFormValue.$value = newFormValue[nodeInstance.completeName];\n                nodeInstance.updateValidation(\n                  newFormValue,\n                  this.currentSupplementaryInformations\n                );\n              }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (warningMap[fieldName] != null) {\n            warningMap[fieldName].forEach((nodeInstance) => {\n              if (nodeInstance instanceof AjfFieldInstance) {\n                nodeInstance.updateWarning(newFormValue);\n                if (nodeInstance.warningResults.filter(warning => warning.result).length > 0) {\n                  nodeInstance.emitTriggerWarning();\n                }\n              }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (deltaLen == 1 && nextSlideConditionsMap[fieldName] != null) {\n            if (\n              nextSlideConditionsMap[fieldName].filter((nodeInstance) => {\n                if (nodeInstance instanceof AjfFieldInstance) {\n                  return nodeInstance.updateNextSlideCondition(newFormValue);\n                }\n                return false;\n              }).length == 1\n            ) {\n              this._nextSlideTrigger.emit();\n            }\n          }\n\n          if (filteredChoicesMap[fieldName] != null) {\n            filteredChoicesMap[fieldName].forEach((nodeInstance) => {\n              if (nodeInstance instanceof AjfFieldWithChoicesInstance) {\n                nodeInstance.updateFilteredChoices(newFormValue);\n              }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (deltaLen == 1 && triggerConditionsMap[fieldName] != null) {\n            const res = triggerConditionsMap[fieldName]\n              .filter((nodeInstance) => {\n                return nodeInstance instanceof AjfFieldWithChoicesInstance &&\n                  nodeInstance.updateTriggerConditions(newFormValue);\n              });\n            if (res.length == 1) {\n              (<AjfFieldWithChoicesInstance>res[0]).emitTriggerSelection();\n            }\n          }\n        });\n        updatedNodes.forEach(n => n.triggerUpdate());\n        if (initForm) {\n          initForm = false;\n          this._formInitEvent.emit(AjfFormInitStatus.Complete);\n        }\n        this._valueChanged.next();\n      });\n    return formGroup;\n  }\n\n  private _showSubtree(\n    context: any, nodes: AjfNodeInstance[], node: AjfNodeInstance, branch?: number\n  ) {\n    this._updateSubtreeVisibility(context, nodes, node, true, branch);\n  }\n\n  private _hideSubtree(\n    context: any, nodes: AjfNodeInstance[], node: AjfNodeInstance, branch?: number\n  ) {\n    this._updateSubtreeVisibility(context, nodes, node, false, branch);\n  }\n\n  private _updateSubtreeVisibility(\n    context: any, nodes: AjfNodeInstance[], node: AjfNodeInstance,\n    visible: boolean, branch?: number\n  ) {\n    let subNodes: AjfNodeInstance[];\n    if (branch != null) {\n      subNodes = nodes.filter(\n        n => {\n          return n.suffix == node.suffix && n.node.parent == node.node.id &&\n            n.node.parentNode == branch;\n        }\n      );\n    } else {\n      subNodes = nodes.filter(n => n.suffix == node.suffix && n.node.parent == node.node.id);\n    }\n    const isContainer = isContainerNode(node.node);\n    subNodes.forEach((n) => {\n      if (\n        !isContainer ||\n        (isContainer && (<AjfNodeGroup>node.node).nodes.find(cn => cn.id == n.node.id) == null)\n      ) {\n        n.updateVisibility(context, visible);\n        if (n instanceof AjfFieldInstance) {\n          (<AjfFieldInstance>n).updateFormula(context);\n        }\n        this._updateSubtreeVisibility(context, nodes, n, visible);\n      }\n    });\n  }\n\n  private _initNodesStreams(): void {\n    this._nodes = this._nodesUpdates.pipe(\n      scan((nodes: AjfNodeInstance[], op: IAjfNodesInstancesOperation) => {\n        return op(nodes);\n      }, []),\n      share()\n    );\n    this._flatNodesTree = this._nodes.pipe(\n      map(nodes => flattenNodesTree(nodes)),\n      share()\n    );\n    this._flatNodes = this._flatNodesTree.pipe(\n      map(slides => {\n        let nodes: IAjfNodeInstance[] = [];\n        slides.forEach(s => {\n          nodes.push(s);\n          nodes = nodes.concat(s.flatNodes);\n        });\n        return nodes;\n      }),\n      share()\n    );\n  }\n\n  private _removeNodeInstance(nodeInstance: AjfNodeInstance): AjfNodeInstance {\n    const nodeName = nodeInstance.completeName;\n    this._removeNodesVisibilityMapIndex(nodeName);\n    this._removeNodesRepetitionMapIndex(nodeName);\n    this._removeNodesConditionalBranchMapIndex(nodeName);\n    this._removeNodesFormulaMapIndex(nodeName);\n    this._removeNodesValidationMapIndex(nodeName);\n    this._removeNodesWarningMapIndex(nodeName);\n    this._removeNodesNextSlideConditionsMapIndex(nodeName);\n    this._removeNodesFilteredChoicesMapIndex(nodeName);\n    this._removeNodesTriggerConditionsMapIndex(nodeName);\n    if (nodeInstance instanceof AjfSlideInstance) {\n      return this._removeSlideInstance(nodeInstance);\n    } else if (isRepeatingNode(nodeInstance.node)) {\n      this._removeNodeGroupInstance(<AjfNodeGroupInstance | AjfRepeatingSlideInstance>nodeInstance);\n    } else if (nodeInstance instanceof AjfFieldInstance) {\n      this._removeFieldInstance(nodeInstance);\n    }\n\n    return nodeInstance;\n  }\n\n  private _removeSlideInstance(slideInstance: AjfSlideInstance): AjfSlideInstance {\n    const slide = slideInstance.slide;\n    if (slide.visibility != null) {\n      this._removeFromNodesVisibilityMap(slideInstance, slide.visibility.condition);\n    }\n    slideInstance.conditionalBranches.forEach((conditionalBranch: AjfCondition) => {\n      this._removeFromNodesConditionalBranchMap(slideInstance, conditionalBranch.condition);\n    });\n    return slideInstance;\n  }\n\n  private _removeNodeGroupInstance(\n    nodeGroupInstance: AjfNodeGroupInstance | AjfRepeatingSlideInstance\n  ): AjfNodeGroupInstance | AjfRepeatingSlideInstance {\n    const nodeGroup = nodeGroupInstance instanceof AjfNodeGroupInstance ?\n      nodeGroupInstance.nodeGroup : nodeGroupInstance.slide;\n    if (nodeGroup.visibility != null) {\n      this._removeFromNodesVisibilityMap(nodeGroupInstance, nodeGroup.visibility.condition);\n    }\n    if (nodeGroupInstance.formulaReps != null && nodeGroup.formulaReps != null) {\n      this._removeFromNodesRepetitionMap(nodeGroupInstance, nodeGroup.formulaReps.formula);\n    }\n    return nodeGroupInstance;\n  }\n\n  private _removeFieldInstance(fieldInstance: AjfFieldInstance): AjfFieldInstance {\n    const formGroup = this._formGroup.getValue();\n    const fieldInstanceName = fieldInstance.completeName;\n    if (formGroup != null && formGroup.contains(fieldInstanceName)) {\n      formGroup.removeControl(fieldInstanceName);\n    }\n    if (fieldInstance.validation != null) {\n      this._validationNodesMapUpdates.next((vmap: IAjfRendererUpdateMap): IAjfRendererUpdateMap => {\n          if (vmap[fieldInstanceName] == null) {\n            delete vmap[fieldInstanceName];\n          }\n          return vmap;\n        });\n    }\n\n    if (fieldInstance.visibility != null) {\n      this._removeFromNodesVisibilityMap(fieldInstance, fieldInstance.visibility.condition);\n    }\n\n    fieldInstance.conditionalBranches.forEach((conditionalBranch: AjfCondition) => {\n      this._removeFromNodesConditionalBranchMap(fieldInstance, conditionalBranch.condition);\n    });\n\n    if (fieldInstance.formula != null) {\n      this._removeFromNodesFormulaMap(fieldInstance, fieldInstance.formula.formula);\n    }\n\n    if (fieldInstance instanceof AjfNodeGroupInstance) {\n      if (fieldInstance.formulaReps != null) {\n        this._removeFromNodesRepetitionMap(fieldInstance, fieldInstance.formulaReps.formula);\n      }\n    }\n\n    if (fieldInstance.validation != null && fieldInstance.validation.conditions != null) {\n      fieldInstance.validation.conditions.forEach((condition) => {\n        this._removeFromNodesValidationMap(fieldInstance, condition.condition);\n      });\n    }\n\n    if (fieldInstance.warning != null) {\n      fieldInstance.warning.conditions.forEach((condition) => {\n        this._removeFromNodesWarningMap(fieldInstance, condition.condition);\n      });\n    }\n\n    if (fieldInstance.nextSlideCondition != null) {\n      this._removeFromNodesNextSlideConditionsMap(\n        fieldInstance, fieldInstance.nextSlideCondition.condition\n      );\n    }\n\n    if (\n      fieldInstance instanceof AjfFieldWithChoicesInstance && fieldInstance.choicesFilter != null\n    ) {\n      this._removeFromNodesFilteredChoicesMap(fieldInstance, fieldInstance.choicesFilter.formula);\n      if (fieldInstance.triggerConditions != null) {\n        fieldInstance.triggerConditions.forEach((condition) => {\n          this._removeFromNodesTriggerConditionsMap(fieldInstance, condition.condition);\n        });\n      }\n    }\n\n    return fieldInstance;\n  }\n\n  private _addNodeInstance(nodeInstance: AjfNodeInstance): AjfNodeInstance {\n    if (\n      nodeInstance instanceof AjfRepeatingSlideInstance ||\n      nodeInstance instanceof AjfNodeGroupInstance\n    ) {\n      return this._addNodeGroupInstance(nodeInstance);\n    } else if (nodeInstance instanceof AjfSlideInstance) {\n      return this._addSlideInstance(nodeInstance);\n    } else if (nodeInstance instanceof AjfFieldInstance) {\n      return this._addFieldInstance(nodeInstance);\n    }\n\n    return nodeInstance;\n  }\n\n  private _addFieldInstance(fieldInstance: AjfFieldInstance): AjfFieldInstance {\n    const formGroup = this._formGroup.getValue();\n    const fieldInstanceName = fieldInstance.completeName;\n    if (formGroup != null && !formGroup.contains(fieldInstanceName)) {\n      const control = new FormControl();\n      control.setValue(fieldInstance.value);\n      formGroup.registerControl(fieldInstanceName, control);\n    }\n    if (\n      formGroup != null && fieldInstance instanceof AjfTableFieldInstance\n      && (<AjfTableField>fieldInstance.node).editable\n    ) {\n      let node = <AjfTableField>fieldInstance.node;\n      let value: FormControl[][] = [];\n      node.rows.forEach((row) => {\n        let r: FormControl[] = [];\n        row.forEach((k) => {\n          const control = new FormControl();\n          control.setValue(fieldInstance.context[k]);\n          formGroup!.registerControl(k, control);\n          r.push(control);\n        });\n        value.push(r);\n      });\n      fieldInstance.controls = value;\n    }\n    if (fieldInstance.validation != null) {\n      this._validationNodesMapUpdates.next((vmap: IAjfRendererUpdateMap): IAjfRendererUpdateMap => {\n          if (vmap[fieldInstanceName] == null) {\n            vmap[fieldInstanceName] = [];\n          }\n          if (vmap[fieldInstanceName].indexOf(fieldInstance) == -1) {\n            vmap[fieldInstanceName].push(fieldInstance);\n          }\n          return vmap;\n        });\n    }\n\n    if (fieldInstance.visibility != null) {\n      this._addToNodesVisibilityMap(fieldInstance, fieldInstance.visibility.condition);\n    }\n\n    fieldInstance.conditionalBranches.forEach((conditionalBranch: AjfCondition) => {\n      this._addToNodesConditionalBranchMap(fieldInstance, conditionalBranch.condition);\n    });\n\n    if (fieldInstance.formula != null) {\n      this._addToNodesFormulaMap(fieldInstance, fieldInstance.formula.formula);\n    }\n\n    if (fieldInstance instanceof AjfNodeGroupInstance) {\n      if (fieldInstance.formulaReps != null) {\n        this._addToNodesRepetitionMap(fieldInstance, fieldInstance.formulaReps.formula);\n      }\n    }\n\n    if (fieldInstance.validation != null && fieldInstance.validation.conditions != null) {\n      fieldInstance.validation.conditions.forEach((condition) => {\n        this._addToNodesValidationMap(fieldInstance, condition.condition);\n      });\n    }\n\n    if (fieldInstance.warning != null) {\n      fieldInstance.warning.conditions.forEach((condition) => {\n        this._addToNodesWarningMap(fieldInstance, condition.condition);\n      });\n    }\n\n    if (fieldInstance.nextSlideCondition != null) {\n      this._addToNodesNextSlideConditionsMap(\n        fieldInstance, fieldInstance.nextSlideCondition.condition\n      );\n    }\n\n    if (fieldInstance instanceof AjfFieldWithChoicesInstance) {\n      if (fieldInstance.choicesFilter != null) {\n        this._addToNodesFilteredChoicesMap(fieldInstance, fieldInstance.choicesFilter.formula);\n      }\n      if (fieldInstance.triggerConditions != null) {\n        fieldInstance.triggerConditions.forEach((condition: AjfCondition) => {\n          this._addToNodesTriggerConditionsMap(fieldInstance, condition.condition);\n        });\n      }\n    }\n\n    return fieldInstance;\n  }\n\n  private _addSlideInstance(slideInstance: AjfSlideInstance): AjfSlideInstance {\n    const slide = slideInstance.slide;\n    if (slide.visibility != null) {\n      this._addToNodesVisibilityMap(slideInstance, slide.visibility.condition);\n    }\n    slideInstance.conditionalBranches.forEach((conditionalBranch: AjfCondition) => {\n      this._addToNodesConditionalBranchMap(slideInstance, conditionalBranch.condition);\n    });\n    return slideInstance;\n  }\n\n  private _addNodeGroupInstance(\n    nodeGroupInstance: AjfNodeGroupInstance | AjfRepeatingSlideInstance\n  ): AjfNodeGroupInstance | AjfRepeatingSlideInstance {\n    const nodeGroup = nodeGroupInstance instanceof AjfNodeGroupInstance ?\n      nodeGroupInstance.nodeGroup : nodeGroupInstance.slide;\n    if (nodeGroup.visibility != null) {\n      this._addToNodesVisibilityMap(nodeGroupInstance, nodeGroup.visibility.condition);\n    }\n    nodeGroupInstance.conditionalBranches.forEach((conditionalBranch: AjfCondition) => {\n      this._addToNodesConditionalBranchMap(nodeGroupInstance, conditionalBranch.condition);\n    });\n    if (nodeGroupInstance.formulaReps != null) {\n      if (nodeGroup.formulaReps != null) {\n        this._addToNodesRepetitionMap(nodeGroupInstance, nodeGroup.formulaReps.formula);\n      }\n    } else {\n      let formGroup = this._formGroup.getValue();\n      let nodeGroupInstanceName = nodeGroupInstance.completeName;\n      if (formGroup != null && !formGroup.contains(nodeGroupInstanceName)) {\n        const control = new FormControl();\n        control.setValue(nodeGroupInstance.reps);\n        formGroup.registerControl(nodeGroupInstanceName, control);\n      }\n    }\n    return nodeGroupInstance;\n  }\n\n  private _removeNodesVisibilityMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._visibilityNodesMapUpdates, index);\n  }\n\n  private _removeNodesRepetitionMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._repetitionNodesMapUpdates, index);\n  }\n\n  private _removeNodesConditionalBranchMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._conditionalBranchNodesMapUpdates, index);\n  }\n\n  private _removeNodesFormulaMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._formulaNodesMapUpdates, index);\n  }\n\n  private _removeNodesValidationMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._validationNodesMapUpdates, index);\n  }\n\n  private _removeNodesWarningMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._warningNodesMapUpdates, index);\n  }\n\n  private _removeNodesFilteredChoicesMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._filteredChoicesNodesMapUpdates, index);\n  }\n\n  private _removeNodesTriggerConditionsMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._triggerConditionsNodesMapUpdates, index);\n  }\n\n  private _removeNodesNextSlideConditionsMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._nextSlideConditionsNodesMapUpdates, index);\n  }\n\n  private _removeNodesMapIndex(nodesMap: Subject<IAjfRendererUpdateMapOperation>, index: string) {\n    nodesMap.next((vmap: IAjfRendererUpdateMap): IAjfRendererUpdateMap => {\n      if (Object.keys(vmap).indexOf(index) > -1) {\n        delete vmap[index];\n      }\n      return vmap;\n    });\n  }\n\n  private _removeFromNodesVisibilityMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._removeFromNodesMap(this._visibilityNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesRepetitionMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._removeFromNodesMap(this._repetitionNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesConditionalBranchMap(\n    nodeInstance: AjfNodeInstance, formula: string\n  ): void {\n    this._removeFromNodesMap(this._conditionalBranchNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesFormulaMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._removeFromNodesMap(this._formulaNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesValidationMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._removeFromNodesMap(this._validationNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesWarningMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._removeFromNodesMap(this._warningNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesFilteredChoicesMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._removeFromNodesMap(this._filteredChoicesNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesTriggerConditionsMap(\n    nodeInstance: AjfNodeInstance, formula: string\n  ): void {\n    this._removeFromNodesMap(this._filteredChoicesNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesNextSlideConditionsMap(\n    nodeInstance: AjfNodeInstance, formula: string\n  ): void {\n    this._removeFromNodesMap(this._nextSlideConditionsNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesMap(\n    nodesMap: Subject<IAjfRendererUpdateMapOperation>, nodeInstance: AjfNodeInstance,\n    formula: string\n  ): void {\n    let tokens = tokenize(formula)\n      .filter((token: Token) => token.type == 'Identifier' && token.value != '$value');\n    if (tokens.length > 0) {\n      nodesMap.next((vmap: IAjfRendererUpdateMap): IAjfRendererUpdateMap => {\n        tokens.forEach((token: Token) => {\n          let tokenName = token.value;\n          if (vmap[tokenName] != null) {\n            const idx = vmap[tokenName].indexOf(nodeInstance);\n            if (idx > -1) {\n              vmap[tokenName].splice(idx, 1);\n              if (vmap[tokenName].length == 0) {\n                delete vmap[tokenName];\n              }\n            }\n          }\n        });\n        return vmap;\n      });\n    }\n  }\n\n  private _addToNodesVisibilityMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._visibilityNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesRepetitionMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._repetitionNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesConditionalBranchMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._conditionalBranchNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesFormulaMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._formulaNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesValidationMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._validationNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesWarningMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._warningNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesFilteredChoicesMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._filteredChoicesNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesTriggerConditionsMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._triggerConditionsNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesNextSlideConditionsMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._nextSlideConditionsNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesMap(\n    nodesMap: Subject<IAjfRendererUpdateMapOperation>, nodeInstance: AjfNodeInstance,\n    formula: string\n  ): void {\n    let tokens = tokenize(formula)\n      .filter((token: Token) => token.type == 'Identifier' && token.value != '$value');\n    if (tokens.length > 0) {\n      nodesMap.next((vmap: IAjfRendererUpdateMap): IAjfRendererUpdateMap => {\n        tokens.forEach((token: Token) => {\n          let tokenName = token.value;\n          if (vmap[tokenName] == null) {\n            vmap[tokenName] = [];\n          }\n          if (vmap[tokenName].indexOf(nodeInstance) === -1) {\n            vmap[tokenName].push(nodeInstance);\n          }\n        });\n        return vmap;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {\n  AfterViewInit, AfterViewChecked, ChangeDetectorRef, EventEmitter, OnDestroy, QueryList\n} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\n\nimport {AjfPageSlider, AjfPageSliderOrientation} from '@ajf/core/page-slider';\nimport {coerceBooleanProperty} from '@ajf/core/utils';\n\nimport {Observable, Subscription} from 'rxjs';\nimport {delayWhen, map, withLatestFrom} from 'rxjs/operators';\n\nimport {AjfFormField} from './field';\nimport {AjfFormInitStatus, AjfFormRendererService} from './form-renderer';\nimport {AjfForm} from './forms';\nimport {AjfFieldType} from './nodes';\nimport {\n  AjfNodeGroupInstance, AjfNodeInstance, AjfRepeatingSlideInstance, IAjfSlideInstance\n} from './nodes-instances';\n\nexport class AjfFormActionEvent {\n  source: AjfFormRenderer;\n  value: Object;\n  action: string;\n}\n\nexport abstract class AjfFormRenderer implements AfterViewChecked, AfterViewInit, OnDestroy {\n  // formGroup is an Observable FormGroup type\n  readonly formGroup: Observable<FormGroup | null>;\n\n  //  slides is an observable AjfSlide array type\n  readonly slides: Observable<IAjfSlideInstance[]>;\n  readonly slidesNum: Observable<number>;\n  readonly errors: Observable<number>;\n  readonly formIsInit: Observable<boolean>;\n\n  // ajfFieldTypes [ Text, Number, Boolean, SingleChoice, MultipleChoice,\n  // Formula, Empty, Composed, LENGTH ]\n  readonly ajfFieldTypes = AjfFieldType;\n\n  title: string;\n\n  private _orientationChange: EventEmitter<AjfPageSliderOrientation>\n    = new EventEmitter<AjfPageSliderOrientation>();\n  readonly orientationChange: Observable<AjfPageSliderOrientation> =\n    this._orientationChange.asObservable();\n\n  private _saveDisabled: boolean = false;\n  get saveDisabled(): boolean { return this._saveDisabled; }\n  set saveDisabled(saveDisabled: boolean) {\n    this._saveDisabled = coerceBooleanProperty(saveDisabled);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _hasStartMessage = false;\n  get hasStartMessage(): boolean { return this._hasStartMessage; }\n  set hasStartMessage(hasStartMessage: boolean) {\n    this._hasStartMessage = coerceBooleanProperty(hasStartMessage);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _hasEndMessage = false;\n  get hasEndMessage(): boolean { return this._hasEndMessage; }\n  set hasEndMessage(hasEndMessage: boolean) {\n    this._hasEndMessage = coerceBooleanProperty(hasEndMessage);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _hideTopToolbar = false;\n  get hideTopToolbar(): boolean { return this._hideTopToolbar; }\n  set hideTopToolbar(hideTopToolbar: boolean) {\n    this._hideTopToolbar = coerceBooleanProperty(hideTopToolbar);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _hideBottomToolbar = false;\n  get hideBottompToolbar(): boolean { return this._hideBottomToolbar; }\n  set hideBottomToolbar(hideBottomToolbar: boolean) {\n    this._hideBottomToolbar = coerceBooleanProperty(hideBottomToolbar);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _hideNavigationButtons = false;\n  get hideNavigationButtons(): boolean { return this._hideNavigationButtons; }\n  set hideNavigationButtons(hideNavigationButtons: boolean) {\n    this._hideNavigationButtons = coerceBooleanProperty(hideNavigationButtons);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _fixedOrientation = false;\n  get fixedOrientation(): boolean { return this._fixedOrientation; }\n  set fixedOrientation(fixedOrientation: boolean) {\n    this._fixedOrientation = coerceBooleanProperty(fixedOrientation);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _orientation: AjfPageSliderOrientation = 'horizontal';\n  get orientation(): AjfPageSliderOrientation { return this._orientation; }\n  set orientation(orientation: AjfPageSliderOrientation) {\n    if (orientation !== 'horizontal' && orientation !== 'vertical') { return; }\n    if (orientation !== this._orientation) {\n      this._orientation = orientation;\n      this._changeDetectorRef.markForCheck();\n      this._orientationChange.emit(this._orientation);\n    }\n  }\n\n  formSlider: AjfPageSlider;\n  fields: QueryList<AjfFormField>;\n\n  private _errorMoveEvent: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  // _errorPositions is a private subject structure that contains next and prev\n  private _errorPositions: Observable<number[]>;\n\n  // _form is a private ajFForm\n  private _form: AjfForm;\n  // _init is a private boolean\n  private _init = false;\n\n  private _nextSlideSubscription: Subscription = Subscription.EMPTY;\n  private _errorMoveSubscription: Subscription = Subscription.EMPTY;\n\n  private _formAction: EventEmitter<AjfFormActionEvent> = new EventEmitter<AjfFormActionEvent>();\n  readonly formAction: Observable<AjfFormActionEvent> = this._formAction.asObservable();\n\n  set form(form: AjfForm) {\n    this._form = form;\n\n    if (this._init) {\n      this._rendererService.setForm(this._form);\n    }\n  }\n\n  /**\n   * this constructor will init current formula by ajfBuilderService\n   */\n  constructor(\n    private _rendererService: AjfFormRendererService,\n    protected _changeDetectorRef: ChangeDetectorRef\n  ) {\n    this.formGroup = _rendererService.formGroup;\n    this.slides = _rendererService.nodesTree;\n    this._errorPositions = _rendererService.errorPositions;\n    this.errors = _rendererService.errors;\n    this.slidesNum = _rendererService.slidesNum;\n    this.formIsInit = _rendererService.formInitEvent.pipe(\n      map(e => e === AjfFormInitStatus.Complete)\n    );\n  }\n\n  isRepeatingSlide(slide: IAjfSlideInstance): boolean {\n    return slide instanceof AjfRepeatingSlideInstance;\n  }\n\n  /**\n   * this method will scroll to next error received by subscribe\n   */\n  goToNextError(): void { this._errorMoveEvent.emit(true); }\n  /**\n   * this method will scroll to prev error received by subscribe\n   */\n  goToPrevError(): void { this._errorMoveEvent.emit(false); }\n\n  /**\n   * this method will add group\n   */\n  addGroup(nodeGroup: AjfNodeGroupInstance | AjfRepeatingSlideInstance): void {\n    let s = this._rendererService.addGroup(nodeGroup).pipe(\n      delayWhen(() => this.formSlider.pageScrollFinish),\n    ).subscribe(\n        (r) => { if (r && this.formSlider != null) { this.formSlider.slide({dir: 'down'}); } },\n        (_e) => { if (s) { s.unsubscribe(); } },\n        () => { if (s) { s.unsubscribe(); } }\n      );\n  }\n\n  /**\n   * this method will remove group\n   */\n  removeGroup(nodeGroup: AjfNodeGroupInstance | AjfRepeatingSlideInstance): void {\n    let s = this._rendererService.removeGroup(nodeGroup).pipe(\n      delayWhen(() => this.formSlider.pageScrollFinish),\n    ).subscribe(\n        (r) => { if (r && this.formSlider != null) { this.formSlider.slide({dir: 'up'}); } },\n        (_e) => { if (s) { s.unsubscribe(); } },\n        () => { if (s) { s.unsubscribe(); } }\n      );\n  }\n\n  onSave(_evt: any): void {\n    this._formAction.emit({\n      source: this,\n      action: 'save',\n      value: this._rendererService.getFormValue()\n    });\n  }\n\n  onFormAction(_evt: any, action: string) {\n    this._formAction.emit({\n      source: this,\n      value: this._rendererService.getFormValue(),\n      action: action\n    });\n  }\n\n  /**\n   * this method will set current form in rederer service when init form\n   */\n  ngAfterViewInit(): void {\n    if (this._form != null) {\n      this._rendererService.setForm(this._form);\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  ngAfterViewChecked(): void {\n    if (!this._init && this.formSlider != null) {\n      this._init = true;\n\n      this._errorMoveSubscription = (<Observable<boolean>>this._errorMoveEvent).pipe(\n        withLatestFrom(this._errorPositions)\n      ).subscribe((v: [boolean, number[]]) => {\n          const move = v[0];\n          const currentPosition = this.formSlider.currentPage - (+this.hasStartMessage) + 1;\n          const errors = v[1];\n          if (errors == null) { return; }\n\n          let found = false;\n          let prevIdx = -1;\n          let nextIdx = -1;\n          let idx = 0;\n          let errorsLen = errors.length;\n          while (!found && idx < errorsLen) {\n            if (errors[idx] == currentPosition) {\n              found = true;\n              prevIdx = idx > 0 ? idx - 1 : errorsLen - 1;\n              nextIdx = idx < errorsLen - 1 ? idx + 1 : 0;\n            } else if (errors[idx] > currentPosition) {\n              found = true;\n              prevIdx = idx > 0 ? idx - 1 : errorsLen - 1;\n              nextIdx = idx;\n            }\n            idx++;\n          }\n          if (!found) {\n            prevIdx = errorsLen - 1;\n            nextIdx = 0;\n          }\n\n          this.formSlider.slide({to: move ? errors[nextIdx] - 1 : errors[prevIdx] - 1});\n          this._changeDetectorRef.detectChanges();\n        });\n\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._nextSlideSubscription.unsubscribe();\n    this._errorMoveSubscription.unsubscribe();\n    this._orientationChange.complete();\n    this._errorMoveEvent.complete();\n    this._formAction.complete();\n  }\n\n  orientationChangeHandler(orientation: AjfPageSliderOrientation): void {\n    this.orientation = orientation;\n  }\n\n  trackNodeById(_: number, node: AjfNodeInstance): string {\n    return node.completeName;\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\n\n@Pipe({name: 'boolToInt'})\nexport class BoolToIntPipe implements PipeTransform {\n  transform(value: boolean): number {\n    return value ? 1 : 0;\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\n\n@Pipe({name: 'tableRowClass'})\nexport class TableRowClass implements PipeTransform {\n  transform(value: number): string {\n    return value % 2 == 0 ? 'ajf-row-even' : 'ajf-row-odd';\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {BoolToIntPipe} from './bool-to-int';\nimport {FieldIconPipe} from './field-icon';\nimport {AjfFormRendererService} from './form-renderer';\nimport {TableRowClass} from './table-row-class';\nimport {AjfValidationService} from './validation-service';\n\n\n@NgModule({\n  declarations: [\n    BoolToIntPipe,\n    FieldIconPipe,\n    TableRowClass,\n  ],\n  exports: [\n    BoolToIntPipe,\n    FieldIconPipe,\n    TableRowClass,\n  ],\n  providers: [\n    AjfFormRendererService,\n    AjfValidationService\n  ]\n})\nexport class AjfFormsModule { }\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfJsonSerializable} from '@ajf/core/models';\nimport {deepCopy} from '@ajf/core/utils';\n\nimport {AjfAttachmentsOrigin} from './attachments';\nimport {AjfChoicesOrigin, IAjfChoicesOrigin} from './choices';\nimport {AjfNode} from './nodes';\n\n\nexport class AjfForm extends AjfJsonSerializable {\n  nodes: AjfNode[];\n  choicesOrigins: IAjfChoicesOrigin[];\n  attachmentsOrigins: AjfAttachmentsOrigin[];\n  initContext: any;\n  topBar: boolean;\n  valid = true;\n  stringIdentifier: {label: string, value: string[]}[];\n  lastSelectedLocation: boolean = true;\n  supplementaryInformations: any;\n  /**\n   * this method will load an AjfForm from json\n   * @param obj : any - object form\n   * @return AjfForm\n   */\n  static fromJson(obj: any, context?: any): AjfForm {\n    obj = deepCopy(obj);\n    if (context) {\n      context = deepCopy(context);\n      obj.initContext = context;\n    }\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('choicesOrigins') > -1 &&\n        obj.choicesOrigins instanceof Array) {\n      let cos: IAjfChoicesOrigin[] = [];\n      for (let i = 0; i < obj.choicesOrigins.length; i++) {\n        cos.push(AjfChoicesOrigin.fromJson(obj.choicesOrigins[i]));\n      }\n      obj.choicesOrigins = cos;\n    }\n\n    if (keys.indexOf('attachmentsOrigins') > -1 &&\n        obj.attachmentsOrigins instanceof Array) {\n      let cos: AjfAttachmentsOrigin[] = [];\n      for (let i = 0; i < obj.attachmentsOrigins.length; i++) {\n        cos.push(AjfAttachmentsOrigin.fromJson(obj.attachmentsOrigins[i]));\n      }\n      obj.attachmentsOrigins = cos;\n    }\n\n    if (keys.indexOf('nodes') > -1 && obj.nodes instanceof Array) {\n      let fs: AjfNode[] = [];\n      for (let i = 0; i < obj.nodes.length; i++) {\n        let nodeObj: any = obj.nodes[i];\n        let node: AjfNode;\n        node = AjfNode.fromJson(nodeObj, obj.choicesOrigins,\n                                obj.attachmentsOrigins, context);\n        fs.push(node);\n      }\n      obj.nodes = fs;\n    }\n\n    return new AjfForm(obj);\n  }\n\n  static toString(schema: any, json: any, emptyString = ''): string | null {\n    if (schema.stringIdentifier != null && schema.stringIdentifier.length > 0) {\n      let str: string[] = schema.stringIdentifier.map((s: any) => {\n        let values: string[] = [];\n        if (s.value != null && s.value.length > 0) {\n          s.value.forEach((curValue: any) => {\n            let val: any;\n            let vp: string[] = curValue.split('.');\n            let cp: any = json;\n            vp.forEach(k => {\n              if (Object.keys(cp).indexOf(k) > -1) {\n                val = cp[k];\n                cp = cp[k];\n              }\n            });\n            if (val instanceof Array && val.length > 0) {\n              val = val.join(', ');\n            }\n            if (typeof(val) === 'string' && val != null) {\n              values.push(val);\n            }\n          });\n        }\n        return `${s.label}: ${values.length > 0 ? values.join(', ')\n                                                : emptyString}`;\n      });\n      return str.join(' - ');\n    }\n    return null;\n  }\n\n  constructor(obj?: any) {\n    super();\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat(\n        [ 'nodes', 'choicesOrigins', 'stringIdentifier', 'topBar' ]);\n\n    this.nodes = obj && obj.nodes || [];\n    this.choicesOrigins = obj && obj.choicesOrigins || [];\n    this.attachmentsOrigins = obj && obj.attachmentsOrigins || [];\n    this.initContext = obj && obj.initContext || {};\n    this.stringIdentifier = obj && obj.stringIdentifier || [];\n    this.lastSelectedLocation = obj && obj.lastSelectedLocation == false ? false : true;\n    this.supplementaryInformations = obj && obj.supplementaryInformations || null;\n  }\n  /**\n   * this method will get child nodes from ajfNode\n   * @param   node : AjfNode\n   * @return ajfNode[] - the child og AjfNode\n   */\n  getChildNodes(node: AjfNode): AjfNode[] {\n    return this.nodes.filter(n => n.parent === node.id).sort(n => n.parentNode);\n  }\n  /**\n   * this method will get root node\n   * @return ajfNode - the root node\n   */\n  getRootNode(): AjfNode | null {\n    if (this.nodes == null || this.nodes.length === 0) {\n      return null;\n    }\n    let ns: AjfNode[] = this.nodes.filter(n => n.parent == null);\n    return ns.length === 1 ? ns[0] : null;\n  }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","Link","Pdf","LENGTH","AjfAttachment","obj","_label","label","_value","value","_type","type","defineProperty","AjfAttachmentsOrigin","_name","name","attachments","att","AjfAttachmentsType","push","Error","AjfAttachmentsFixedOrigin","fromJson","deepCopy","keys","indexOf","getName","_this","_super","_attachments","tslib_1.__extends","getAttachments","getTypeName","v","typeStr","toString","match","String","Number","AjfChoice","AjfJsonSerializable","AjfChoicesOrigin","jsonExportedMembers","concat","_choicesType","choicesType","AjfChoicesFixedOrigin","AjfChoicesFunctionOrigin","AjfChoicesObservableOrigin","AjfChoicesObservableArrayOrigin","getLabel","setName","setLabel","getChoicesType","guessChoicesType","cs","getChoices","_choices","getType","setChoices","choices","slice","generator","_generator","_observable","_currentChoices","_subscription","Subscription","EMPTY","self","subscribe","x","splice","destroy","unsubscribe","AjfChoicesPromiseOrigin","promise","then","AjfInvalidFieldDefinitionError","message","AjfError","factorial","f","AjfValidationResult","res","err","cVal","result","error","clientValidation","AjfValidation","errorMessage","getMaxCondition","maxValue","condition","getMinCondition","minValue","getNotEmptyCondition","getMaxDigitsCondition","getMinDigitsCondition","evaluate","context","forceFormula","AjfCondition","AjfValidationGroup","forceValue","notEmpty","maxDigits","minDigits","conditions","_i","_a","c","toJson","json","replace","map","_evaluateMaxValue","$value","_evaluateMinvalue","_evaluateNotEmpty","_evaluateConditions","forEach","cond","ctx","evaluateForceValue","wrn","warning","AjfWarning","warningMessage","getNotEmptyWarning","AjfWarningResult","AjfWarningGroup","AjfField","AjfFieldNodeLink","AjfNodeGroup","AjfSlide","AjfRepeatingSlide","AjfNode","_id","id","_parent","parent","_parentNode","parentNode","_visibility","visibility","alwaysCondition","_conditionalBranches","conditionalBranches","choicesOrigins","attachmentsOrigins","nodeType","AjfNodeType","cbs","createNode","thisObj","setConditionalBranchesNum","cbn","getMaxConditionalBranches","Math","min","Text","Boolean","SingleChoice","MultipleChoice","Formula","Empty","Date","DateInput","Time","Table","nodes","formulaReps","maxReps","minReps","_nodes","_formulaReps","_maxReps","_minReps","AjfFormula","_hasChoices","_hasAttachments","_description","description","_formula","formula","_validation","validation","_warning","_attachmentsOrigin","attachmentsOrigin","defaultValue","_size","size","_nextSlideCondition","nextSlideCondition","setHasAttachments","setEditable","_editable","_defaultValue","validateValue","hasAttachments","_nextSlide","val","AjfFormulaField","AjfFieldType","AjfMultipleChoiceField","AjfSingleChoiceField","AjfBooleanField","AjfNumberField","AjfTextField","AjfStringField","AjfDateField","AjfDateInputField","AjfTableField","AjfTimeField","fieldType","ret","AjfEmptyField","choicesFilter","origins","filter","choicesOriginRef","choicesOrigin","attachmentsOriginRef","triggerConditions","childNode","parentField","editable","setHasChoices","hasChoices","HTML","_","parseInt","parseFloat","AjfFieldWithChoices","forceExpanded","forceNarrow","max","tslib_1.__assign","l","good","total","minDate","maxDate","minDateValue","maxDateValue","columnLabels","rowLabels","hideEmptyRows","rows","fieldIconName","toLowerCase","FieldIconPipe","transform","field","Pipe","args","AjfNodeInstance","params","_context","_updatedEvt","EventEmitter","_updated","asObservable","_node","node","_prefix","prefix","_visible","visible","join","suffix","setNode","triggerUpdate","emit","updateVisibility","branchVisibility","oldVisibility","newVisibility","updateConditionalBranches","oldBranch","verifiedBranch","idx","found","AjfFieldInstance","reps","_validationResults","_warningResults","_triggerWarning","ReplaySubject","completeName","defVal","updateFormula","newValue","oldValue","changed","_makeSupplementaryContext","supplementaryInformations","key","updateValidation","valid","validationResults","reduce","prev","updateWarning","updateNextSlideCondition","updateFieldState","emitTriggerWarning","next","AjfFieldWithChoicesInstance","_triggerSelection","_firstTriggerConditionDone","filteredChoices","updateFilteredChoices","$choiceValue","updateTriggerConditions","conditionsNum","emitTriggerSelection","AjfNodeGroupInstance","_reps","_repsArr","v1","v2","setNodeGroup","nodeGroup","updateRepsNum","oldReps","ctxReps","newReps","AjfSlideInstance","flatNodes","setSlide","slide","AjfRepeatingSlideInstance","canRemoveGroup","canAddGroup","validSlide","slideNodes","slidePosition","position","AjfTableFieldInstance","setValue","_hideEmptyRows","_matrixFormControl","_matrixFormControlWithLabels","_controlsWithLabels","rowLabel","unshift","_matrixValue","_v","value_1","rowIndex_1","row","k","column","a","AjfDateFieldInstance","AjfEmptyFieldInstance","AjfFormFieldValueChanged","AjfFormField","_rendererService","_changeDetectionRef","ajfFieldTypes","_valueChanged","_triggerSelectionSubscription","_triggerWarningSubscription","_fieldUpdateSubscription","_fieldInstance","fieldInstance","updated","detectChanges","e","ngOnInit","control","getControl","triggerWarning","pipe","withLatestFrom","showWarningAlertPrompt","warningResults","w","r","_e","ngAfterViewInit","triggerSelection","ngOnDestroy","singleChoiceSelect","_isOpen","multipleChoiceSelect","open","orderedNodes","newNodes","sort","n1","n2","isRepeatingNode","isContainerNode","flattenNodes","flattenNodesInstances","includeGroups","nodeInstance","getAncestorRepeatingNodes","allNodes","nodeGroups","curParent","find","getAncestorRepeatingNodesNames","names","sn","flattenNodesTree","flatTree","normalizeFormula","ancestorsNames","ancestorsNameStrings","tokenize","token","RegExp","getInstanceCondition","oldCondition","newCondition","getInstanceFormula","oldFormula","newFormula","getInstanceConditions","newConditions","getInstanceValidations","validations","newValidations","oldValidation","newValidation","getInstanceWarnings","warnings","newWarnings","oldWarning","newWarning","nodeToNodeInstance","instance","isContainerNodeInstance","AjfValidationService","_baseUtilFunctions","_functions","_functionsStr","_initFunctions","addFunction","addFunctionHandler","fn","undefined","AjfValidatedProperty","utils","functionsStr","UTIL_FUNCTIONS","Injectable","Initializing","Complete","AjfFormRendererService","_visibilityNodesMapUpdates","Subject","_repetitionNodesMapUpdates","_conditionalBranchNodesMapUpdates","_formulaNodesMapUpdates","_validationNodesMapUpdates","_warningNodesMapUpdates","_filteredChoicesNodesMapUpdates","_triggerConditionsNodesMapUpdates","_nextSlideConditionsNodesMapUpdates","_formInitEvent","formInitEvent","_formGroup","BehaviorSubject","formGroup","_form","_nodesUpdates","_formGroupSubscription","_nextSlideTrigger","nextSlideTrigger","_slidesNum","slidesNum","_initUpdateMapStreams","_initNodesStreams","_initErrorsStreams","_initFormStreams","_updateFormValueAndValidity","_flatNodesTree","_errorPositions","_errors","form","getValue","setForm","initContext","currentForm","getFormValue","addGroup","group","Observable","subscriber","complete","_adjustReps","removeGroup","fieldName","contains","controls","currentPosition","errors","publishReplay","refCount","startWith","_visibilityNodesMap","scan","rmap","op","share","_repetitionNodesMap","_conditionalBranchNodesMap","_formulaNodesMap","_validationNodesMap","_warningNodesMap","_filteredChoicesNodesMap","_triggerConditionsNodesMap","_nextSlideConditionsNodesMap","_nodesMaps","formObs","_initFormGroupStreams","FormGroup","_nodesInstances","_orderedNodesInstancesTree","_initNodeInstance","_explodeRepeatingNode","_addNodeInstance","added","removed","newNodes_1","newInstance","_loop_1","this_1","nodesNum","_removeNodeInstance","fg","nodesPerSlide","startNode","values","updateValueAndValidity","nodesInstances","curSuffix","parentNodeInstance","ni","nni","_formValueDelta","init","initForm","AjfFormInitStatus","valueChanges","pairwise","debounceTime","_flatNodes","oldFormValue","newFormValue","visibilityMap","repetitionMap","conditionalBranchesMap","formulaMap","validationMap","warningMap","nextSlideConditionsMap","filteredChoicesMap","triggerConditionsMap","delta","deltaLen","updatedNodes","visibilityChanged","fg_1","s_1","timer","closed","_condition","_showSubtree","_hideSubtree","currentSupplementaryInformations","branch","_updateSubtreeVisibility","subNodes","isContainer","cn","slides","nodeName","_removeNodesVisibilityMapIndex","_removeNodesRepetitionMapIndex","_removeNodesConditionalBranchMapIndex","_removeNodesFormulaMapIndex","_removeNodesValidationMapIndex","_removeNodesWarningMapIndex","_removeNodesNextSlideConditionsMapIndex","_removeNodesFilteredChoicesMapIndex","_removeNodesTriggerConditionsMapIndex","_removeSlideInstance","_removeNodeGroupInstance","_removeFieldInstance","slideInstance","_removeFromNodesVisibilityMap","conditionalBranch","_removeFromNodesConditionalBranchMap","nodeGroupInstance","_removeFromNodesRepetitionMap","fieldInstanceName","removeControl","vmap","_removeFromNodesFormulaMap","_removeFromNodesValidationMap","_removeFromNodesWarningMap","_removeFromNodesNextSlideConditionsMap","_removeFromNodesFilteredChoicesMap","_removeFromNodesTriggerConditionsMap","_addNodeGroupInstance","_addSlideInstance","_addFieldInstance","FormControl","registerControl","_addToNodesVisibilityMap","_addToNodesConditionalBranchMap","_addToNodesFormulaMap","_addToNodesRepetitionMap","_addToNodesValidationMap","_addToNodesWarningMap","_addToNodesNextSlideConditionsMap","_addToNodesFilteredChoicesMap","_addToNodesTriggerConditionsMap","nodeGroupInstanceName","index","_removeNodesMapIndex","nodesMap","_removeFromNodesMap","tokens","tokenName","_addToNodesMap","AjfFormActionEvent","AjfFormRenderer","_changeDetectorRef","_orientationChange","orientationChange","_saveDisabled","_hasStartMessage","_hasEndMessage","_hideTopToolbar","_hideBottomToolbar","_hideNavigationButtons","_fixedOrientation","_orientation","_errorMoveEvent","_init","_nextSlideSubscription","_errorMoveSubscription","_formAction","formAction","nodesTree","errorPositions","formIsInit","saveDisabled","coerceBooleanProperty","markForCheck","hasStartMessage","hasEndMessage","hideTopToolbar","hideBottomToolbar","hideNavigationButtons","fixedOrientation","orientation","isRepeatingSlide","goToNextError","goToPrevError","delayWhen","formSlider","pageScrollFinish","dir","onSave","_evt","source","action","onFormAction","ngAfterViewChecked","move","currentPage","prevIdx","nextIdx","errorsLen","to","orientationChangeHandler","trackNodeById","BoolToIntPipe","TableRowClass","AjfFormsModule","NgModule","declarations","exports","providers","AjfForm","lastSelectedLocation","stringIdentifier","cos","fs","nodeObj","schema","emptyString","curValue","vp","split","cp","getChildNodes","getRootNode","ns","findNodeInstanceInTree","container","groups","len","flattenNodeInstances"],"mappings":"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"}