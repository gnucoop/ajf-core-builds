{"version":3,"file":"core-forms.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/core/forms/attachments.ts","../../src/core/forms/get-type-name.ts","../../src/core/forms/choices.ts","../../src/core/forms/errors.ts","../../src/core/forms/math.ts","../../src/core/forms/validation.ts","../../src/core/forms/warning.ts","../../src/core/forms/nodes.ts","../../src/core/forms/field-utils.ts","../../src/core/forms/field-icon.ts","../../src/core/forms/nodes-instances.ts","../../src/core/forms/field.ts","../../src/core/forms/form-renderer-utils.ts","../../src/core/forms/validation-service.ts","../../src/core/forms/form-renderer.ts","../../src/core/forms/form.ts","../../src/core/forms/bool-to-int.ts","../../src/core/forms/field-is-valid.ts","../../src/core/forms/table-row-class.ts","../../src/core/forms/forms-module.ts","../../src/core/forms/forms.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {deepCopy} from '@ajf/core/utils';\n\nexport enum AjfAttachmentsType {\n  Link,\n  Pdf,\n  LENGTH\n}\n\nexport interface IAjfAttachment {\n  label: string;\n  value: any;\n  type: string;\n}\n\n/**\n * This class will define an ajf attachment\n */\nexport class AjfAttachment<T> {\n  get label(): string { return this._label; }\n  get value(): T { return this._value; }\n  get type(): string { return this._type; }\n\n  private _label: string;\n  private _value: T;\n  private _type: string;\n\n  constructor(obj?: any) {\n    this._label = obj && obj.label || null;\n    this._value = obj && obj.value || null;\n    this._type = obj && obj.type || null;\n  }\n}\n\n/**\n * This class will define an ajf attachments orgin\n */\nexport abstract class AjfAttachmentsOrigin {\n  private _name: string;\n\n  /**\n   * this static method will create attachment\n   * @param obj : any - object attachment\n   * @return AjfAttachment\n   */\n  static create(obj: any): any {\n    let attachments: IAjfAttachment[] = [];\n    if (obj.attachments instanceof Array) {\n      for (let i = 0; i < obj.attachments.length; i++) {\n        let att: any = obj.attachments[i];\n        switch (att.type) {\n        case AjfAttachmentsType.Link:\n          attachments.push(new AjfAttachment<string>(att));\n          break;\n        case AjfAttachmentsType.Pdf:\n          attachments.push(new AjfAttachment<string>(att));\n          break;\n        default:\n          throw new Error('Invalid attachment type');\n        }\n      }\n    }\n    obj.attachments = attachments;\n    return new AjfAttachmentsFixedOrigin(obj);\n  }\n  /**\n   * this static method will load an AjfAttachmentsOrigin from json\n   * @param obj : any - object Attachments\n   * @return AjfAttachmentsOrigin\n   */\n  static fromJson(obj: any): AjfAttachmentsOrigin {\n    obj = deepCopy(obj);\n    let keys: string[] = Object.keys(obj);\n    if (keys.indexOf('type') === -1) {\n      throw new Error('Attachments origin type missing type');\n    }\n    let type: string = obj.type;\n    delete obj.type;\n    switch (type) {\n    case 'fixed':\n      return AjfAttachmentsFixedOrigin.create(obj);\n    default:\n      throw new Error('Invalid attachment origin type');\n    }\n  }\n\n  getName(): string { return this._name; }\n\n  constructor(obj?: any) { this._name = obj && obj.name || null; }\n\n  abstract getAttachments(): IAjfAttachment[];\n}\n/**\n * This class will define an ajf attachments fixed origin\n */\nexport class AjfAttachmentsFixedOrigin extends AjfAttachmentsOrigin {\n  private _attachments: IAjfAttachment[];\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this._attachments = obj && obj.attachments || [];\n  }\n\n  getAttachments(): IAjfAttachment[] { return this._attachments; }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nexport function getTypeName(v: any): string {\n  let typeStr = typeof v;\n  return typeStr === 'object'\n    ? v.constructor.toString().match(/\\w+/g)[1]\n    : typeStr;\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Observable, Subscription} from 'rxjs';\n\nimport {AjfJsonSerializable} from '@ajf/core/models';\nimport {deepCopy} from '@ajf/core/utils';\n\nimport {getTypeName} from './get-type-name';\n\nexport enum AjfChoicesType {\n  String,\n  Number,\n  LENGTH\n}\n\nexport interface IAjfChoicesOrigin {\n  getType(): string;\n  getName(): string;\n  getLabel(): string;\n  getChoices(): Array<any>;\n  getChoicesType(): any;\n  setName(name: string): void;\n  setLabel(label: string): void;\n}\n\nexport class AjfChoice<T> extends AjfJsonSerializable {\n  label: string;\n  value: T;\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.label = obj && obj.label || '';\n    this.value = obj && obj.value || null;\n  }\n}\n\nexport abstract class AjfChoicesOrigin<T> extends AjfJsonSerializable implements\n    IAjfChoicesOrigin {\n  private _name: string;\n  private _label: string;\n  private _choicesType: string;\n\n  static create(type: string, obj?: any): any {\n    switch (type) {\n    case 'string':\n      return new AjfChoicesFixedOrigin<string>(obj);\n    case 'number':\n      return new AjfChoicesFixedOrigin<number>(obj);\n    default:\n      return null;\n    }\n  }\n\n  static fromJson(obj: any): AjfChoicesOrigin<any> {\n    obj = deepCopy(obj);\n    let keys: string[] = Object.keys(obj);\n    if (keys.indexOf('type') === -1) {\n      throw new Error('Choices origin type missing type');\n    }\n    let type: string = obj.type;\n    delete obj.type;\n    switch (type) {\n    case 'fixed':\n      return new AjfChoicesFixedOrigin<any>(obj);\n    case 'function':\n      return new AjfChoicesFunctionOrigin<any>(obj);\n    case 'observable':\n      return new AjfChoicesObservableOrigin<any>(obj);\n    case 'observableArray':\n      return new AjfChoicesObservableArrayOrigin<any>(obj);\n    case 'promise':\n      return new AjfChoicesObservableOrigin<any>(obj);\n    default:\n      throw new Error('Invalid choices origin type');\n    }\n  }\n\n  constructor(obj?: any) {\n    super();\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat(\n        [ 'type', 'name', 'label', 'choicesType' ]);\n\n    this._name = obj && obj.name || null;\n    this._label = obj && obj.label || null;\n    this._choicesType = obj && obj.choicesType || null;\n  }\n\n  abstract getType(): string;\n\n  getName(): string { return this._name; }\n\n  getLabel(): string { return this._label; }\n\n  setName(name: string): void { this._name = name; }\n\n  setLabel(label: string): void { this._label = label; }\n\n  abstract getChoices(): Array<AjfChoice<T>>;\n\n  getChoicesType(): string {\n    return this._choicesType || this._guessChoicesType();\n  }\n\n  private _guessChoicesType(): string {\n    let cs = this.getChoices();\n    if (cs && cs.length > 0) {\n      this._choicesType = getTypeName(cs[0].value);\n    }\n    return this._choicesType;\n  }\n}\n\nexport interface IAjfChoicesFunction<T> extends Function { (): AjfChoice<T>[]; }\n\nexport class AjfChoicesFixedOrigin<T> extends AjfChoicesOrigin<T> {\n  private _choices: AjfChoice<T>[];\n\n  getType(): string { return 'fixed'; }\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat('choices');\n\n    this._choices = obj && <AjfChoice<T>[]>obj.choices || [];\n  }\n\n  getChoices(): AjfChoice<T>[] { return this._choices; }\n\n  setChoices(choices: AjfChoice<T>[]) { this._choices = choices.slice(0); }\n}\n\nexport class AjfChoicesFunctionOrigin<T> extends AjfChoicesOrigin<T> {\n  private _generator: IAjfChoicesFunction<T>;\n  get generator(): IAjfChoicesFunction<T> { return this._generator; }\n\n  getType(): string { return 'function'; }\n\n  constructor(generator: IAjfChoicesFunction<T>, obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat('generator');\n\n    this._generator = generator;\n  }\n\n  getChoices(): AjfChoice<T>[] { return this._generator(); }\n}\n\nexport class AjfChoicesObservableOrigin<T> extends AjfChoicesOrigin<T> {\n  private _currentChoices: AjfChoice<T>[] = [];\n  private _subscription: Subscription = Subscription.EMPTY;\n\n  get observable(): Observable<AjfChoice<T>> {\n    return this._observable;\n  }\n\n  getType(): string { return 'observable'; }\n\n  constructor(private _observable: Observable<AjfChoice<T>>, obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat('observable');\n\n    let self = this;\n    this._subscription = _observable.subscribe(\n        (x: AjfChoice<T>) => self._currentChoices.push(x));\n  }\n\n  getChoices(): AjfChoice<T>[] { return this._currentChoices.splice(0); }\n\n  destroy(): void {\n    this._subscription.unsubscribe();\n  }\n}\n\nexport class AjfChoicesObservableArrayOrigin<T> extends AjfChoicesOrigin<T> {\n  private _currentChoices: AjfChoice<T>[] = [];\n  private _subscription: Subscription = Subscription.EMPTY;\n\n  get observable(): Observable<AjfChoice<T>[]> {\n    return this._observable;\n  }\n\n  getType(): string { return 'observableArray'; }\n\n  constructor(private _observable: Observable<AjfChoice<T>[]>, obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat('observable');\n\n    let self = this;\n    this._subscription = _observable.subscribe(\n        (x: AjfChoice<T>[]) => self._currentChoices = x.splice(0));\n  }\n\n  getChoices(): AjfChoice<T>[] { return this._currentChoices.splice(0); }\n\n  destroy(): void {\n    this._subscription.unsubscribe();\n  }\n}\n\nexport class AjfChoicesPromiseOrigin<T> extends AjfChoicesOrigin<T> {\n  private _choices: AjfChoice<T>[] = [];\n\n  getType(): string { return 'promise'; }\n\n  constructor(promise: Promise<AjfChoice<T>[]>, obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat('promise');\n\n    promise.then((x: AjfChoice<T>[]) => { this._choices = x.splice(0); });\n  }\n\n  getChoices(): AjfChoice<T>[] { return this._choices.splice(0); }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfError} from '@ajf/core/models';\n\n/**\n * This class will define an Ajf invalid field definition error\n */\nexport class AjfInvalidFieldDefinitionError extends AjfError {\n  get name(): string { return 'AjfInvalidFieldDefinitionError'; }\n\n  constructor(message?: string) {\n    super(message);\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nexport function factorial(n: number): number {\n  let f = 1;\n  for (let i: number = n; i > 1; i--) {\n    f = f * i;\n  }\n  return f;\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCondition, AjfJsonSerializable} from '@ajf/core/models';\nimport {deepCopy} from '@ajf/core/utils';\n\n\nexport class AjfValidationResult {\n\n  result: boolean;\n  error: string;\n  clientValidation: boolean;\n\n  /**\n   * this constructor will assign the parameters value to a class variables\n   * @param res : boolean\n   * @param err : string\n   * @cVal : boolean\n   */\n  constructor(res: boolean, err: string, cVal: boolean) {\n    this.result = res;\n    this.error = err;\n    this.clientValidation = cVal;\n  }\n}\n\n/**\n * This class will define an ajf validation\n */\nexport class AjfValidation extends AjfCondition {\n  clientValidation: boolean;\n  errorMessage: string;\n\n  /**\n   * this static method will load an AjfValidation from json\n   * @param obj  : any - object validation\n   * @return AjfValidation\n   */\n  static fromJson(obj: any): AjfValidation {\n    obj = deepCopy(obj);\n    return new AjfValidation(obj);\n  }\n\n  /**\n   * this static method will get an ajfValidation with maxValue setted\n   * @param maxValue : number - max value\n   * @return AjfValidation\n   */\n  static getMaxCondition(maxValue: number): AjfValidation {\n    return new AjfValidation({\n      condition : '$value <= ' + maxValue.toString(),\n      errorMessage : 'Value must be <= ' + maxValue.toString()\n    });\n  }\n\n  /**\n   * this static method will get an ajfValidation with minValue setted\n   * @param minValue : number - min value\n   * @return AjfValidation\n   */\n  static getMinCondition(minValue: number): AjfValidation {\n    return new AjfValidation({\n      condition : '$value >= ' + minValue.toString(),\n      errorMessage : 'Value must be >= ' + minValue.toString()\n    });\n  }\n\n  /**\n   * this static method will get an ajfValidation with notEmpty setted\n   * @return AjfValidation\n   */\n  static getNotEmptyCondition(): AjfValidation {\n    return new AjfValidation({\n      condition : `notEmpty($value)`,\n      errorMessage : `Value must not be empty`\n    });\n  }\n\n  /**\n   * this static method will get an ajfValidation with maxDigit setted\n   * @return AjfValidation\n   */\n  static getMaxDigitsCondition(maxValue: number): AjfValidation {\n    return new AjfValidation({\n      condition : `$value ? $value.toString().length <= ${maxValue.toString()} : false`,\n      errorMessage : 'Digits count must be <= ' + maxValue.toString()\n    });\n  }\n\n  /**\n   * this static method will get an ajfValidation with minDigit setted\n   * @return AjfValidation\n   */\n  static getMinDigitsCondition(minValue: number): AjfValidation {\n    return new AjfValidation({\n      condition : `$value ? $value.toString().length >= ${minValue.toString()} : false`,\n      errorMessage : 'Digits count must be >= ' + minValue.toString()\n    });\n  }\n\n  /**\n   * this constructor will assign the obj value to a class variables and call\n   * super()\n   */\n  constructor(obj?: any) {\n    super(obj);\n    this.clientValidation = obj && obj.clientValidation || false;\n    this.errorMessage = obj && obj.errorMessage || 'Undefined Error';\n\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat(['clientValidation', 'errorMessage']);\n  }\n\n  /**\n   * this public method will evaluate context or forceFormula\n   * @param context      : any - context\n   * @param forceFormula : string - formula\n   * @return AjfValidationResult\n   */\n  evaluate(context?: any, forceFormula?: string): AjfValidationResult {\n    return new AjfValidationResult(super.evaluate(context, forceFormula),\n                                   this.errorMessage, this.clientValidation);\n  }\n}\n\n/**\n * This class will define an ajf validation group\n */\nexport class AjfValidationGroup extends AjfJsonSerializable {\n  forceValue: AjfCondition;\n  maxValue: AjfValidation | null;\n  minValue: AjfValidation | null;\n  notEmpty: AjfValidation | null;\n  maxDigits: AjfValidation | null;\n  minDigits: AjfValidation | null;\n  conditions: AjfValidation[];\n\n  /**\n   * this static method will load an AjfValidationGroup from json\n   * @param obj  : any - object validationGroup\n   * @return AjfValidationGroup\n   */\n  static fromJson(obj: any): AjfValidationGroup {\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('maxValue') > -1 && typeof obj.maxValue === 'number') {\n      obj.maxValue = AjfValidation.getMaxCondition(obj.maxValue);\n    }\n\n    if (keys.indexOf('minValue') > -1 && typeof obj.minValue === 'number') {\n      obj.minValue = AjfValidation.getMinCondition(obj.minValue);\n    }\n\n    if (keys.indexOf('notEmpty') > -1) {\n      obj.notEmpty = AjfValidation.getNotEmptyCondition();\n    }\n\n    if (keys.indexOf('forceValue') > -1) {\n      obj.forceValue = AjfCondition.fromJson(obj.forceValue);\n    }\n\n    if (keys.indexOf('maxDigits') > -1 && typeof obj.maxDigits === 'number') {\n      obj.maxDigits = AjfValidation.getMaxDigitsCondition(obj.maxDigits);\n    }\n\n    if (keys.indexOf('minDigits') > -1 && typeof obj.minDigits === 'number') {\n      obj.minDigits = AjfValidation.getMinDigitsCondition(obj.minDigits);\n    }\n\n    if (keys.indexOf('conditions') > -1 && obj.conditions instanceof Array) {\n      let conditions: AjfCondition[] = [];\n      for (let c of obj.conditions) {\n        conditions.push(AjfValidation.fromJson(c));\n      }\n      obj.conditions = conditions;\n    }\n\n    return new AjfValidationGroup(obj);\n  }\n\n  /**\n   * this constructor will assign the obj value to a class variables\n   * @param obj : any\n   */\n  constructor(obj?: any) {\n    super(obj);\n\n    this.forceValue = obj && obj.forceValue || null;\n    this.maxValue = obj && obj.maxValue || null;\n    this.minValue = obj && obj.minValue || null;\n    this.notEmpty = obj && obj.notEmpty || null;\n    this.maxDigits = obj && obj.maxDigits || null;\n    this.minDigits = obj && obj.minDigits || null;\n    this.conditions = obj && obj.conditions || [];\n\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat([\n        'forceValue', 'maxValue', 'minValue', 'notEmpty',\n        'maxDigits', 'minDigits', 'conditions'\n      ]);\n  }\n\n  toJson(): any {\n    const json: any = {};\n    if (this.forceValue != null) {\n      json['forceValue'] = true;\n    }\n\n    if (this.maxValue != null) {\n      json['maxValue'] = this.maxValue.condition.replace('$value <= ', '');\n    }\n\n    if (this.minValue != null) {\n      json['minValue'] = this.minValue.condition.replace('$value >= ', '');\n    }\n\n    if (this.notEmpty != null) {\n      json['notEmpty'] = true;\n    }\n\n    if (this.maxDigits != null) {\n      json['maxDigits'] = this.maxDigits.condition.replace(\n        '$value ? $value.toString().length <=  : false', '');\n    }\n\n    if (this.minDigits != null) {\n      json['minDigits'] = this.minDigits.condition.replace(\n        '$value ? $value.toString().length >=  : false', '');\n    }\n\n    if (this.conditions != null) {\n      json['conditions'] = this.conditions.map(c => c.toJson());\n    }\n\n    return json;\n  }\n\n  /**\n   * this protected method evaluate max value\n   * @param value : any\n   * @return AjfValidationResult\n   */\n  protected _evaluateMaxValue(value: any) {\n    if (this.maxValue == null) { return null; }\n    return this.maxValue.evaluate({'$value' : value});\n  }\n\n  /**\n   * this protected method evaluate min value\n   * @param value : any\n   * @return AjfValidationResult\n   */\n  protected _evaluateMinvalue(value: any) {\n    if (this.minValue == null) { return null; }\n    return this.minValue.evaluate({'$value' : value});\n  }\n\n  /**\n   * this protected method evaluate not empty value\n   * @param value : any\n   * @return AjfValidationResult\n   */\n  protected _evaluateNotEmpty(value: any) {\n    if (this.notEmpty == null) { return null; }\n    return this.notEmpty.evaluate({'$value' : value});\n  }\n\n  /**\n   * this protected method evaluate conditions\n   * @param context : any\n   * @return AjfValidationResult[]\n   */\n  protected _evaluateConditions(context: any): AjfValidationResult[] {\n    let res: AjfValidationResult[] = [];\n    this.conditions.forEach((cond) => {\n      res.push(cond.evaluate(context));\n    });\n    return res;\n  }\n\n  /**\n   * this public method evaluate\n   * @param value   : any\n   * @param context : any\n   * @return AjfValidationResult[]\n   */\n  evaluate(value: any, context?: any): AjfValidationResult[] {\n    let res: AjfValidationResult[] = [];\n    let ctx = deepCopy(context);\n    ctx['$value'] = value;\n    res = this._evaluateConditions(ctx);\n    if (this.maxValue) {\n      const maxValue = this._evaluateMaxValue(value);\n      if (maxValue != null) {\n        res.push();\n      }\n    }\n    if (this.minValue) {\n      const minValue = this._evaluateMinvalue(value);\n      if (minValue != null) {\n        res.push(minValue);\n      }\n    }\n    if (this.notEmpty) {\n      const notEmpty = this._evaluateNotEmpty(value);\n      if (notEmpty != null) {\n        res.push(notEmpty);\n      }\n    }\n    if (this.maxDigits) {\n      res.push(this.maxDigits.evaluate({'$value' : value}));\n    }\n    if (this.minDigits) {\n      res.push(this.minDigits.evaluate({'$value' : value}));\n    }\n    return res;\n  }\n  /**\n   * this public method evaluate force value\n   * @param context : any\n   * @return string\n   */\n  evaluateForceValue(context: any) {\n    return this.forceValue.evaluate(context);\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCondition, AjfJsonSerializable} from '@ajf/core/models';\n\n\n/**\n * This class will define an ajf warning result\n */\nexport class AjfWarningResult {\n\n  result: boolean;\n  warning: string;\n\n  /**\n   * this constructor will assign the parameters value to a class variables\n   * @param res : boolean\n   * @param wrn : string\n   */\n  constructor(res: boolean, wrn: string) {\n    this.result = res;\n    this.warning = wrn;\n  }\n}\n\n/**\n * This class will define an ajf warning\n */\nexport class AjfWarning extends AjfCondition {\n  warningMessage: string;\n\n  /**\n   * this static method will load an AjfWarning from json\n   * @param obj  : any - object warning\n   * @return AjfWarning\n   */\n  static fromJson(obj: any): AjfWarning { return new AjfWarning(obj); }\n\n  static getNotEmptyWarning(): AjfWarning {\n    return new AjfWarning({\n      condition : `notEmpty($value)`,\n      warningMessage : `Value must not be empty`\n    });\n  }\n\n  /**\n   * this constructor will assign the obj value to a class variables and call\n   * super()\n   */\n  constructor(obj?: any) {\n    super(obj);\n    this.warningMessage = obj && obj.warningMessage || 'Undefined Error';\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat(['warningMessage']);\n  }\n\n  /**\n   * this public method will evaluate context or forceFormula\n   * @param context      : any - context\n   * @param forceFormula : string - formula\n   * @return AjfWarningResult\n   */\n  evaluate(context?: any, forceFormula?: string): AjfWarningResult {\n    return new AjfWarningResult(super.evaluate(context, forceFormula),\n                                this.warningMessage);\n  }\n}\n\n/**\n * This class will define an ajf warning group\n */\nexport class AjfWarningGroup extends AjfJsonSerializable {\n  notEmpty: AjfWarning | null;\n  conditions: AjfWarning[];\n\n  /**\n   * this static method will load an AjfWarningGroup from json\n   * @param obj  : any - object warningGroup\n   * @return AjfValidationGroup\n   */\n  static fromJson(obj: any): AjfWarningGroup {\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('notEmpty') > -1) {\n      obj.notEmpty = AjfWarning.getNotEmptyWarning();\n    }\n\n    if (keys.indexOf('conditions') > -1 && obj.conditions instanceof Array) {\n      let conditions: AjfCondition[] = [];\n      for (let c of obj.conditions) {\n        conditions.push(AjfWarning.fromJson(c));\n      }\n      obj.conditions = conditions;\n    }\n\n    return new AjfWarningGroup(obj);\n  }\n\n  /**\n   * this constructor will assign the obj value to a class variables\n   * @param obj : any\n   */\n  constructor(obj?: any) {\n    super(obj);\n\n    this.notEmpty = obj && obj.notEmpty || null;\n    this.conditions = obj && obj.conditions || null;\n\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat(['notEmpty', 'conditions']);\n  }\n\n  /**\n   * this protected method evaluate conditions\n   * @param context : any\n   * @return AjfWarningResult[]\n   */\n  protected _evaluateConditions(context: any): AjfWarningResult[] {\n    let res: AjfWarningResult[] = [];\n    this.conditions.forEach((cond) => {\n      res.push(cond.evaluate(context));\n    });\n    return res;\n  }\n\n  /**\n   * this public method evaluate\n   * @param value   : any\n   * @param context : any\n   * @return AjfWarningResult[]\n   */\n  evaluate(context?: any): AjfWarningResult[] {\n    let res: AjfWarningResult[] = this._evaluateConditions(context);\n    return res;\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCondition, AjfFormula, AjfJsonSerializable} from '@ajf/core/models';\nimport {deepCopy} from '@ajf/core/utils';\n\nimport {AjfAttachmentsOrigin} from './attachments';\nimport {IAjfChoicesOrigin} from './choices';\nimport {AjfInvalidFieldDefinitionError} from './errors';\nimport {factorial} from './math';\nimport {AjfValidationGroup} from './validation';\nimport {AjfWarningGroup} from './warning';\n\n\nexport enum AjfNodeType {\n  AjfField,\n  AjfFieldNodeLink,\n  AjfNodeGroup,\n  AjfSlide,\n  AjfRepeatingSlide,\n  LENGTH\n}\n\n\n/**\n * This class will define an ajf node\n */\nexport class AjfNode extends AjfJsonSerializable {\n  // node identification number\n  private _id: number;\n  get id(): number { return this._id; }\n  set id(id: number) { this._id = id; }\n\n  // id of predecessor node\n  private _parent: number;\n  get parent(): number { return this._parent; }\n  set parent(parent: number) { this._parent = parent; }\n\n  // is a id of parent node,  if this node is part of an AjfNodeGroup\n  private _parentNode: number;\n  get parentNode(): number { return this._parentNode; }\n  set parentNode(parentNode: number) { this._parentNode = parentNode; }\n\n  // an AjfCondition array\n  private _conditionalBranches: AjfCondition[];\n  /**\n   * this method will get the conditionalBranches of the field\n   * @return : _conditionalBranches\n   */\n  get conditionalBranches(): AjfCondition[] {\n    return this._conditionalBranches;\n  }\n  /**\n   * this method will set the conditionalBranches of the field\n   * @param conditionalBranches : AjfCondition[] - the new conditionalBranches\n   */\n  set conditionalBranches(conditionalBranches: AjfCondition[]) {\n    this._conditionalBranches = conditionalBranches;\n  }\n\n  // the name of the field\n  private _name: string;\n  /**\n   * this method will get the current name of field\n   * @return : _name\n   */\n  get name(): string {\n    return this._name;\n  }\n  /**\n   * this method will set the current name of field\n   * @param name : string - the new name\n   */\n  set name(name: string) {\n    this._name = name;\n  }\n  // hte label of the field\n  private _label: string;\n  /**\n   * this method will get the label of the field\n   * @return : _label\n   */\n  get label(): string {\n    return this._label;\n  }\n  /**\n   * this method will set the label of the field\n   * @param label : string - the new label\n   */\n  set label(label: string) {\n    this._label = label;\n  }\n\n  // AjfCondition for handling visibility\n  private _visibility: AjfCondition | null;\n  /**\n   * this method will get the visibility of the field\n   * @return : _visibility\n   */\n  get visibility(): AjfCondition | null {\n    return this._visibility;\n  }\n  /**\n   * this method will set the visibility of the field\n   * @param visibility : AjfCondition - the new visibility\n   */\n  set visibility(visibility: AjfCondition | null) {\n    this._visibility = visibility;\n  }\n\n  /**\n   * this method will load an AjfNode from json\n   * @param obj                : any - object node\n   * @param choicesOrigins     : any[] - array of choicesOrigins\n   * @param attachmentsOrigins : any[] - array of attachmentsOrigins\n   * @return AjfNode\n   */\n  static fromJson(obj: any, choicesOrigins?: any[], attachmentsOrigins?: any[],\n      context?: any): AjfNode {\n    // array of string:  contains a keys Object\n    // example:\n    // [\"id\", \"name\", \"label\", \"visibility\", \"hasChoices\", \"parent\",\n    //  \"parentNode\", \"nodeType\", \"conditionalBranches\", \"fieldType\", \"nodes\"]\n    obj = deepCopy(obj);\n    if (context) {\n      context = deepCopy(context);\n    }\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('nodeType') === -1) {\n      throw new Error('Node type missing type');\n    }\n\n    let nodeType = obj.nodeType;\n    delete obj.nodeType;\n    if (AjfNodeType[nodeType] == null) {\n      throw new Error('Invalid node type');\n    }\n\n    if (keys.indexOf('visibility') > -1) {\n      obj.visibility = AjfCondition.fromJson(obj.visibility);\n    }\n\n    if (keys.indexOf('conditionalBranches') > -1 && obj.conditionalBranches instanceof Array) {\n      let cbs: AjfCondition[] = [];\n      for (let i = 0 ; i < obj.conditionalBranches.length ; i ++) {\n        cbs.push(AjfCondition.fromJson(obj.conditionalBranches[i]));\n      }\n      if (cbs.length == 0) {\n        cbs.push(AjfCondition.alwaysCondition());\n      }\n      obj.conditionalBranches = cbs;\n    }\n\n    return AjfNode.createNode(nodeType, obj, choicesOrigins, attachmentsOrigins, context);\n  }\n  /**\n   * this method will create an AjfNode\n   * @param nodeType           : identified a type of node (nodeGroup or nodeField)\n   * @param obj                : any - object node\n   * @param choicesOrigins     : any[] - array of choicesOrigins\n   * @param attachmentsOrigins : any[] - array of attachmentsOrigins\n   * @return AjfNode\n   */\n  static createNode(\n    nodeType: AjfNodeType, obj?: any, choicesOrigins?: any[],\n    attachmentsOrigins?: any[], context?: any\n  ): AjfNode {\n    choicesOrigins = choicesOrigins || [];\n    attachmentsOrigins = attachmentsOrigins || [];\n    switch (nodeType) {\n      case AjfNodeType.AjfNodeGroup:\n        return AjfNodeGroup.fromJson(obj, choicesOrigins, attachmentsOrigins, context);\n      case AjfNodeType.AjfField:\n        return AjfField.fromJson(obj, choicesOrigins, attachmentsOrigins, context);\n      case AjfNodeType.AjfRepeatingSlide:\n        return AjfRepeatingSlide.fromJson(obj, choicesOrigins, attachmentsOrigins, context);\n      case AjfNodeType.AjfSlide:\n        return AjfSlide.fromJson(obj, choicesOrigins, attachmentsOrigins, context);\n      default:\n        throw new Error('Invalid node type');\n    }\n  }\n  /**\n   * this method get the nodeType\n   * @return AjfNodeType\n   */\n  get nodeType(): AjfNodeType {\n    const thisObj: any = this;\n    if (thisObj instanceof AjfField) {\n      return AjfNodeType.AjfField;\n    }\n    if (thisObj instanceof AjfFieldNodeLink) {\n      return AjfNodeType.AjfFieldNodeLink;\n    }\n    if (thisObj instanceof AjfNodeGroup) {\n      return AjfNodeType.AjfNodeGroup;\n    }\n    if (thisObj instanceof AjfRepeatingSlide) {\n      return AjfNodeType.AjfRepeatingSlide;\n    }\n    if (thisObj instanceof AjfSlide) {\n      return AjfNodeType.AjfSlide;\n    }\n    throw new Error('Invalid node type');\n  }\n  /**\n   * this constructor will assign the obj value to a class variables\n   */\n  constructor(obj?: any) {\n    super();\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat([\n      'id', 'nodeType', 'parent', 'parentNode', 'visibility', 'name', 'label',\n      'conditionalBranches'\n    ]);\n\n    this._id         = obj && obj.id          || null;\n    this._parent     = obj && obj.parent      || null;\n    this._parentNode = obj && obj.parentNode  || 0;\n    this._visibility = obj && obj.visibility  || AjfCondition.alwaysCondition();\n    this._name       = obj && obj.name        || null;\n    this._label      = obj && obj.label       || null;\n    this._conditionalBranches = obj && obj.conditionalBranches || [AjfCondition.alwaysCondition()];\n  }\n\n  /**\n   * this method will set the conditiona branch number of the field\n   * @param cbn : number\n   */\n  setConditionalBranchesNum(cbn: number): void {\n    if (this.getMaxConditionalBranches() >= 0) {\n      cbn = Math.min(cbn, this.getMaxConditionalBranches());\n    }\n    if (cbn < this.conditionalBranches.length) {\n      this.conditionalBranches = this.conditionalBranches.slice(0, cbn);\n    } else if (cbn > this.conditionalBranches.length) {\n      for (let i = this.conditionalBranches.length; i < cbn; i++) {\n        this.conditionalBranches.push(AjfCondition.alwaysCondition());\n      }\n    }\n  }\n\n  /**\n   * this method will get the max xonditional branches of the field\n   * @return number\n   */\n  getMaxConditionalBranches(): number {\n    return -1;\n  }\n}\n\nexport class AjfFieldNodeLink extends AjfNode {\n}\n\n/**\n * this enumerate any field type\n */\nexport enum AjfFieldType {\n  String,\n  Text,\n  Number,\n  Boolean,\n  SingleChoice,\n  MultipleChoice,\n  Formula,\n  Empty,\n  Date,\n  DateInput,\n  Time,\n  Table,\n  LENGTH\n}\n\n/**\n * This class will define an ajf node group\n */\nexport class AjfNodeGroup extends AjfNode {\n  // array of ajfNode\n  private _nodes: AjfNode[];\n  get nodes(): AjfNode[] { return this._nodes; }\n  set nodes(nodes: AjfNode[]) { this._nodes = nodes; }\n\n  // is a node group repeat condition\n  // example: \"opd_treatment == 'Yes' && ($groupReps || 1) || 0\"\n  private _formulaReps: AjfFormula;\n  get formulaReps(): AjfFormula { return this._formulaReps; }\n  set formulaReps(formulaReps: AjfFormula) { this._formulaReps = formulaReps; }\n\n  // max number of repetitions\n  private _maxReps: number;\n  get maxReps(): number { return this._maxReps; }\n  set maxReps(maxReps: number) { this._maxReps = maxReps; }\n\n  // min number of repetitions\n  private _minReps: number;\n  get minReps(): number { return this._minReps; }\n  set minReps(minReps: number) { this._minReps = minReps; }\n\n  /**\n   * this method will load an AjfNodeGroup from json\n   * @param obj                : any - object node\n   * @param choicesOrigins     : any[] - array of choicesOrigins\n   * @param attachmentsOrigins : any[] - array of attachmentsOrigins\n   * @return AjfNodeGroup\n   */\n  static fromJson(obj: any, choicesOrigins: any[], attachmentsOrigins: any[],\n      context: any): AjfNodeGroup {\n    // array of string:  contains a keys Object\n    // example:\n    // [\"id\", \"parent\", \"parentNode\", \"formulaReps\", \"nodes\"]\n    obj = deepCopy(obj);\n    if (context) {\n      context = deepCopy(context);\n    }\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('nodes') > -1 && obj.nodes instanceof Array) {\n      let nodes: AjfNode[] = [];\n      for (let i = 0 ; i < obj.nodes.length ; i ++) {\n        nodes.push(AjfNode.fromJson(obj.nodes[i], choicesOrigins, attachmentsOrigins));\n      }\n      obj.nodes = nodes;\n    }\n\n    if (keys.indexOf('formulaReps') > -1 && obj.formulaReps != null) {\n      obj.formulaReps = AjfFormula.fromJson(obj.formulaReps);\n    }\n\n    if (keys.indexOf('visibility') > -1 && obj.visibility != null) {\n      obj.visibility = AjfCondition.fromJson(obj.visibility);\n    }\n\n    if (keys.indexOf('conditionalBranches') > -1 && obj.conditionalBranches instanceof Array) {\n      let cbs: AjfCondition[] = [];\n      for (let i = 0 ; i < obj.conditionalBranches.length ; i ++) {\n        cbs.push(AjfCondition.fromJson(obj.conditionalBranches[i]));\n      }\n      obj.conditionalBranches = cbs;\n    }\n\n    let ret =  new AjfNodeGroup(obj);\n\n    return ret;\n  }\n  /**\n   * this constructor will assign the obj value to a class variables\n   */\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat([\n      'formulaReps', 'minReps', 'maxReps', 'nodes'\n    ]);\n\n    this.nodes = obj && obj.nodes || [];\n    this.formulaReps = obj && obj.formulaReps || null;\n    this.maxReps = obj && obj.maxReps || null;\n    this.minReps = obj && obj.minReps || null;\n  }\n}\n\nexport interface IAjfSlide {\n  nodes: AjfNode[];\n}\n\n/**\n * Represents a form slide.\n * Slides are specialized node groups used to layout the form.\n * They must be at the root level of the form\n *\n * @export\n */\nexport class AjfSlide extends AjfNode implements IAjfSlide {\n  private _nodes: AjfNode[];\n  get nodes(): AjfNode[] { return this._nodes.slice(0); }\n  set nodes(nodes: AjfNode[]) { this._nodes = nodes.slice(0); }\n\n  static fromJson(\n    obj: any, choicesOrigins: any[], attachmentsOrigins: any[], context: any\n  ): AjfSlide {\n    obj = deepCopy(obj);\n    if (context) {\n      context = deepCopy(context);\n    }\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('visibility') > -1 && obj.visibility != null) {\n      obj.visibility = AjfCondition.fromJson(obj.visibility);\n    }\n\n    if (keys.indexOf('nodes') > -1 && obj.nodes instanceof Array) {\n      let nodes: AjfNode[] = [];\n      for (let i = 0 ; i < obj.nodes.length ; i ++) {\n        nodes.push(AjfNode.fromJson(obj.nodes[i], choicesOrigins, attachmentsOrigins));\n      }\n      obj.nodes = nodes;\n    }\n\n    if (keys.indexOf('conditionalBranches') > -1 && obj.conditionalBranches instanceof Array) {\n      let cbs: AjfCondition[] = [];\n      for (let i = 0 ; i < obj.conditionalBranches.length ; i ++) {\n        cbs.push(AjfCondition.fromJson(obj.conditionalBranches[i]));\n      }\n      obj.conditionalBranches = cbs;\n    }\n\n    return new AjfSlide(obj);\n  }\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat(['nodes']);\n\n    this._nodes = obj && obj.nodes || [];\n  }\n}\n\nexport class AjfRepeatingSlide extends AjfSlide {\n  private _formulaReps: AjfFormula | null;\n  get formulaReps(): AjfFormula | null { return this._formulaReps; }\n  set formulaReps(formulaReps: AjfFormula | null) { this._formulaReps = formulaReps; }\n\n  // max number of repetitions\n  private _maxReps: number;\n  get maxReps(): number { return this._maxReps; }\n  set maxReps(maxReps: number) { this._maxReps = maxReps; }\n\n  // min number of repetitions\n  private _minReps: number;\n  get minReps(): number { return this._minReps; }\n  set minReps(minReps: number) { this._minReps = minReps; }\n\n  static fromJson(\n    obj: any, choicesOrigins: any[], attachmentsOrigins: any[], context: any\n  ): AjfRepeatingSlide {\n    obj = deepCopy(obj);\n    if (context) {\n      context = deepCopy(context);\n    }\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('visibility') > -1 && obj.visibility != null) {\n      obj.visibility = AjfCondition.fromJson(obj.visibility);\n    }\n\n    if (keys.indexOf('nodes') > -1 && obj.nodes instanceof Array) {\n      let nodes: AjfNode[] = [];\n      for (let i = 0 ; i < obj.nodes.length ; i ++) {\n        nodes.push(AjfNode.fromJson(obj.nodes[i], choicesOrigins, attachmentsOrigins));\n      }\n      obj.nodes = nodes;\n    }\n\n    if (keys.indexOf('formulaReps') > -1 && obj.formulaReps != null) {\n      obj.formulaReps = AjfFormula.fromJson(obj.formulaReps);\n    }\n\n    if (keys.indexOf('conditionalBranches') > -1 && obj.conditionalBranches instanceof Array) {\n      let cbs: AjfCondition[] = [];\n      for (let i = 0 ; i < obj.conditionalBranches.length ; i ++) {\n        cbs.push(AjfCondition.fromJson(obj.conditionalBranches[i]));\n      }\n      obj.conditionalBranches = cbs;\n    }\n\n    return new AjfRepeatingSlide(obj);\n  }\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat([\n      'nodes', 'formulaReps', 'minReps', 'maxReps'\n    ]);\n\n    this.formulaReps = obj && obj.formulaReps || null;\n    this.nodes = obj && obj.nodes || [];\n    this.minReps = obj && obj.minReps || 1;\n    this.maxReps = obj && obj.maxReps || 0;\n  }\n}\n\n/**\n * This class will define an ajf Field\n */\nexport abstract class AjfField extends AjfNode {\n  // a field description\n  private _description: string;\n  /**\n   * this method will get the description of the field\n   * @return : _description\n   */\n  get description(): string {\n    return this._description;\n  }\n  /**\n   * this method will set the description of the field\n   * @param description : string - the new description\n   */\n  set description(description: string) {\n    this._description = description;\n  }\n\n  // a boolean to identify an editable status\n  private _editable: boolean;\n  /**\n   * this method will get the editable status  of the field\n   * @return : _editable\n   */\n  get editable(): boolean {\n    return this._editable;\n  }\n  //  an AjfFormula\n  private _formula: AjfFormula | null;\n  /**\n   * this method will get the formula of the field\n   * @return : _formula\n   */\n  get formula(): AjfFormula | null {\n    return this._formula;\n  }\n  set formula(formula: AjfFormula | null) {\n    this._formula = formula;\n  }\n\n  // a boolean to identify if the field have choices\n  private _hasChoices = false;\n  /**\n   * this method will get the hasChoices status of the field\n   * @return : _hasChoices\n   */\n  get hasChoices(): boolean {\n    return this._hasChoices;\n  }\n\n  //  a default value\n  private _defaultValue: any;\n\n  /**\n   * this method will get the default value of the field\n   * @return : _defaultValue\n   */\n  get defaultValue(): any {\n    return this._defaultValue;\n  }\n\n  /**\n   * this method will set the defaultValue of the field\n   * @param defaultValue : any - the new defaultValue\n   */\n  set defaultValue(defaultValue: any) {\n    if (defaultValue == null || this.validateValue(defaultValue)) {\n      this._defaultValue = defaultValue;\n    } else {\n      throw new AjfInvalidFieldDefinitionError(\n        'The default value is not valid for this field type');\n    }\n  }\n\n  private _size: 'normal' | 'small' | 'smaller' | 'tiny' | 'mini';\n  get size(): 'normal' | 'small' | 'smaller' | 'tiny' | 'mini' {\n    return this._size;\n  }\n  set size(size: 'normal' | 'small' | 'smaller' | 'tiny' | 'mini') {\n    this._size = size;\n  }\n\n  //  an AjfValidationGroup\n  private _validation: AjfValidationGroup | null;\n\n  /**\n   * this method will get the validation value of the field\n   * @return : _validation\n   */\n  get validation(): AjfValidationGroup | null {\n    return this._validation;\n  }\n  set validation(validation: AjfValidationGroup | null) {\n    this._validation = validation;\n  }\n\n  // an AjfWarningGroup\n  private _warning: AjfWarningGroup | null;\n\n  /**\n   * this method will get the warning value of the field\n   * @return : _warning\n   */\n  get warning(): AjfWarningGroup | null {\n    return this._warning;\n  }\n  set warning(warning: AjfWarningGroup | null) {\n    this._warning = warning;\n  }\n\n  //  a boolean to identify if field has attachments\n  private _hasAttachments = false;\n  /**\n   * this method will get the hasAttachments status of the field\n   * @return : _hasAttachments\n   */\n  get hasAttachments(): boolean { return this._hasAttachments; }\n\n  // an AjfAttachmentsOrigin\n  private _attachmentsOrigin: AjfAttachmentsOrigin;\n\n  /**\n   * this method will get the attachmentsOrigin of the field\n   * @return : AjfAttachmentsOrigin\n   */\n  get attachmentsOrigin(): AjfAttachmentsOrigin | null {\n    return this.hasAttachments && this._attachmentsOrigin || null;\n  }\n\n  /**\n   * this method will get the attachments of the field\n   * @return : any the attachments\n   */\n  get attachments(): any[] {\n      return this.hasAttachments &&\n         this._attachmentsOrigin.getAttachments()  || [];\n  }\n\n  private _nextSlideCondition: AjfCondition | null;\n  get nextSlideCondition(): AjfCondition | null {\n    return this._nextSlideCondition;\n  }\n  set nextSlideCondition(condition: AjfCondition | null) {\n    this._nextSlideCondition = condition;\n  }\n\n  // @TODO Maybe not used??\n  private _nextSlide: boolean;\n  get nextSlide(): boolean {\n    return this._nextSlide;\n  }\n  set nextSlide(val: boolean) {\n    this._nextSlide = val;\n  }\n\n  /**\n   * this method will get the field type\n   * @return : AjfFieldType\n   */\n  get fieldType(): AjfFieldType {\n    const thisObj: any = this;\n    if (thisObj instanceof AjfFormulaField) {\n      return AjfFieldType.Formula;\n    }\n    if (thisObj instanceof AjfMultipleChoiceField) {\n      return AjfFieldType.MultipleChoice;\n    }\n    if (thisObj instanceof AjfSingleChoiceField) {\n      return AjfFieldType.SingleChoice;\n    }\n    if (thisObj instanceof AjfBooleanField) {\n      return AjfFieldType.Boolean;\n    }\n    if (thisObj instanceof AjfNumberField) {\n      return AjfFieldType.Number;\n    }\n    if (thisObj instanceof AjfTextField) {\n      return AjfFieldType.Text;\n    }\n    if (thisObj instanceof AjfStringField) {\n      return AjfFieldType.String;\n    }\n    if (thisObj instanceof AjfDateField) {\n      return AjfFieldType.Date;\n    }\n    if (thisObj instanceof AjfDateInputField) {\n      return AjfFieldType.DateInput;\n    }\n    if (thisObj instanceof AjfTableField) {\n      return AjfFieldType.Table;\n    }\n    if (thisObj instanceof AjfTimeField) {\n      return AjfFieldType.Time;\n    }\n    return AjfFieldType.Empty;\n  }\n\n  /**\n   * this method will get the node type of the field\n   * @return : AjfFieldType\n   */\n  get nodeType(): AjfNodeType { return AjfNodeType.AjfField; }\n\n  /**\n   * this method will create new field\n   * @return : ajfField\n   */\n  static create(fieldType: AjfFieldType, obj?: any): AjfField {\n    let ret: AjfField;\n    switch (fieldType) {\n      case AjfFieldType.String:\n        ret = new AjfStringField(obj);\n        break;\n      case AjfFieldType.Text:\n        ret = new AjfTextField(obj);\n        break;\n      case AjfFieldType.Number:\n        ret = new AjfNumberField(obj);\n        break;\n      case AjfFieldType.Boolean:\n        ret = new AjfBooleanField(obj);\n        break;\n      case AjfFieldType.SingleChoice:\n        ret = new AjfSingleChoiceField(obj);\n        break;\n      case AjfFieldType.MultipleChoice:\n        ret = new AjfMultipleChoiceField(obj);\n        break;\n      case AjfFieldType.Formula:\n        ret = new AjfFormulaField(obj);\n        break;\n      case AjfFieldType.Empty:\n        ret = new AjfEmptyField(obj);\n        break;\n      case AjfFieldType.Date:\n        ret = new AjfDateField(obj);\n        break;\n      case AjfFieldType.DateInput:\n        ret = new AjfDateInputField(obj);\n        break;\n      case AjfFieldType.Time:\n        ret = new AjfTimeField(obj);\n        break;\n      case AjfFieldType.Table:\n        ret = new AjfTableField(obj);\n        break;\n      default:\n        throw new Error('Invalid field type');\n    }\n    return ret;\n  }\n\n  /**\n   * this method will load an AjfField from json\n   * @param obj                : any - object node\n   * @param choicesOrigins     : any[] - array of choicesOrigins\n   * @param attachmentsOrigins : any[] - array of attachmentsOrigins\n   * @return AjfNode\n   */\n  static fromJson(obj: any, choicesOrigins: any[], attachmentsOrigins: any[],\n      context: any): AjfField {\n    // array of string: contains a keys object\n    // example:\n    // [\"id\", \"name\", \"label\", \"visibility\", \"hasChoices\", \"parent\",\n    // \"parentNode\", \"conditionalBranches\", \"fieldType\", \"nodes\"]\n    obj = deepCopy(obj);\n    if (context) {\n      context = deepCopy(context);\n    }\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('fieldType') === -1) {\n      throw new Error('Field type missing type');\n    }\n    let fieldType = obj.fieldType;\n    delete obj.fieldType;\n    if (AjfFieldType[fieldType] == null) {\n      throw new Error('Invalid field type');\n    }\n\n    if (keys.indexOf('visibility') > -1 && obj.visibility != null) {\n      obj.visibility = AjfCondition.fromJson(obj.visibility);\n    }\n\n    if (keys.indexOf('formula') > -1 && obj.formula != null) {\n      obj.formula = AjfFormula.fromJson(obj.formula);\n    }\n\n    if (keys.indexOf('choicesFilter') > -1 && obj.choicesFilter != null) {\n      obj.choicesFilter = AjfFormula.fromJson(obj.choicesFilter);\n    }\n\n    if (keys.indexOf('validation') > -1 && obj.validation != null) {\n      obj.validation = AjfValidationGroup.fromJson(obj.validation);\n    }\n\n    if (keys.indexOf('warning') > -1  && obj.warning != null) {\n      obj.warning = AjfWarningGroup.fromJson(obj.warning);\n    }\n\n    if (keys.indexOf('choicesOriginRef') > -1) {\n      let origins = choicesOrigins.filter(x => x.getName() === obj.choicesOriginRef);\n      obj.choicesOrigin = origins.length > 0 ? origins[0] : null;\n    }\n\n    if (keys.indexOf('attachmentsOriginRef') > -1) {\n      let origins = attachmentsOrigins.filter(x => x.getName() === obj.attachmentsOriginRef);\n      obj.attachmentsOrigin = origins.length > 0 ? origins[0] : null;\n    }\n\n    if (keys.indexOf('triggerConditions') > -1 &&\n        obj.triggerConditions != null &&\n        obj.triggerConditions.length > 0) {\n      obj.triggerConditions = obj.triggerConditions\n        .map((t: any) => {\n          return AjfCondition.fromJson(t);\n        });\n    }\n\n    if (keys.indexOf('nodes') > -1 && obj.nodes instanceof Array) {\n      let nodes: AjfNode[] = [];\n      for (let i = 0 ; i < obj.nodes.length ; i ++) {\n        let childNode = obj.nodes[i];\n        childNode.parentField = obj.id;\n        nodes.push(AjfNode.fromJson(childNode, choicesOrigins, attachmentsOrigins, context));\n      }\n      obj.nodes = nodes;\n    }\n\n    if (keys.indexOf('nextSlideCondition') > -1 && obj.nextSlideCondition != null) {\n      obj.nextSlideCondition = AjfCondition.fromJson(obj.nextSlideCondition);\n    }\n\n    if (keys.indexOf('conditionalBranches') > -1 && obj.conditionalBranches instanceof Array) {\n      let cbs: AjfCondition[] = [];\n      for (let i = 0 ; i < obj.conditionalBranches.length ; i ++) {\n        cbs.push(AjfCondition.fromJson(obj.conditionalBranches[i]));\n      }\n      obj.conditionalBranches = cbs;\n    }\n\n    return AjfField.create(fieldType, obj);\n  }\n  /**\n   * this constructor will assign the obj value to a class variables\n   */\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat([\n      'fieldType', 'description',\n      'editable', 'formula', 'validation', 'warning', 'hasChoices', 'defaultValue', 'size',\n      'nextSlideCondition'\n    ]);\n\n    this._description         = obj && obj.description         || null;\n    this._formula             = obj && obj.formula             || null;\n    this._validation          = obj && obj.validation          || null;\n    this._warning             = obj && obj.warning             || null;\n    this._attachmentsOrigin   = obj && obj.attachmentsOrigin   || null;\n    this.defaultValue         = obj && obj.defaultValue != null ? obj.defaultValue : null;\n    this._size                = obj && obj.size                || 'normal';\n    this._nextSlideCondition  = obj && obj.nextSlideCondition  || null;\n\n    this.setHasAttachments(this._attachmentsOrigin && true || false);\n\n    this._hasChoices = false;\n    this.setEditable();\n  }\n\n  /**\n   * this method will set the editable value of the field\n   * @param editable : boolean\n   */\n  protected setEditable(editable = true) {\n    this._editable = editable;\n  }\n\n  /**\n   * this method will set the HasChoices value of the field\n   * @param hasChoices : boolean\n   */\n  protected setHasChoices(hasChoices: boolean) {\n    this._hasChoices = hasChoices;\n  }\n\n  /**\n   * this method will set the hasAttachments value of the field\n   * @param hasAttachments : boolean\n   */\n  protected setHasAttachments(hasAttachments: boolean) {\n    this._hasAttachments = hasAttachments;\n  }\n\n  abstract validateValue(defaultValue: any): boolean;\n}\n\n/**\n * This class will define an ajf empty field\n */\nexport class AjfEmptyField extends AjfField {\n  HTML: string;\n\n  validateValue(_: any): boolean {\n    return true;\n  }\n\n  constructor(obj?: any) {\n    super(obj);\n    this.jsonExportedMembers = this.jsonExportedMembers.concat([\n      'HTML'\n    ]);\n    this.HTML = obj && obj.HTML || null;\n  }\n}\n\n/**\n * This class will define an ajf string field\n */\nexport class AjfStringField extends AjfField {\n  validateValue(value: any): boolean {\n    return value === value.toString();\n  }\n}\n\n/**\n * This class will define an ajf text field\n */\n\nexport class AjfTextField extends AjfStringField {\n}\n\n/**\n * This class will define an ajf number field\n */\nexport class AjfNumberField extends AjfField {\n  validateValue(value: any): boolean {\n    return value === parseInt(value, 10) || value === parseFloat(value);\n  }\n}\n\n/**\n * This class will define an ajf boolean field\n */\nexport class AjfBooleanField extends AjfField {\n  validateValue(value: any): boolean {\n    return value === !!value;\n  }\n\n  getMaxConditionalBranches(): number {\n    return 2;\n  }\n}\n\n/**\n * This class will define an ajf field with choices\n */\nexport class AjfFieldWithChoices extends AjfField {\n  choicesOrigin: IAjfChoicesOrigin;\n  choicesFilter: AjfFormula;\n  forceExpanded: boolean;\n  forceNarrow: boolean;\n  triggerConditions: AjfCondition[];\n\n  get choices(): any[] {\n    return this.choicesOrigin && this.choicesOrigin.getChoices() || [];\n  }\n\n  get choicesOriginRef(): string {\n    return this.choicesOrigin.getName();\n  }\n\n  validateValue(_: any): boolean {\n    return true;\n  }\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat([\n        'choicesOriginRef', 'choicesFilter',\n        'forceExpanded', 'forceNarrow', 'triggerConditions'\n      ]);\n\n    this.choicesOrigin     = obj && obj.choicesOrigin     || null;\n    this.choicesFilter     = obj && obj.choicesFilter     || null;\n    this.forceExpanded     = obj && obj.forceExpanded     || false;\n    this.forceNarrow       = obj && obj.forceNarrow       || false;\n    this.triggerConditions = obj && obj.triggerConditions || null;\n\n    this.setHasChoices(true);\n  }\n}\n\n/**\n * This class will define an ajf field with SingleChoice\n */\nexport class AjfSingleChoiceField extends AjfFieldWithChoices {\n  constructor(obj?: any) {\n    super(obj);\n  }\n\n  validateValue(value: any): boolean {\n    return value == null || this.choices.filter(x => x === value).length > 0;\n  }\n\n  getMaxConditionalBranches(): number {\n    return Math.max(1, this.choices.length + 1);\n  }\n}\n\n/**\n * This class will define an ajf field with MultipleChoice\n */\nexport class AjfMultipleChoiceField extends AjfSingleChoiceField {\n  constructor(obj?: any) {\n    let defaultValue = obj && obj.defaultValue || [];\n    obj = {...obj || {}, defaultValue};\n    super(obj);\n  }\n\n  validateValue(value: any): boolean {\n    if (value instanceof Array) {\n      let i = 0;\n      let l: number = value.length;\n      let good = true;\n      while (good && i < l) {\n        good = super.validateValue(value[i++]);\n      }\n      return good;\n    } else {\n      return super.validateValue(value);\n    }\n  }\n\n  getMaxConditionalBranches(): number {\n    let total = 0;\n    let l: number = this.choices.length;\n    let f: number[] = [1];\n\n    for (let i = 1; i <= l; i++) {\n      f.push(factorial(i));\n    }\n\n    for (let i = 1; i <= l; i++) {\n      total += f[l] / (f[i] * f[l - i]);\n    }\n\n    return total;\n  }\n}\n\n/**\n * This class will define an formula field\n */\nexport class AjfFormulaField extends AjfNumberField {\n  constructor(obj?: any) {\n    super(obj);\n    this.setEditable(false);\n  }\n}\n\n/**\n * This class will define an ajf date field\n */\nexport class AjfDateField extends AjfField {\n  minDate: Date | 'today';\n  maxDate: Date | 'today';\n\n  minDateValue: Date;\n  maxDateValue: Date;\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat(['maxDate', 'minDate']);\n\n    this.minDate = obj && obj.minDate || null;\n    this.maxDate = obj && obj.maxDate || null;\n\n    this.minDateValue = this.minDate === 'today' ? new Date() : <Date>this.minDate;\n    this.maxDateValue = this.maxDate === 'today' ? new Date() : <Date>this.maxDate;\n  }\n\n  validateValue(value: any): boolean {\n    return value === value.toString();\n  }\n}\n\n\nexport class AjfDateInputField extends AjfField {\n  constructor(obj?: any) {\n    super(obj);\n  }\n\n  validateValue(value: any): boolean {\n    return value === value.toString();\n  }\n}\n\nexport class AjfTimeField extends AjfField {\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.jsonExportedMembers = this.jsonExportedMembers\n      .concat([]);\n  }\n\n  validateValue(value: any): boolean {\n    return value === value.toString();\n  }\n}\n\nexport class AjfTableField extends AjfField {\n  rows: string[][];\n  columnLabels: string[] = [];\n  rowLabels: string[] = [];\n  hideEmptyRows: boolean = false;\n\n\n  constructor(obj?: any) {\n    super(obj);\n\n    this.setEditable(obj && obj.editable || false);\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat(\n      [ 'rows', 'columnLabels', 'rowLabels' ]);\n\n    this.rows = obj && obj.rows || [];\n    this.columnLabels = obj && obj.columnLabels || [];\n    this.rowLabels = obj && obj.rowLabels || [];\n    this.hideEmptyRows = obj && obj.hideEmptyRows || false;\n  }\n\n  validateValue(value: any): boolean { return value === value.toString(); }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfFieldType} from './nodes';\n\nexport function fieldIconName(type: AjfFieldType): string {\n  return `ajf-icon-field-${AjfFieldType[type].toLowerCase()}`;\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\nimport {fieldIconName} from './field-utils';\nimport {AjfField, AjfFieldType} from './nodes';\n\n@Pipe({name: 'fieldIcon'})\nexport class FieldIconPipe implements PipeTransform {\n  transform(field: AjfField | AjfFieldType): string {\n    return fieldIconName(field instanceof AjfField ? field.fieldType : field);\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {EventEmitter} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {Observable, ReplaySubject} from 'rxjs';\n\nimport {AjfCondition, AjfFormula} from '@ajf/core/models';\nimport {AjfChoice} from './choices';\nimport {\n  AjfDateField, AjfEmptyField, AjfField, AjfFieldWithChoices, AjfNode, AjfNodeGroup,\n  AjfRepeatingSlide, AjfSlide, AjfTableField, IAjfSlide\n} from './nodes';\nimport {AjfValidationGroup, AjfValidationResult} from './validation';\nimport {AjfWarningGroup, AjfWarningResult} from './warning';\n\n\nexport interface AjfFieldState {\n  visibility: boolean;\n  value: any;\n}\n\nexport interface IAjfNodeInstance {\n  node: AjfNode;\n  prefix?: number[];\n  visible?: boolean;\n}\n\n\nexport class AjfNodeInstance implements IAjfNodeInstance {\n  private _updatedEvt: EventEmitter<void> = new EventEmitter<void>();\n  private _updated: Observable<void>;\n  get updated(): Observable<void> { return this._updated; }\n\n  private _node: AjfNode;\n  get node(): AjfNode { return this._node; }\n  // is the index of node loop\n  private _prefix: number[];\n  get prefix(): number[] { return this._prefix.slice(0); }\n  // if is true this node is visible on the form\n  private _visible: boolean;\n  get visible(): boolean { return this._visible; }\n\n  get suffix(): string {\n    if (this.prefix == null || this.prefix.length == 0) { return ''; }\n    return `__${this.prefix.join('__')}`;\n  }\n\n  /**\n   * this method will get the complete name of the field\n   * @return : string\n   */\n  get completeName(): string {\n    return `${this.node.name}${this.suffix}`;\n  }\n\n  //  index of conditionalBranches that verified the branch\n  verifiedBranch: number;\n  conditionalBranches: AjfCondition[];\n\n  visibility: AjfCondition | null;\n\n  constructor(params: IAjfNodeInstance, _context?: any) {\n    this._updated = this._updatedEvt.asObservable();\n\n    this._node = params.node;\n    this._prefix = params.prefix != null ? params.prefix.slice(0) : [];\n    this._visible = params.visible != null ? params.visible : true;\n  }\n\n  protected setNode(node: AjfNode) { this._node = node; }\n\n  triggerUpdate(): void {\n    this._updatedEvt.emit();\n  }\n\n  /**\n   * Update nodes visibility based on context value.\n   * Returns true if the visibility has changes\n   *\n   * @param context Context value\n   * @param branchVisibility\n   *\n   * @memberOf AjfNodeInstance\n   */\n  updateVisibility(context: any, branchVisibility = true): boolean {\n    if (this.visibility == null) { return false; }\n    const visibility: AjfCondition = this.visibility;\n\n    const oldVisibility: boolean = this.visible;\n    let newVisibility: boolean = branchVisibility && visibility.evaluate(context);\n    if (newVisibility !== this.visible) {\n      this._visible = newVisibility;\n    }\n\n    return oldVisibility !== newVisibility;\n  }\n\n  updateConditionalBranches(context: any): boolean {\n    const conditionalBranches = this.conditionalBranches;\n\n    if (conditionalBranches != null) {\n      const oldBranch = this.verifiedBranch;\n      let idx = 0;\n      let found = false;\n      while (idx < conditionalBranches.length && !found) {\n        let verified: boolean = conditionalBranches[idx].evaluate(context);\n        if (verified) {\n          found = true;\n          if (idx !== this.verifiedBranch) {\n            this.verifiedBranch = idx;\n          }\n        }\n        idx++;\n      }\n\n      if (oldBranch !== this.verifiedBranch) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\nexport class AjfFieldInstance extends AjfNodeInstance {\n  // if the field pass the validation\n  valid: boolean;\n  // number of repetitions\n  reps = 0;\n  // an array of AjfValidationResult\n  protected _validationResults: AjfValidationResult[] = [];\n  // an array of AjfWarningResult\n  protected _warningResults: AjfWarningResult[] = [];\n  protected _defaultValue: any = null;\n\n  get field(): AjfField { return <AjfField>this.node; }\n  set field(field: AjfField) { this.setNode(field); }\n\n  private _value: any;\n  // the value of field\n  get value(): any { return this._value != null && this._value || this._defaultValue; }\n  set value(value: any) { this._value = value; }\n\n  private _triggerWarning: ReplaySubject<void> = new ReplaySubject<void>(1);\n  get triggerWarning(): Observable<void> { return this._triggerWarning.asObservable(); }\n\n  constructor(params: IAjfNodeInstance, context?: any) {\n    super(params, context);\n    if (this.node != null && context != null) {\n      if (context[this.node.name] != null) {\n        this.value = context[this.node.name];\n      } else if (context[this.completeName] != null) {\n        this.value = context[this.completeName];\n      } else {\n        this.value = null;\n      }\n    }\n    const defVal = (<AjfField>this.node).defaultValue;\n    this._defaultValue = this.node && defVal != null ? defVal : null;\n  }\n\n  /**\n   * this method will get the validationResults value of the field\n   * @return : _validationResults\n   */\n  get validationResults(): AjfValidationResult[] {\n    return this._validationResults;\n  }\n\n  /**\n   * this method will get the warningResults value of the field\n   * @return : _warningResults\n   */\n  get warningResults(): AjfWarningResult[] {\n    return this._warningResults;\n  }\n\n  formula: AjfFormula | null;\n  validation: AjfValidationGroup | null;\n  warning: AjfWarningGroup | null;\n  nextSlideCondition: AjfCondition | null;\n\n  updateFormula(context: any): { changed: boolean, value: any } {\n    const formula = this.formula;\n    const editable = this.field.editable;\n    if (formula != null && this.visible && (!editable || (editable && this.value == null))) {\n      let newValue: any = formula.evaluate(context);\n      const oldValue = this.value;\n      if (newValue !== this.value) {\n        this.value = newValue;\n        context[this.completeName] = this.value;\n        context.$value = this.value;\n      }\n      return {\n        changed: newValue !== oldValue,\n        value: newValue\n      };\n    }\n    return { changed: false, value: this.value };\n  }\n\n  private _makeSupplementaryContext(context: any, supplementaryInformations: any): any {\n    Object.keys(supplementaryInformations).forEach((key) => {\n      context[`__supplementary__${key}__`] = supplementaryInformations[key];\n    });\n    return context;\n  }\n\n  updateValidation(context: any, supplementaryInformations?: any): void {\n    const validation = this.validation;\n    if (validation == null) { return; }\n\n    if (supplementaryInformations) {\n      this._makeSupplementaryContext(context, supplementaryInformations);\n    }\n\n    if (context[this.completeName] != null && validation && validation.forceValue) {\n      this.value = validation.evaluateForceValue(context);\n      context[this.completeName] = this.value;\n      context.$value = this.value;\n    }\n\n    if (validation != null) {\n      this._validationResults = validation.evaluate(context[this.completeName], context);\n      this.valid = this.validationResults\n        .reduce((prev: boolean, x: AjfValidationResult) => prev && x.result, true);\n    } else {\n      this.valid = true;\n    }\n  }\n\n  updateWarning(context: any): void {\n    const warning = this.warning;\n\n    if (context[this.completeName] != null && warning) {\n      this._warningResults = warning.evaluate(context);\n    }\n  }\n\n  updateNextSlideCondition(context: any): boolean {\n    if (this.nextSlideCondition != null) {\n      return this.nextSlideCondition.evaluate(context);\n    }\n    return false;\n  }\n\n  /**\n   * this method will update the state of the field\n   * @param   context         : any - the context of the field to update\n   * @param   branchVisibility: boolean\n   */\n  updateFieldState(context: any, branchVisibility = true): void {\n    this.updateVisibility(context, branchVisibility);\n    this.updateConditionalBranches(context);\n    this.updateFormula(context);\n    this.updateValidation(context);\n    this.updateWarning(context);\n    this.updateNextSlideCondition(context);\n  }\n\n  emitTriggerWarning(): void {\n    this._triggerWarning.next();\n  }\n}\n\nexport class AjfFieldWithChoicesInstance extends AjfFieldInstance {\n  choicesFilter: AjfFormula;\n  filteredChoices: AjfChoice<any>[];\n  triggerConditions: AjfCondition[];\n\n  get field(): AjfFieldWithChoices { return <AjfFieldWithChoices>this.node; }\n  set field(field: AjfFieldWithChoices) { this.setNode(field); }\n\n  private _triggerSelection: ReplaySubject<null> = new ReplaySubject<null>(1);\n  get triggerSelection(): Observable<null> { return this._triggerSelection.asObservable(); }\n  private _firstTriggerConditionDone: any = {};\n\n  constructor(params: IAjfNodeInstance, context?: any) {\n    super(params, context);\n    this.filteredChoices = this.field.choices.slice(0);\n  }\n\n  updateFilteredChoices(context: any): void {\n    if (this.choicesFilter != null) {\n      this.filteredChoices = this.field.choicesOrigin\n        .getChoices()\n        .filter(c => {\n          context.$choiceValue = c.value;\n          return this.choicesFilter.evaluate(context);\n        });\n    } else {\n      this.filteredChoices = this.field.choicesOrigin\n        .getChoices();\n    }\n  }\n\n  updateTriggerConditions(context: any): boolean {\n    if (this._firstTriggerConditionDone[this.completeName]) {\n      return false;\n    }\n    let found = false;\n    const conditionsNum = this.triggerConditions.length;\n    for (let i = 0 ; i < conditionsNum ; i++) {\n      if (this.triggerConditions[i].evaluate(context)) {\n        found = true;\n        break;\n      }\n    }\n    this._firstTriggerConditionDone[this.completeName] = found;\n    return found;\n  }\n\n  emitTriggerSelection(): void {\n    this._triggerSelection.next(null);\n  }\n}\n\nexport class AjfNodeGroupInstance extends AjfNodeInstance {\n  nodesNames: string[];\n  nodes: AjfNodeInstance[];\n  flatNodes: AjfNodeInstance[];\n  formulaReps: AjfFormula | null;\n\n  // number of repetitions\n  private _reps: number;\n  get reps(): number { return this._reps; }\n  set reps(reps: number) {\n    this._reps = reps;\n    this._repsArr = new Array(reps);\n  }\n\n  private _repsArr: Array<number>;\n  get repsArr(): Array<number> { return this._repsArr; }\n\n  get valid(): boolean {\n    return this.nodes.map(n => {\n      if (Object.keys(n).indexOf('valid') > -1) {\n        return (<any>n).valid;\n      }\n      return true;\n    }).reduce((v1, v2) => v1 && v2);\n  }\n\n  get nodeGroup(): AjfNodeGroup { return <AjfNodeGroup>this.node; }\n  protected setNodeGroup(nodeGroup: AjfNodeGroup) { this.setNode(nodeGroup); }\n\n  constructor(params: IAjfNodeInstance, context?: any) {\n    super(params, context);\n  }\n\n  updateRepsNum(context: any): number {\n    const oldReps: number = this.reps || 0;\n    if (this.nodeGroup.formulaReps == null) {\n      const ctxReps = context[this.completeName];\n      if (ctxReps != null) {\n        this.reps = ctxReps;\n      } else if (oldReps == 0) {\n        this.reps = 1;\n      }\n    } else {\n      let newReps = this.nodeGroup.formulaReps.evaluate(context);\n      if (newReps !== oldReps) {\n        this.reps = newReps;\n      }\n    }\n    return oldReps;\n  }\n}\n\nexport interface IAjfSlideInstance extends IAjfNodeInstance {\n  nodes: AjfNodeInstance[];\n  flatNodes: AjfNodeInstance[];\n  readonly valid: boolean;\n  readonly slide: IAjfSlide;\n}\n\nexport class AjfSlideInstance extends AjfNodeInstance implements IAjfSlideInstance {\n  nodes: AjfNodeInstance[] = [];\n  flatNodes: AjfNodeInstance[] = [];\n  position: number;\n  get valid(): boolean {\n    return this.flatNodes.map(n => {\n      if (n.visible && Object.keys(n).indexOf('valid') > -1) {\n        return (<any>n).valid;\n      }\n      return true;\n    }).reduce((v1, v2) => v1 && v2, true);\n  }\n  get slide(): AjfSlide { return <AjfSlide>this.node; }\n  protected setSlide(slide: AjfSlide) { this.setNode(slide); }\n}\n\nexport class AjfRepeatingSlideInstance extends AjfSlideInstance implements IAjfSlideInstance {\n  formulaReps: AjfFormula;\n  position: number;\n  slideNodes: AjfNodeInstance[][];\n  canRemoveGroup: boolean;\n  canAddGroup: boolean;\n\n  private _reps: number;\n  get reps(): number { return this._reps; }\n  set reps(reps: number) {\n    this._reps = reps;\n    this.canRemoveGroup = this.slide.minReps === 0 || reps > this.slide.minReps;\n    this.canAddGroup = this.slide.maxReps === 0 || reps < this.slide.maxReps;\n    this._repsArr = new Array(reps);\n  }\n\n  private _repsArr: Array<number>;\n  get repsArr(): Array<number> { return this._repsArr; }\n\n  get slide(): AjfRepeatingSlide { return <AjfRepeatingSlide>this.node; }\n\n  get nodesPerSlide(): number {\n    return this.nodes != null ? this.nodes.length / this.reps : 0;\n  }\n\n  protected setSlide(slide: AjfRepeatingSlide) { this.setNode(slide); }\n\n  constructor(params: IAjfNodeInstance, context?: any) {\n    super(params, context);\n  }\n\n  validSlide(idx: number): boolean {\n    if (idx >= this.slideNodes.length) {\n      return true;\n    }\n    return this.slideNodes[idx]\n      .map(n => {\n        if (n.visible && Object.keys(n).indexOf('valid') > -1) {\n          return (<any>n).valid;\n        }\n        return true;\n      }).reduce((v1, v2) => v1 && v2, true);\n  }\n\n  slidePosition(idx: number): number {\n    return this.position + idx;\n  }\n\n  updateRepsNum(context: any): number {\n    const oldReps: number = this.reps || 0;\n    if (this.slide.formulaReps == null) {\n      const ctxReps = context[this.completeName];\n      if (ctxReps != null) {\n        this.reps = ctxReps;\n      } else if (oldReps == 0) {\n        this.reps = 1;\n      }\n    } else {\n      let newReps = this.slide.formulaReps.evaluate(context);\n      if (newReps !== oldReps) {\n        this.reps = newReps;\n      }\n    }\n    return oldReps;\n  }\n}\n\nexport class AjfTableFieldInstance extends AjfFieldInstance {\n\n  constructor(params: IAjfNodeInstance, context?: any) {\n    super(params, context);\n    this.setValue(context);\n    this._hideEmptyRows = (<AjfTableField>this.node).hideEmptyRows;\n  }\n\n  private _hideEmptyRows: boolean;\n\n  get hideEmptyRows(): boolean {\n    return this._hideEmptyRows;\n  }\n\n  private _matrixValue: string[][];\n  private _matrixFormControl: FormControl[][];\n  private _matrixFormControlWithLabels: (FormControl | string)[][];\n  private _context: any = {};\n\n\n  get controls(): FormControl[][] {\n    return this._matrixFormControl;\n  }\n\n  set controls(v: FormControl[][]) {\n    this._matrixFormControl = v;\n    this._matrixFormControlWithLabels = this._controlsWithLabels();\n  }\n\n  get controlsWithLabels(): (FormControl | string)[][] {\n    return this._matrixFormControlWithLabels;\n  }\n\n  private _controlsWithLabels(): (FormControl | string) [][] {\n    let node = <AjfTableField>this.node;\n    let ret: (FormControl | string)[][] = [];\n    let i = 0;\n    for (let rowLabel of <any>(node.rowLabels)) {\n      ret.push([rowLabel].concat(<any>this._matrixFormControl[i]));\n      i = i + 1;\n    }\n    ret.unshift([node.label].concat(node.columnLabels));\n    return ret;\n  }\n\n  get value() {\n    let node = <AjfTableField>this.node;\n    if (node.editable) {\n      return this._matrixFormControl;\n    }\n    return this._matrixValue;\n  }\n  set value(_v: any) {}\n\n  get context(): any {\n    return this._context;\n  }\n\n  setValue(context: any) {\n    let node = <AjfTableField>this.node;\n    if (!node.editable) {\n      let value: string[][] = [];\n      let rowIndex = 0;\n      node.rows.forEach((row) => {\n        row.forEach((k) => {\n          this._context[k] = context[k];\n        });\n        value[rowIndex] = [node.rowLabels[rowIndex]]\n          .concat(\n          row.map(k => context[k])\n          );\n        rowIndex += 1;\n      });\n      value.unshift([node.label].concat(node.columnLabels));\n      this._matrixValue = value;\n    } else {\n      this._context = context;\n    }\n  }\n\n  get visibleColumns(): string[][] {\n    if (this.hideEmptyRows) {\n      return this.value\n        .filter((column: any[]) =>\n          column\n            .slice(1)\n            .reduce((a: any, b: any) => {\n              return a || (b != null && b !== '' && b !== 0 && b !== '0');\n            }, false));\n    }\n    return this.value;\n  }\n}\n\nexport class AjfDateFieldInstance extends AjfFieldInstance {\n  get field(): AjfDateField { return this.field; }\n  set field(field: AjfDateField) { this.setNode(field); }\n}\n\nexport class AjfEmptyFieldInstance extends AjfFieldInstance {\n  get field(): AjfEmptyField { return this.field; }\n  set field(field: AjfEmptyField) { this.setNode(field); }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AfterViewInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\nimport {Observable, Subscription} from 'rxjs';\nimport {filter, withLatestFrom} from 'rxjs/operators';\n\nimport {AjfFieldType, AjfFieldWithChoices} from './nodes';\nimport {\n  AjfDateFieldInstance, AjfEmptyFieldInstance, AjfFieldInstance,\n  AjfFieldWithChoicesInstance, AjfTableFieldInstance\n} from './nodes-instances';\nimport {AjfFormRendererService} from './form-renderer';\n\nexport interface AjfFormFieldWarningAlertResult { result: boolean; }\n\nexport class AjfFormFieldValueChanged { field: AjfFormField; }\n\n\nexport abstract class AjfFormField implements AfterViewInit, OnDestroy, OnInit {\n  // AjfFieldType obj implement the type of field\n  // ( String, Text, Number, Boolean, SingleChoice, MultipleChoice,\n  // Formula, Empty, Composed )\n  ajfFieldTypes = AjfFieldType;\n  // this observable implement abstract control\n  control: Observable<AbstractControl | null>;\n\n  private _fieldInstance: AjfFieldInstance;\n  get fieldInstance(): AjfFieldInstance { return this._fieldInstance; }\n  set fieldInstance(fieldInstance: AjfFieldInstance) {\n    this._fieldInstance = fieldInstance;\n    this._fieldUpdateSubscription.unsubscribe();\n    this._fieldUpdateSubscription = fieldInstance.updated.subscribe(() => {\n      if (this._changeDetectionRef) {\n        try {\n          this._changeDetectionRef.detectChanges();\n        } catch (e) { }\n      }\n    });\n  }\n\n  get fwcInst(): AjfFieldWithChoicesInstance {\n    return this._fieldInstance as AjfFieldWithChoicesInstance;\n  }\n  get fwc(): AjfFieldWithChoices { return this._fieldInstance.field as AjfFieldWithChoices; }\n  get datefInst(): AjfDateFieldInstance { return this._fieldInstance as AjfDateFieldInstance; }\n  get tablefInst(): AjfTableFieldInstance { return this._fieldInstance  as AjfTableFieldInstance; }\n  get emptyfInst(): AjfEmptyFieldInstance { return this._fieldInstance as AjfEmptyFieldInstance; }\n\n  singleChoiceSelect: any;\n  multipleChoiceSelect: any;\n\n  // this private AjfFieldValueChanged event emitter emit an event when the\n  // field value is changed\n  private _valueChanged: EventEmitter<AjfFormFieldValueChanged> =\n      new EventEmitter<AjfFormFieldValueChanged>();\n  // this @output expose the value changed like an observable\n  get valueChanged(): Observable<AjfFormFieldValueChanged> {\n    return this._valueChanged.asObservable();\n  }\n\n  private _triggerSelectionSubscription: Subscription = Subscription.EMPTY;\n  private _triggerWarningSubscription: Subscription = Subscription.EMPTY;\n  private _fieldUpdateSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * this constructor will init _rendererService _changeDetectionRef _alertCtrl\n   * and init the messagesWarning subscription\n   */\n  constructor(protected _rendererService: AjfFormRendererService,\n              protected _changeDetectionRef: ChangeDetectorRef) {}\n\n  abstract showWarningAlertPrompt(\n    messagesWarning: string[]\n  ): Observable<AjfFormFieldWarningAlertResult>;\n\n  /**\n   * this method will init the control, the filtere choices and the change\n   * detection reference\n   */\n  ngOnInit(): void {\n    this.control = this._rendererService.getControl(this.fieldInstance);\n    this._triggerWarningSubscription = this.fieldInstance.triggerWarning\n      .pipe(\n        withLatestFrom(this.control),\n        filter(v => v[1] != null)\n      )\n      .subscribe((v: [void, AbstractControl | null]) => {\n        const control = v[1];\n        const s = this.showWarningAlertPrompt(\n          this.fieldInstance.warningResults.filter(w => w.result).map(w => w.warning)\n        ).subscribe(\n          (r: AjfFormFieldWarningAlertResult) => {\n            if (r.result) { control!.setValue(null); }\n          },\n          (_e: any) => { if (s) { s.unsubscribe(); }},\n          () => { if (s) { s.unsubscribe(); }}\n        );\n      });\n  }\n\n  ngAfterViewInit() {\n    if (this.fieldInstance instanceof AjfFieldWithChoicesInstance) {\n      this._triggerSelectionSubscription = this.fieldInstance.triggerSelection\n        .subscribe(() => {\n          this._triggerSelection();\n        });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._triggerSelectionSubscription.unsubscribe();\n    this._triggerWarningSubscription.unsubscribe();\n    this._fieldUpdateSubscription.unsubscribe();\n  }\n\n  private _triggerSelection(): void {\n    if (this.singleChoiceSelect != null && !this.singleChoiceSelect._isOpen) {\n      this.singleChoiceSelect.open();\n    } else if (this.multipleChoiceSelect != null &&\n               !this.multipleChoiceSelect._isOpen) {\n      this.multipleChoiceSelect.open();\n    }\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport * as esprima from 'esprima';\nconst esprimaMod: any = (esprima as any).default || esprima;\nconst {tokenize} = esprimaMod;\n\nimport {AjfCondition, AjfFormula} from '@ajf/core/models';\n\nimport {\n  AjfField, AjfFieldWithChoices, AjfNode, AjfNodeGroup, AjfRepeatingSlide, AjfSlide, AjfTableField\n} from './nodes';\nimport {\n  AjfFieldInstance, AjfTableFieldInstance, AjfFieldWithChoicesInstance, AjfNodeGroupInstance,\n  AjfNodeInstance, AjfRepeatingSlideInstance, AjfSlideInstance, IAjfSlideInstance\n} from './nodes-instances';\nimport {AjfValidation, AjfValidationGroup} from './validation';\nimport {AjfWarning, AjfWarningGroup} from './warning';\n\n\nexport function orderedNodes(nodes: AjfNode[], parent: number | null): AjfNode[] {\n  let newNodes: AjfNode[] = [];\n  nodes.filter((n: AjfNode) => n.parent == parent)\n    .sort((n1: AjfNode, n2: AjfNode) => n1.parentNode - n2.parentNode)\n    .forEach((n: AjfNode) => {\n      newNodes.push(n);\n      newNodes = newNodes.concat(orderedNodes(nodes, n.id));\n    });\n  return newNodes;\n}\n\nexport function isRepeatingNode(node: AjfNode): boolean {\n  return node != null && (\n    node instanceof AjfRepeatingSlide ||\n    node instanceof AjfNodeGroup\n  );\n}\n\nexport function isContainerNode(node: AjfNode): boolean {\n  return node != null && (\n    node instanceof AjfSlide ||\n    node instanceof AjfRepeatingSlide ||\n    node instanceof AjfNodeGroup\n  );\n}\n\nexport function flattenNodes(nodes: AjfNode[]): AjfNode[] {\n  let flatNodes: AjfNode[] = [];\n  nodes.forEach((node: AjfNode) => {\n    flatNodes.push(node);\n    if (\n      node instanceof AjfNodeGroup ||\n      node instanceof AjfSlide ||\n      node instanceof AjfRepeatingSlide\n    ) {\n      flatNodes = flatNodes.concat(flattenNodes(node.nodes));\n    }\n  });\n  return flatNodes;\n}\n\nexport function flattenNodesInstances(\n  nodes: AjfNodeInstance[], includeGroups = false\n): AjfNodeInstance[] {\n  let flatNodes: AjfNodeInstance[] = [];\n  nodes.forEach((nodeInstance: AjfNodeInstance) => {\n    if (nodeInstance instanceof AjfFieldInstance) {\n      flatNodes.push(nodeInstance);\n    }\n    // @TODO missing composed fields\n    if (\n      nodeInstance instanceof AjfNodeGroupInstance ||\n      nodeInstance instanceof AjfSlideInstance ||\n      nodeInstance instanceof AjfRepeatingSlideInstance\n    ) {\n      if (includeGroups) {\n        flatNodes.push(nodeInstance);\n      }\n      flatNodes = flatNodes.concat(flattenNodesInstances(nodeInstance.nodes, includeGroups));\n    }\n  });\n  return flatNodes;\n}\n\nexport function getAncestorRepeatingNodes(\n  allNodes: AjfNode[] | AjfNodeInstance[], node: AjfNode\n): AjfNode[] {\n  let nodeGroups: AjfNode[] = [];\n  let curParent: number | null = node.parent;\n  while (curParent != null) {\n    node = (<any[]>allNodes).find((n: AjfNode | AjfNodeInstance) => {\n      return n instanceof AjfNode ? n.id == curParent : n.node.id == curParent;\n    });\n    if (node instanceof AjfNodeInstance) {\n      node = node.node;\n    }\n    if (isRepeatingNode(node)) {\n      nodeGroups.push(node);\n    }\n    curParent = node != null ? node.parent : null;\n  }\n  return nodeGroups;\n}\n\nexport function getAncestorRepeatingNodesNames(\n  allNodes: AjfNode[] | AjfNodeInstance[], node: AjfNode\n): {[prop: string]: number} {\n  let names: {[prop: string]: number} = {};\n  getAncestorRepeatingNodes(allNodes, node)\n    .forEach((n, idx) => {\n      ((<AjfNodeGroup>n).nodes || [])\n        .forEach((sn) => {\n          if (sn instanceof AjfField) {\n            names[sn.name] = idx;\n          }\n        });\n    });\n  return names;\n}\n\nexport function flattenNodesTree(nodes: AjfNodeInstance[]): IAjfSlideInstance[] {\n  let flatTree: IAjfSlideInstance[] = [];\n  nodes\n    .forEach((nodeInstance: AjfNodeInstance) => {\n      if (\n        nodeInstance instanceof AjfSlideInstance ||\n        nodeInstance instanceof AjfRepeatingSlideInstance\n      ) {\n        flatTree.push(nodeInstance);\n        nodeInstance.flatNodes = flattenNodesInstances(nodeInstance.nodes);\n      }\n    });\n  return flatTree;\n}\n\nexport function normalizeFormula(\n  formula: string, ancestorsNames: {[prop: string]: number}, prefix: number[]\n): string {\n  const ancestorsNameStrings = Object.keys(ancestorsNames);\n  const tokens = tokenize(formula)\n    .filter((token: any) => token.type == 'Identifier' && token.value != '$value')\n    .map((token: any) => token.value);\n  tokens.forEach((t: any) => {\n    if (ancestorsNameStrings.indexOf(t) > -1) {\n      formula = formula.replace(\n        new RegExp(`\\\\b${t}\\\\b`, 'g'),\n        `${t}__${prefix.slice(ancestorsNames[t]).join('__')}`\n      );\n    }\n  });\n  return formula;\n}\n\nfunction getInstanceCondition(\n  condition: AjfCondition, ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfCondition {\n  const oldCondition = condition.condition;\n  let newCondition = normalizeFormula(oldCondition, ancestorsNames, prefix);\n  if (newCondition === oldCondition) {\n    return condition;\n  }\n  return new AjfCondition({condition: newCondition});\n}\n\nfunction getInstanceFormula(\n  formula: AjfFormula, ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfFormula {\n  const oldFormula = formula.formula;\n  let newFormula = normalizeFormula(oldFormula, ancestorsNames, prefix);\n  if (newFormula === oldFormula) {\n    return formula;\n  }\n  return new AjfFormula({formula: newFormula});\n}\n\nfunction getInstanceConditions(\n  conditions: AjfCondition[], ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfCondition[] {\n  let changed = false;\n  const newConditions = conditions.map((condition) => {\n    const newCondition = getInstanceCondition(condition, ancestorsNames, prefix);\n    if (newCondition !== condition) {\n      changed = true;\n    }\n    return newCondition;\n  });\n  return changed ? newConditions : conditions;\n}\n\nfunction getInstanceValidation(\n  validation: AjfValidation, ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfValidation {\n  const oldValidation = validation.condition;\n  let newValidation = normalizeFormula(oldValidation, ancestorsNames, prefix);\n  if (newValidation === oldValidation) {\n    return validation;\n  }\n  return new AjfValidation({condition: newValidation});\n}\n\nfunction getInstanceValidations(\n  validations: AjfValidation[], ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfValidation[] {\n  let changed = false;\n  const newValidations = validations.map((validation) => {\n    const newValidation = getInstanceValidation(validation, ancestorsNames, prefix);\n    if (newValidation !== validation) {\n      changed = true;\n    }\n    return newValidation;\n  });\n  return changed ? newValidations : validations;\n}\n\nfunction getInstanceWarning(\n  warning: AjfWarning, ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfWarning {\n  const oldWarning = warning.condition;\n  let newWarning = normalizeFormula(oldWarning, ancestorsNames, prefix);\n  if (newWarning === oldWarning) {\n    return warning;\n  }\n  return new AjfWarning({condition: newWarning});\n}\n\nfunction getInstanceWarnings(\n  warnings: AjfWarning[], ancestorsNames: {[prop: string]: number}, prefix: number[]\n): AjfWarning[] {\n  let changed = false;\n  const newWarnings = warnings.map((warning) => {\n    const newWarning = getInstanceWarning(warning, ancestorsNames, prefix);\n    if (newWarning !== warning) {\n      changed = true;\n    }\n    return newWarning;\n  });\n  return changed ? newWarnings : warnings;\n}\n\nexport function nodeToNodeInstance(\n  allNodes: AjfNode[] | AjfNodeInstance[], node: AjfNode, prefix: number[], context: any\n): AjfNodeInstance | null {\n  let instance: AjfNodeInstance | null = null;\n  if (node instanceof AjfFieldWithChoices) {\n    instance = new AjfFieldWithChoicesInstance({node: node, prefix: prefix}, context);\n  } else if (node instanceof AjfTableField) {\n    instance = new AjfTableFieldInstance({node: node, prefix: prefix}, context);\n  } else if (node instanceof AjfField) {\n    instance = new AjfFieldInstance({node: node, prefix: prefix}, context);\n  } else if (node instanceof AjfNodeGroup) {\n    instance = new AjfNodeGroupInstance({node: node, prefix: prefix}, context);\n  } else if (node instanceof AjfRepeatingSlide) {\n    instance = new AjfRepeatingSlideInstance({node: node, prefix: prefix}, context);\n  } else if (node instanceof AjfSlide) {\n    instance = new AjfSlideInstance({node: node, prefix: prefix}, context);\n  }\n  if (instance != null) {\n    const hasPrefix = prefix != null && prefix.length > 0;\n    if (hasPrefix) {\n      const ancestorsNames = getAncestorRepeatingNodesNames(allNodes, node);\n\n      if (node.visibility != null) {\n        const oldVisibility = node.visibility.condition;\n        const newVisibility = normalizeFormula(oldVisibility, ancestorsNames, prefix);\n        instance.visibility = newVisibility !== oldVisibility ? new AjfCondition({\n          condition: newVisibility\n        }) : node.visibility;\n      }\n\n      instance.conditionalBranches = getInstanceConditions(\n        instance.node.conditionalBranches, ancestorsNames, prefix\n      );\n\n      if (\n          instance instanceof AjfNodeGroupInstance || instance instanceof AjfRepeatingSlideInstance\n        ) {\n        const formulaReps = instance instanceof AjfNodeGroupInstance ?\n          instance.nodeGroup.formulaReps :\n          instance.slide.formulaReps;\n        if (formulaReps != null) {\n          const oldFormula = formulaReps.formula;\n          let newFormula = normalizeFormula(oldFormula, ancestorsNames, prefix);\n          instance.formulaReps = newFormula !== oldFormula ?\n            new AjfFormula({formula: newFormula}) : formulaReps;\n        }\n      } else if (instance instanceof AjfFieldInstance) {\n        if (instance.field.formula != null) {\n          instance.formula = getInstanceFormula(instance.field.formula, ancestorsNames, prefix);\n        }\n\n        if (instance.field.validation != null) {\n          const newConditions = getInstanceValidations(\n            instance.field.validation.conditions, ancestorsNames, prefix\n          );\n          if (newConditions !== instance.field.validation.conditions) {\n            instance.validation = new AjfValidationGroup(instance.field.validation);\n            instance.validation.conditions = newConditions;\n          } else {\n            instance.validation = instance.field.validation;\n          }\n        }\n\n        if (instance.field.warning != null) {\n          const newWarnings = getInstanceWarnings(\n            instance.field.warning.conditions, ancestorsNames, prefix\n          );\n          if (newWarnings !== instance.field.warning.conditions) {\n            instance.warning = new AjfWarningGroup(instance.field.warning);\n            instance.warning.conditions = newWarnings;\n          } else {\n            instance.warning = instance.field.warning;\n          }\n        }\n\n        if (instance.field.nextSlideCondition != null) {\n          instance.nextSlideCondition = getInstanceCondition(\n            instance.field.nextSlideCondition, ancestorsNames, prefix\n          );\n        }\n\n        if (instance instanceof AjfFieldWithChoicesInstance) {\n          if (instance.field.choicesFilter != null) {\n            instance.choicesFilter = getInstanceFormula(\n              instance.field.choicesFilter, ancestorsNames, prefix\n            );\n          }\n          if (instance.field.triggerConditions != null) {\n            instance.triggerConditions = getInstanceConditions(\n              instance.field.triggerConditions, ancestorsNames, prefix\n            );\n          }\n        }\n      }\n    } else {\n      instance.visibility = instance.node.visibility;\n      instance.conditionalBranches = instance.node.conditionalBranches;\n      if (\n        instance instanceof AjfNodeGroupInstance || instance instanceof AjfRepeatingSlideInstance\n      ) {\n        instance.formulaReps = (instance instanceof AjfNodeGroupInstance ?\n          instance.nodeGroup : instance.slide).formulaReps;\n      } else if (instance instanceof AjfFieldInstance) {\n        instance.formula = instance.field.formula;\n        instance.validation = instance.field.validation;\n        instance.warning = instance.field.warning;\n        instance.nextSlideCondition = instance.field.nextSlideCondition;\n        if (instance instanceof AjfFieldWithChoicesInstance) {\n          instance.choicesFilter = instance.field.choicesFilter;\n          instance.triggerConditions = instance.field.triggerConditions;\n        }\n      }\n    }\n  }\n  return instance;\n}\n\nexport function findNodeInstanceInTree(\n  nodes: AjfNodeInstance[], node: AjfNodeInstance\n): {container: AjfNodeInstance[], index: number} {\n  const index = nodes.indexOf(node);\n  if (index > -1) {\n    return {container: nodes, index: index};\n  }\n  const groups = nodes.filter(n => isContainerNodeInstance(n));\n  let i = 0;\n  const len = groups.length;\n  while (i < len) {\n    const res = findNodeInstanceInTree((<any>groups[i]).node.nodes, node);\n    if (res.index > -1) {\n      return res;\n    }\n    i++;\n  }\n  return {\n    container: [],\n    index: -1\n  };\n}\n\nexport function flattenNodeInstances(nodes: AjfNodeInstance[] = []): AjfNodeInstance[] {\n  let flatNodes: AjfNodeInstance[] = [];\n  nodes.forEach((nodeInstance: AjfNodeInstance) => {\n    flatNodes.push(nodeInstance);\n    if (\n      nodeInstance instanceof AjfNodeGroupInstance ||\n      nodeInstance instanceof AjfSlideInstance ||\n      nodeInstance instanceof AjfRepeatingSlideInstance\n    ) {\n      flatNodes = flatNodes.concat(flattenNodeInstances(nodeInstance.nodes));\n    }\n  });\n  return flatNodes;\n}\n\nexport function isContainerNodeInstance(node: AjfNodeInstance): boolean {\n  return node != null && (\n    node instanceof AjfSlideInstance ||\n    node instanceof AjfRepeatingSlideInstance ||\n    node instanceof AjfNodeGroupInstance\n  );\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {AjfValidatedProperty} from '@ajf/core/models';\n\n\n@Injectable()\nexport class AjfValidationService {\n  private _baseUtilFunctions: string[] = [\n    `/**\n        * count the number of digit contained on x.\n        * @param  x the value used for digit count\n        * @return the count of the digit\n      */\n    var digitCount = function(x) { return x.toString().length; }`,\n    `/**\n        * count the number of decimal contained on x.\n        * @param  x the value used for decimal count\n        * @return the count of the decimal\n      */\n    var decimalCount = function(x) {\n      return (parseFloat(x).toString().split('.')[1] || []).length;\n    }`,\n    `/**\n        * check if x is integer\n        * @param  x the value used for check\n        * @return true if x is a number\n      */\n    var isInt = function(x) { return !/[,.]/.test(x); }`,\n    `/**\n        * check if x is not empity\n        * @param  x the value used for check\n        * @return true if x defined and not null and the number of digit is > 0\n      */\n    var notEmpty = function (x) {\n      return (typeof x !== 'undefined' && x !== null ? x.toString().length > 0 : false);\n    }`,\n    `/**\n        * check if x is contained on array\n        * @param  x the value used for check\n        * @return the position of x on array or if array === x\n      */\n    var valueInChoice = function(array, x) { return array.indexOf(x) > -1 || array === x; }`,\n    `var scanGroupField = function(reps, acc, callback) {\n        for (var i = 0; i < reps; i++) {\n            acc = callback(acc, i);\n        }\n        return acc;\n    }`,\n    `/**\n        * sum the value contained on array\n        * @param  x the array\n        * @return the sum\n      */\n    var sum = function(array) {return array.reduce(function(a, b){ return a + b; }, 0); }`,\n    `var dateOperations = function(dString, period, operation, v) {\n        fmt = 'MM/DD/YYYY';\n        var d = (typeof dString !== 'undefined') ? dateUtils.parse(dString) : new Date();\n        if (operation == 'remove') {\n          v = -v;\n        }\n        var dateOp;\n        switch (period) {\n          case 'day':\n            dateOp = dateUtils.addDays;\n            break;\n          case 'month':\n            dateOp = dateUtils.addMonths;\n            break;\n          case 'year':\n            dateOp = dateUtils.addYears;\n            break;\n          default:\n            return -1;\n        }\n        return dateUtils.format(dateOp(d, v), fmt);\n      }`,\n    `/**\n        * round the num\n        * @param  num the value to round\n        * @param  digits how many digit\n        * @return num rounded\n      */\n      var round = function(num, digits) {\n        digits = digits || 0;\n        var f = 0;\n        try { f = parseFloat(num); } catch (e) { }\n        var m = Math.pow(10, digits);\n        return Math.round(f * m) / m;\n      }`,\n    `/**\n        * extract the property of the source object with property != null\n        * @param  source array of object wich contains property\n        * @param  property the property on wich we want filter\n        * @return array of dates\n      */\n      var extractArray = function(source, property, property2) {\n        source = (source || []).slice(0);\n        var l = source.length;\n        var res = [];\n        for (var i = 0; i < l ; i++) {\n          if (source[i][property] != null && source[i][property2] != null) {\n            res.push(source[i][property] + source[i][property2]);\n          }\n          else if (source[i][property] != null) {\n            res.push(source[i][property]);\n          }\n        }\n        return res;\n      }`,\n    `/**\n        * extract the property of the source object with property != null\n        * @param  source array of object wich contains property\n        * @param  propertues string array the properties to sum\n        * @return the sum\n      */\n      var extractSum = function(source, properties) {\n        var sum = 0;\n        properties = (properties || []).slice(0);\n        var l = properties.length;\n\n        for (var i = 0; i < l ; i++) {\n          var array = extractArray(source, properties[i]);\n          var leng = array.length;\n          for(var j = 0; j < leng; i++) {\n            sum += array[j];\n          }\n        }\n        return sum;\n      }`,\n      `/**\n        * extract the array of sum for each week != null\n        * @param  source array of object wich contains property\n        * @param  propertues string array the properties to sum\n        * @return the sum\n      */\n      var extractArraySum = function(source, properties) {\n        var arrays = [];\n        properties = (properties || []).slice(0);\n\n        for (var propI = 0; propI < properties.length ; propI++) {\n          var array = extractArray(source, properties[propI]);\n          arrays.push(array);\n        }\n\n        var res = [];\n        for (var weekI = 0; weekI < array.length; weekI ++ ) {\n          var sum = 0;\n          for (var propI = 0; propI < properties.length ; propI++) {\n            sum = sum + arrays[propI][weekI]\n          }\n          res.push(sum);\n        }\n        return res;\n      }`,\n    `/**\n        * draw a threshold line on chart related to the property\n        * @param  source array of object wich contains property\n        * @param  property the property on wich we want filter\n        * @return array of dates\n      */\n      var drawThreshold = function(source, property, treshold) {\n        source = (source || []).slice(0);\n        var l = source.length;\n        var res = [];\n        for (var i = 0; i < l ; i++) {\n          if (source[i][property] != null) {\n            res.push(treshold);\n          }\n        }\n        return res;\n      }`,\n    `/**\n        * extract the dates of the source object with property != null\n        * @param  source array of object wich contains property and date_start\n        * @param  property the property on wich we want to calculate dates\n        * @param  format the format of the date\n        * @return array of dates\n      */\n      var extractDates = function(source, property, format) {\n        source = (source || []).slice(0);\n        var l = source.length;\n        var res = [];\n        var prefix = '';\n        for (var i = 0; i < l ; i++) {\n          if (source[i][property] != null) {\n            switch(format) {\n              case \"WW\":\n                prefix = \"W\";\n                break;\n              case \"MM\":\n                prefix = \"M\";\n                break;\n              default:\n                prefix = \"\";\n            }\n            res.push(prefix + formatDate(source[i][\"date_start\"], format));\n          }\n        }\n        return res;\n      }`,\n    `/**\n        * extract the last property contains in source != null\n        * @param  source array of object wich contains property and date_start\n        * @param  property the property to find\n        * @return the last property != null\n      */\n      var lastProperty = function(source, property) {\n        source = (source || []).slice(0);\n        var l = source.length -1;\n\n        while (l >= 0 && source[l][property] == null) {\n          l--;\n          if (l < 0) return 0;\n        }\n        return l >= 0 ? source[l][property] : 0;\n      }`,\n    `var sumLastProperties = function(source, properties) {\n        source = (source || []).slice(0);\n        var sum = 0;\n        for (var i = 0; i < properties.length; i++) {\n          sum += lastProperty(source, properties[i]);\n        }\n\n        return sum;\n      }`,\n    `/**\n        * compute the trend of the property contained on the source.\n        * @param  source array of object wich contains property\n        * @param  property the property on wich we want to calculate the trend\n        * @return an html icon that identifies the trend\n      */\n      var calculateTrendProperty = function(source, property) {\n        source = (source || []).slice(0);\n        var last = source.length - 1;\n        while (source[last][property] == null) {\n          if (last == 0) {\n            break;\n          }\n          last--;\n        }\n        var lastLast = last - 1;\n        if (last == 0) {\n          lastLast = last;\n        } else {\n          while (source[lastLast][property] == null) {\n            if (lastLast == 0) {\n              lastLast = last;\n              break;\n            }\n            lastLast--;\n          }\n        }\n\n        var lastProperty = source[last]?(source[last][property] || 0): 0;\n        var lastLastProperty = source[lastLast]?(source[lastLast][property] || 0): 0;\n\n        if (lastProperty == lastLastProperty) {\n          return '<p><i class=\"material-icons\" style=\"color:blue\">trending_flat</i></p>';\n        } else if (lastProperty > lastLastProperty) {\n          return '<p><i class=\"material-icons\" style=\"color:green\">trending_up</i></p>';\n        } else {\n          return '<p><i class=\"material-icons\" style=\"color:red\">trending_down</i></p>';\n        }\n      }`,\n    `/**\n        * compute the average value of the property contained on the source.\n        * @param  source array of object wich contains property\n        * @param  property the property on wich we want to calculate the average\n        * @param  range the range on wich we want to calculate the average\n        * @param  coefficent the coefficent used for calculate the treshold\n                  if coefficent is 0 mean return the count of property > 0\n        * @return the average value || the count of property > 0\n      */\n      var calculateAvgProperty = function(source, property, range, coefficient) {\n        source = (source || []).slice(0);\n\n        source.pop();\n\n        coefficient = coefficient || 1;\n        range = range || 12;\n\n        var l = source.length;\n        var res = 0;\n        var counter = 0;\n        var noZero = 0;\n\n        if(l < range) {\n          range = l;\n        }\n\n        while (range != 0) {\n          counter++;\n          if (source[l - 1][property] != null) {\n            res += source[l - 1][property];\n\n            if (source[l - 1][property] > 0) {\n              noZero++;\n            }\n          }\n          l--;\n          range--;\n        }\n\n        if (coefficient == 0) {\n          return noZero;\n        } else {\n          var treshold = (res/counter)*coefficient || 0;\n          return treshold;\n        }\n      }`,\n    `var alert = function(source, property, treshold, fmt) {\n        source = (source || []).slice(0);\n        var l = source.length;\n\n        if ( lastProperty(source, property)  > treshold ) {\n          return '<p><i class=\"material-icons\" style=\"color:red\">warning</i></p>';\n          } else {\n            return '<p></p>';\n          }\n      }`,\n    `var formatNumber = function(num, fmt) {\n        fmt = fmt || '0,0[.]0';\n        return numeral(num).format(fmt);\n      }`,\n    `var formatDate = function(date, fmt) {\n        fmt = fmt || 'MM-DD-YYYY';\n        return dateUtils.format(date, fmt);\n      }`,\n    `var isoMonth = function(date, fmt) {\n        fmt = fmt || 'MM';\n        var du = dateUtils;\n        return du.format(du.addDays(du.startOfMonth(date), 4),fmt)\n      }`,\n    `var nextCounterValue = function(counterName, firstValue) {\n        firstValue = firstValue != null ? firstValue : 0;\n        if (execContext['$$'+counterName] == null) {\n          execContext['$$'+counterName] = firstValue;\n        } else {\n          execContext['$$'+counterName]++;\n        }\n        return execContext['$$'+counterName];\n      }`,\n    `var getCoordinate = function(source, zoom) {\n        zoom = zoom || 6;\n        if(source == null) {\n          return [51.505,-0.09, zoom];\n        } else {\n          return [source[0], source[1], zoom];\n        }\n      }`\n  ];\n\n  private _functions: (Function | string)[] = [];\n  private _functionsStr: string = '';\n\n  constructor() {\n    this._initFunctions();\n  }\n\n  addFunction(f: Function | string): void {\n    this._functions.push(f);\n    this._initFunctions();\n  }\n\n  addFunctionHandler(name: string, fn: any): void {\n    if (AjfValidatedProperty.utils[name] === undefined) {\n      AjfValidatedProperty.utils[name] = {fn};\n    }\n  }\n\n  private _initFunctions(): void {\n    const functionsStr = this._functions\n      .map(f => typeof f === 'string' ? f : f.toString())\n      .join('; ');\n    this._functionsStr = `${this._baseUtilFunctions.join('; ')}; ${functionsStr}`;\n    AjfValidatedProperty.UTIL_FUNCTIONS = this._functionsStr;\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {EventEmitter, Injectable} from '@angular/core';\nimport {AbstractControl, FormControl, FormGroup} from '@angular/forms';\n\nimport {BehaviorSubject, Observable, Subject, Subscriber, Subscription, timer} from 'rxjs';\nimport {\n  debounceTime, filter, map, pairwise, publishReplay, refCount,\n  scan, share, startWith, withLatestFrom\n} from 'rxjs/operators';\n\nimport {AjfCondition} from '@ajf/core/models';\nimport {deepCopy} from '@ajf/core/utils';\nimport {AjfForm} from './forms';\nimport {AjfEmptyField, AjfNode, AjfNodeGroup, AjfTableField} from './nodes';\nimport {\n  AjfFieldInstance, AjfFieldWithChoicesInstance, AjfNodeGroupInstance, AjfNodeInstance,\n  AjfRepeatingSlideInstance, AjfSlideInstance, AjfTableFieldInstance, IAjfNodeInstance,\n  IAjfSlideInstance\n} from './nodes-instances';\nimport {\n  IAjfNodesInstancesOperation, IAjfRendererUpdateMap, IAjfRendererUpdateMapOperation,\n  IAjfRendererUpdateTableMapOperation\n} from './form-renderer-operations';\nimport {\n  flattenNodes, flattenNodesTree, flattenNodesInstances, isContainerNode,\n  isRepeatingNode, nodeToNodeInstance, orderedNodes\n} from './form-renderer-utils';\nimport {AjfValidationService} from './validation-service';\n\nimport * as esprima from 'esprima';\nconst esprimaMod: any = (esprima as any).default || esprima;\nconst {tokenize} = esprimaMod;\n\n\nexport enum AjfFormInitStatus {\n  Initializing,\n  Complete\n}\n\n\n@Injectable()\nexport class AjfFormRendererService {\n  private _visibilityNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _visibilityNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _repetitionNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _repetitionNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _conditionalBranchNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _conditionalBranchNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _formulaNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _formulaNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _validationNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _validationNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _warningNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _warningNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _filteredChoicesNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _filteredChoicesNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _triggerConditionsNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _triggerConditionsNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _nextSlideConditionsNodesMap: Observable<IAjfRendererUpdateMap>;\n  private _nextSlideConditionsNodesMapUpdates: Subject<IAjfRendererUpdateMapOperation>\n    = new Subject<IAjfRendererUpdateMapOperation>();\n\n  private _formInitEvent: EventEmitter<AjfFormInitStatus> = new EventEmitter<AjfFormInitStatus>();\n  readonly formInitEvent: Observable<AjfFormInitStatus> = this._formInitEvent.asObservable();\n\n  private _formGroup: BehaviorSubject<FormGroup | null> =\n    new BehaviorSubject<FormGroup | null>(null);\n  readonly formGroup: Observable<FormGroup | null> = this._formGroup.asObservable();\n\n  private _form: BehaviorSubject<{form: AjfForm | null, context?: any} | null> =\n    new BehaviorSubject<{form: AjfForm | null, context?: any} | null>(null);\n  private _nodes: Observable<AjfNodeInstance[]>;\n  private _flatNodes: Observable<IAjfNodeInstance[]>;\n  private _flatNodesTree: Observable<IAjfSlideInstance[]>;\n  private _nodesUpdates: Subject<IAjfNodesInstancesOperation>\n    = new Subject<IAjfNodesInstancesOperation>();\n  private _errorPositions: Observable<number[]>;\n  private _errors: Observable<number>;\n\n  private _formGroupSubscription: Subscription = Subscription.EMPTY;\n  private _valueChanged: Subject<void> = new Subject<void>();\n\n  private _nodesMaps: Observable<IAjfRendererUpdateMap>[];\n\n  private _nextSlideTrigger: EventEmitter<AjfNodeInstance> = new EventEmitter<AjfNodeInstance>();\n  readonly nextSlideTrigger: Observable<AjfNodeInstance> = this._nextSlideTrigger.asObservable();\n\n  private _slidesNum: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n  readonly slidesNum: Observable<number> = this._slidesNum.asObservable();\n\n  get nodesTree(): Observable<IAjfSlideInstance[]> { return this._flatNodesTree; }\n  get errorPositions(): Observable<number[]> { return this._errorPositions; }\n  get errors(): Observable<number> { return this._errors; }\n  get currentSupplementaryInformations(): any {\n    const form = this._form.getValue();\n    return form != null && form.form != null ? form.form.supplementaryInformations : null;\n  }\n\n  constructor(_: AjfValidationService) {\n    this._initUpdateMapStreams();\n    this._initNodesStreams();\n    this._initErrorsStreams();\n    this._initFormStreams();\n    this._updateFormValueAndValidity();\n  }\n\n  setForm(form: AjfForm | null, context: any = {}) {\n    this._initUpdateMapStreams();\n    if (\n      form != null && Object.keys(context).length === 0 &&\n      Object.keys(form.initContext).length > 0\n    ) {\n      context = form.initContext;\n    }\n    const currentForm = this._form.getValue();\n    if (\n      (currentForm == null && form != null) ||\n      (currentForm != null && form !== currentForm.form)\n    ) {\n      this._form.next({form: form, context: context});\n    }\n  }\n\n  getFormValue(): any {\n    const formGroup = this._formGroup.getValue();\n    if (formGroup == null) { return {}; }\n    let res = deepCopy(formGroup.value);\n    return res;\n  }\n\n  addGroup(group: AjfNodeGroupInstance | AjfRepeatingSlideInstance): Observable<boolean> {\n    return new Observable<boolean>((subscriber: Subscriber<boolean>) => {\n      if (group.formulaReps != null) {\n        subscriber.next(false);\n        subscriber.complete();\n        return;\n      }\n      const maxReps = group instanceof AjfNodeGroupInstance ?\n        group.nodeGroup.maxReps : group.slide.maxReps;\n      if (maxReps > 0 && group.reps + 1 > maxReps) {\n        subscriber.next(false);\n        subscriber.complete();\n        return;\n      }\n      const oldReps = group.reps;\n      group.reps = group.reps + 1;\n      this._nodesUpdates.next((nodes: AjfNodeInstance[]): AjfNodeInstance[] => {\n        const flatNodes = flattenNodesInstances(nodes, true);\n        this._adjustReps(flatNodes, group, oldReps, this.getFormValue());\n        subscriber.next(true);\n        subscriber.complete();\n        return nodes;\n      });\n    });\n  }\n\n  removeGroup(group: AjfNodeGroupInstance | AjfRepeatingSlideInstance): Observable<boolean> {\n    return new Observable<boolean>((subscriber: Subscriber<boolean>) => {\n      if (group.formulaReps != null) {\n        subscriber.next(false);\n        subscriber.complete();\n        return;\n      }\n      const minReps = group instanceof AjfNodeGroupInstance ?\n        group.nodeGroup.minReps : group.slide.minReps;\n      if (group.reps - 1 < minReps) {\n        subscriber.next(false);\n        subscriber.complete();\n        return;\n      }\n      const oldReps = group.reps;\n      group.reps = group.reps - 1;\n      this._nodesUpdates.next((nodes: AjfNodeInstance[]): AjfNodeInstance[] => {\n        this._adjustReps(nodes, group, oldReps, this.getFormValue());\n        subscriber.next(true);\n        subscriber.complete();\n        return nodes;\n      });\n    });\n  }\n\n  getControl(field: AjfFieldInstance): Observable<AbstractControl | null> {\n    return this.formGroup.pipe(\n      map((f) => {\n        const fieldName = field.completeName;\n        return f != null && f.contains(fieldName) ? f.controls[fieldName] : null;\n      })\n    );\n  }\n\n  private _initErrorsStreams(): void {\n    this._errorPositions = this._valueChanged.pipe(\n      withLatestFrom(this._nodes, this._form),\n      filter(v => v[2] != null && v[2].form != null),\n      map((v: [void, AjfNodeInstance[], {form: AjfForm | null, context?: any} | null]) => {\n        const nodes = v[1];\n        const form = v[2]!.form!;\n        let currentPosition = 0;\n        const errors: number[] = [];\n        nodes.forEach((node) => {\n          if (node instanceof AjfRepeatingSlideInstance) {\n            for (let i = 0 ; i < node.reps ; i ++) {\n              if (node.visible) {\n                currentPosition++;\n                if (i == 0) {\n                  node.position = currentPosition;\n                }\n                if (!node.validSlide(i)) {\n                  errors.push(currentPosition);\n                }\n              }\n            }\n          } else if (node instanceof AjfSlideInstance) {\n            if (node.visible) {\n              currentPosition++;\n              node.position = currentPosition;\n              if (!node.valid) {\n                errors.push(currentPosition);\n              }\n            }\n          }\n        });\n        form.valid = errors.length == 0;\n        this._slidesNum.next(currentPosition);\n        return errors;\n      }),\n      publishReplay(),\n      refCount()\n    );\n    this._errors = this._errorPositions.pipe(\n      map(e => e != null ? e.length : 0),\n      startWith(0),\n      publishReplay(),\n      refCount()\n    );\n  }\n\n  private _initUpdateMapStreams(): void {\n    this._visibilityNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._visibilityNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._repetitionNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._repetitionNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._conditionalBranchNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._conditionalBranchNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._formulaNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._formulaNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._validationNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._validationNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._warningNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._warningNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._filteredChoicesNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._filteredChoicesNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n    this._triggerConditionsNodesMap =\n      (<Observable<IAjfRendererUpdateTableMapOperation>>this._triggerConditionsNodesMapUpdates)\n        .pipe(\n          scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateTableMapOperation) => {\n            return op(rmap);\n          }, {}),\n          startWith<IAjfRendererUpdateMap>({}),\n          share()\n        );\n    this._nextSlideConditionsNodesMap =\n      (<Observable<IAjfRendererUpdateMapOperation>>this._nextSlideConditionsNodesMapUpdates).pipe(\n        scan((rmap: IAjfRendererUpdateMap, op: IAjfRendererUpdateMapOperation) => {\n          return op(rmap);\n        }, {}),\n        startWith<IAjfRendererUpdateMap>({}),\n        share()\n      );\n\n    this._nodesMaps = [\n      this._visibilityNodesMap,\n      this._repetitionNodesMap,\n      this._conditionalBranchNodesMap,\n      this._formulaNodesMap,\n      this._validationNodesMap,\n      this._warningNodesMap,\n      this._nextSlideConditionsNodesMap,\n      this._filteredChoicesNodesMap,\n      this._triggerConditionsNodesMap\n    ];\n  }\n\n  private _initFormStreams(): void {\n    const formObs = <Observable<{form: AjfForm | null, context?: any}>>this._form;\n    formObs\n      .pipe(map((_form) => {\n        return this._initFormGroupStreams(new FormGroup({}));\n      }))\n      .subscribe(this._formGroup);\n    formObs\n      .pipe(map((form) => {\n        return (_nodesInstances: AjfNodeInstance[]): AjfNodeInstance[] => {\n          const nodes = form != null && form.form != null ?\n            this._orderedNodesInstancesTree(\n              flattenNodes(form.form.nodes), form.form.nodes, undefined, [], form.context\n            ) : [];\n          let currentPosition = 0;\n          nodes.forEach((node) => {\n            if (node instanceof AjfRepeatingSlideInstance) {\n              for (let i = 0 ; i < node.reps ; i ++) {\n                if (node.visible) {\n                  currentPosition++;\n                  if (i == 0) {\n                    node.position = currentPosition;\n                  }\n                }\n              }\n            } else if (node instanceof AjfSlideInstance) {\n              if (node.visible) {\n                currentPosition++;\n                node.position = currentPosition;\n              }\n            }\n          });\n          return nodes;\n        };\n      }))\n      .subscribe(this._nodesUpdates);\n  }\n\n  private _initNodeInstance(\n    allNodes: AjfNode[] | AjfNodeInstance[], node: AjfNode,\n    prefix: number[], context: any, branchVisibility = true\n  ): AjfNodeInstance | null {\n    let instance = nodeToNodeInstance(allNodes, node, prefix, context);\n    if (instance != null) {\n      if (\n        instance instanceof AjfNodeGroupInstance ||\n        instance instanceof AjfRepeatingSlideInstance\n      ) {\n        this._explodeRepeatingNode(allNodes, instance, context);\n      } else if ( instance instanceof AjfSlideInstance ) {\n        instance.nodes = this._orderedNodesInstancesTree(\n          allNodes, instance.slide.nodes, instance.slide.id, prefix, context\n        );\n      }\n      instance.updateVisibility(context, branchVisibility);\n      instance.updateConditionalBranches(context);\n      if (instance instanceof AjfFieldWithChoicesInstance) {\n        instance.updateFilteredChoices(context);\n      } else if (instance instanceof AjfFieldInstance) {\n        instance.value = context[instance.completeName];\n        instance.updateFieldState(context);\n      }\n      this._addNodeInstance(instance);\n    }\n    return instance;\n  }\n\n  private _adjustReps(\n    allNodes: AjfNode[] | AjfNodeInstance[],\n    instance: AjfNodeGroupInstance | AjfRepeatingSlideInstance,\n    oldReps: number, context: any\n  ): { added: AjfNodeInstance[] | null, removed: AjfNodeInstance[] | null } {\n    const newReps = instance.reps;\n    const result: { added: AjfNodeInstance[] | null, removed: AjfNodeInstance[] | null } = {\n      added: null,\n      removed: null\n    };\n    if (oldReps < newReps) {\n      const newNodes: AjfNodeInstance[] = [];\n      if (instance.nodes == null) {\n        instance.nodes = [];\n      }\n      if (instance instanceof AjfNodeGroupInstance) {\n        const node = new AjfEmptyField({\n          'label': instance.node.label\n        });\n        const newInstance = this._initNodeInstance(\n          allNodes, node, instance.prefix.slice(0), context);\n        if (newInstance != null) {\n          instance.nodes.push(newInstance);\n        }\n      }\n      for (let i = oldReps ; i < newReps ; i++) {\n        const prefix = instance.prefix.slice(0);\n        const group = instance instanceof AjfNodeGroupInstance ?\n          instance.nodeGroup : instance.slide;\n        prefix.push(i);\n        orderedNodes(group.nodes, instance.node.id)\n          .forEach((n) => {\n            const newInstance = this._initNodeInstance(allNodes, n, prefix, context);\n            if (newInstance != null) {\n              newNodes.push(newInstance);\n              instance.nodes.push(newInstance);\n            }\n          });\n        this._addNodeInstance(instance);\n      }\n      result.added = newNodes;\n    } else if (oldReps > newReps) {\n      let nodesNum = instance.nodes.length / oldReps;\n      if (instance instanceof AjfNodeGroupInstance) {\n        nodesNum ++;\n      }\n      result.removed = instance.nodes.splice(newReps * nodesNum, nodesNum);\n      result.removed.forEach((n => {\n        this._removeNodeInstance(n);\n      }));\n    }\n    if (oldReps != newReps && instance.formulaReps == null) {\n      const fg = this._formGroup.getValue();\n      if (fg != null && fg.contains(instance.completeName)) {\n        fg.controls[instance.completeName].setValue(instance.reps);\n      }\n    }\n    instance.flatNodes = flattenNodesInstances(instance.nodes);\n    if (instance instanceof AjfRepeatingSlideInstance) {\n      const slideNodes: AjfNodeInstance[][] = [];\n      const nodesPerSlide = instance.nodesPerSlide;\n      for (let i = 0 ; i < instance.reps ; i++) {\n        const startNode = i * nodesPerSlide;\n        slideNodes.push(instance.nodes.slice(startNode, startNode + nodesPerSlide));\n      }\n      instance.slideNodes = slideNodes;\n    }\n    return result;\n  }\n\n  private _updateFormValueAndValidity(): void {\n    this._nodesUpdates.asObservable()\n    .pipe(\n      withLatestFrom(this._formGroup),\n      filter(( values: [IAjfNodesInstancesOperation, FormGroup | null ]) => values[1] !== null)\n    )\n    .subscribe(( values: [IAjfNodesInstancesOperation, FormGroup | null ]) => {\n      const form: FormGroup = <FormGroup>values[1];\n      form.updateValueAndValidity();\n    });\n  }\n\n  private _explodeRepeatingNode(\n    allNodes: AjfNode[] | AjfNodeInstance[],\n    instance: AjfNodeGroupInstance | AjfRepeatingSlideInstance,\n    context: any\n  ) {\n    const oldReps = instance.updateRepsNum(context);\n    if (oldReps !== instance.reps) {\n      this._adjustReps(allNodes, instance, oldReps, context);\n    }\n  }\n\n  private _orderedNodesInstancesTree(\n    allNodes: AjfNode[] | AjfNodeInstance[],\n    nodes: AjfNode[], parent: number | null = null,\n    prefix: number[] = [], context: any\n  ): AjfNodeInstance[] {\n    let nodesInstances: AjfNodeInstance[] = [];\n    const curSuffix = prefix.length > 0 ? '__' + prefix.join('__') : '';\n    orderedNodes(nodes, parent)\n      .forEach((node: AjfNode) => {\n        const parentNodeInstance = nodesInstances.find(\n          ni => ni.node.id == node.parent && ni.suffix == curSuffix);\n        const branchVisibility = parentNodeInstance != null ?\n          parentNodeInstance.verifiedBranch != null &&\n          parentNodeInstance.verifiedBranch == node.parentNode : true;\n        const nni = this._initNodeInstance(allNodes, node, prefix, context, branchVisibility);\n        if (nni != null) {\n          nodesInstances.push(nni);\n        }\n      });\n    return nodesInstances;\n  }\n\n  private _formValueDelta(oldValue: any, newValue: any): string[] {\n    return Object.keys(newValue)\n      .filter((k) => oldValue[k] !== newValue[k]);\n  }\n\n  private _initFormGroupStreams(formGroup: FormGroup): FormGroup {\n    this._formGroupSubscription.unsubscribe();\n    let init = true;\n    let initForm = true;\n    this._formInitEvent.emit(AjfFormInitStatus.Initializing);\n    this._formGroupSubscription = formGroup.valueChanges.pipe(\n      startWith<any>({}),\n      pairwise(),\n      debounceTime(200),\n      withLatestFrom<\n        [any, any], [[any, any], IAjfRendererUpdateMap, IAjfRendererUpdateMap,\n        IAjfRendererUpdateMap, IAjfRendererUpdateMap, IAjfRendererUpdateMap,\n        IAjfRendererUpdateMap, IAjfRendererUpdateMap, IAjfRendererUpdateMap,\n        IAjfRendererUpdateMap, AjfNodeInstance[]]\n      >(...(this._nodesMaps), this._flatNodes)\n    ).subscribe((\n        v: [[any, any], IAjfRendererUpdateMap, IAjfRendererUpdateMap,\n        IAjfRendererUpdateMap, IAjfRendererUpdateMap, IAjfRendererUpdateMap,\n        IAjfRendererUpdateMap, IAjfRendererUpdateMap, IAjfRendererUpdateMap,\n        IAjfRendererUpdateMap, AjfNodeInstance[]]\n      ) => {\n        const oldFormValue = init && {} || v[0][0];\n        init = false;\n        const newFormValue = v[0][1];\n        const visibilityMap = v[1];\n        const repetitionMap = v[2];\n        const conditionalBranchesMap = v[3];\n        const formulaMap = v[4];\n        const validationMap = v[5];\n        const warningMap = v[6];\n        const nextSlideConditionsMap = v[7];\n        const filteredChoicesMap = v[8];\n        const triggerConditionsMap = v[9];\n        const nodes = v[10];\n\n        const delta = this._formValueDelta(oldFormValue, newFormValue);\n        const deltaLen = delta.length;\n        let updatedNodes: AjfNodeInstance[] = [];\n\n        delta.forEach((fieldName) => {\n          updatedNodes = updatedNodes.concat(nodes.filter(n => n.completeName === fieldName));\n          if (visibilityMap[fieldName] != null) {\n            visibilityMap[fieldName].forEach(nodeInstance => {\n              const visibilityChanged = nodeInstance.updateVisibility(newFormValue);\n              if (visibilityChanged && !nodeInstance.visible) {\n                const fg = this._formGroup.getValue();\n                if (fg != null) {\n                  const s = timer(200).subscribe(() => {\n                    if (s && !s.closed) { s.unsubscribe(); }\n                    fg.controls[nodeInstance.completeName].setValue(null);\n                  });\n                }\n                if (nodeInstance instanceof AjfFieldInstance) {\n                  (<AjfFieldInstance>nodeInstance).value = null;\n                }\n              } else if (\n                visibilityChanged && nodeInstance.visible &&\n                nodeInstance instanceof AjfFieldInstance\n              ) {\n                const fg = this._formGroup.getValue();\n                const res = (<AjfFieldInstance>nodeInstance).updateFormula(newFormValue);\n                if (fg != null && res.changed) {\n                  fg.controls[nodeInstance.completeName].setValue(res.value);\n                }\n              }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (repetitionMap[fieldName] != null) {\n            repetitionMap[fieldName].forEach(nodeInstance => {\n              if (\n                nodeInstance instanceof AjfNodeGroupInstance ||\n                nodeInstance instanceof AjfRepeatingSlideInstance\n              ) {\n                const oldReps = nodeInstance.updateRepsNum(newFormValue);\n                if (oldReps !== nodeInstance.reps) {\n                  this._adjustReps(nodes, nodeInstance, oldReps, newFormValue);\n                }\n              }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (conditionalBranchesMap[fieldName] != null) {\n            conditionalBranchesMap[fieldName].forEach((nodeInstance) => {\n              // const branchChanged = nodeInstance.updateConditionalBranches(newFormValue);\n              nodeInstance.updateConditionalBranches(newFormValue);\n              // if (branchChanged) {\n                const verifiedBranch = nodeInstance.verifiedBranch;\n                nodeInstance.conditionalBranches.forEach((_condition, idx) => {\n                  if (idx == verifiedBranch) {\n                    this._showSubtree(newFormValue, nodes, nodeInstance, idx);\n                  } else {\n                    this._hideSubtree(newFormValue, nodes, nodeInstance, idx);\n                  }\n                });\n              // }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (formulaMap[fieldName] != null) {\n            formulaMap[fieldName].forEach((nodeInstance) => {\n              if (nodeInstance instanceof AjfFieldInstance) {\n                const res = nodeInstance.updateFormula(newFormValue);\n                const fg = this._formGroup.getValue();\n                if (fg != null && res.changed) {\n                  nodeInstance.updateValidation(newFormValue);\n                  fg.controls[nodeInstance.completeName].setValue(res.value);\n                }\n              }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (validationMap[fieldName] != null) {\n            validationMap[fieldName].forEach((nodeInstance) => {\n              if (nodeInstance instanceof AjfFieldInstance) {\n                newFormValue.$value = newFormValue[nodeInstance.completeName];\n                nodeInstance.updateValidation(\n                  newFormValue,\n                  this.currentSupplementaryInformations\n                );\n              }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (warningMap[fieldName] != null) {\n            warningMap[fieldName].forEach((nodeInstance) => {\n              if (nodeInstance instanceof AjfFieldInstance) {\n                nodeInstance.updateWarning(newFormValue);\n                if (nodeInstance.warningResults.filter(warning => warning.result).length > 0) {\n                  nodeInstance.emitTriggerWarning();\n                }\n              }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (deltaLen == 1 && nextSlideConditionsMap[fieldName] != null) {\n            if (\n              nextSlideConditionsMap[fieldName].filter((nodeInstance) => {\n                if (nodeInstance instanceof AjfFieldInstance) {\n                  return nodeInstance.updateNextSlideCondition(newFormValue);\n                }\n                return false;\n              }).length == 1\n            ) {\n              this._nextSlideTrigger.emit();\n            }\n          }\n\n          if (filteredChoicesMap[fieldName] != null) {\n            filteredChoicesMap[fieldName].forEach((nodeInstance) => {\n              if (nodeInstance instanceof AjfFieldWithChoicesInstance) {\n                nodeInstance.updateFilteredChoices(newFormValue);\n              }\n              if (updatedNodes.indexOf(nodeInstance) === -1) {\n                updatedNodes.push(nodeInstance);\n              }\n            });\n          }\n\n          if (deltaLen == 1 && triggerConditionsMap[fieldName] != null) {\n            const res = triggerConditionsMap[fieldName]\n              .filter((nodeInstance) => {\n                return nodeInstance instanceof AjfFieldWithChoicesInstance &&\n                  nodeInstance.updateTriggerConditions(newFormValue);\n              });\n            if (res.length == 1) {\n              (<AjfFieldWithChoicesInstance>res[0]).emitTriggerSelection();\n            }\n          }\n        });\n        updatedNodes.forEach(n => n.triggerUpdate());\n        if (initForm) {\n          initForm = false;\n          this._formInitEvent.emit(AjfFormInitStatus.Complete);\n        }\n        this._valueChanged.next();\n      });\n    return formGroup;\n  }\n\n  private _showSubtree(\n    context: any, nodes: AjfNodeInstance[], node: AjfNodeInstance, branch?: number\n  ) {\n    this._updateSubtreeVisibility(context, nodes, node, true, branch);\n  }\n\n  private _hideSubtree(\n    context: any, nodes: AjfNodeInstance[], node: AjfNodeInstance, branch?: number\n  ) {\n    this._updateSubtreeVisibility(context, nodes, node, false, branch);\n  }\n\n  private _updateSubtreeVisibility(\n    context: any, nodes: AjfNodeInstance[], node: AjfNodeInstance,\n    visible: boolean, branch?: number\n  ) {\n    let subNodes: AjfNodeInstance[];\n    if (branch != null) {\n      subNodes = nodes.filter(\n        n => {\n          return n.suffix == node.suffix && n.node.parent == node.node.id &&\n            n.node.parentNode == branch;\n        }\n      );\n    } else {\n      subNodes = nodes.filter(n => n.suffix == node.suffix && n.node.parent == node.node.id);\n    }\n    const isContainer = isContainerNode(node.node);\n    subNodes.forEach((n) => {\n      if (\n        !isContainer ||\n        (isContainer && (<AjfNodeGroup>node.node).nodes.find(cn => cn.id == n.node.id) == null)\n      ) {\n        n.updateVisibility(context, visible);\n        if (n instanceof AjfFieldInstance) {\n          (<AjfFieldInstance>n).updateFormula(context);\n        }\n        this._updateSubtreeVisibility(context, nodes, n, visible);\n      }\n    });\n  }\n\n  private _initNodesStreams(): void {\n    this._nodes = this._nodesUpdates.pipe(\n      scan((nodes: AjfNodeInstance[], op: IAjfNodesInstancesOperation) => {\n        return op(nodes);\n      }, []),\n      share()\n    );\n    this._flatNodesTree = this._nodes.pipe(\n      map(nodes => flattenNodesTree(nodes)),\n      share()\n    );\n    this._flatNodes = this._flatNodesTree.pipe(\n      map(slides => {\n        let nodes: IAjfNodeInstance[] = [];\n        slides.forEach(s => {\n          nodes.push(s);\n          nodes = nodes.concat(s.flatNodes);\n        });\n        return nodes;\n      }),\n      share()\n    );\n  }\n\n  private _removeNodeInstance(nodeInstance: AjfNodeInstance): AjfNodeInstance {\n    const nodeName = nodeInstance.completeName;\n    this._removeNodesVisibilityMapIndex(nodeName);\n    this._removeNodesRepetitionMapIndex(nodeName);\n    this._removeNodesConditionalBranchMapIndex(nodeName);\n    this._removeNodesFormulaMapIndex(nodeName);\n    this._removeNodesValidationMapIndex(nodeName);\n    this._removeNodesWarningMapIndex(nodeName);\n    this._removeNodesNextSlideConditionsMapIndex(nodeName);\n    this._removeNodesFilteredChoicesMapIndex(nodeName);\n    this._removeNodesTriggerConditionsMapIndex(nodeName);\n    if (nodeInstance instanceof AjfSlideInstance) {\n      return this._removeSlideInstance(nodeInstance);\n    } else if (isRepeatingNode(nodeInstance.node)) {\n      this._removeNodeGroupInstance(<AjfNodeGroupInstance | AjfRepeatingSlideInstance>nodeInstance);\n    } else if (nodeInstance instanceof AjfFieldInstance) {\n      this._removeFieldInstance(nodeInstance);\n    }\n\n    return nodeInstance;\n  }\n\n  private _removeSlideInstance(slideInstance: AjfSlideInstance): AjfSlideInstance {\n    const slide = slideInstance.slide;\n    if (slide.visibility != null) {\n      this._removeFromNodesVisibilityMap(slideInstance, slide.visibility.condition);\n    }\n    slideInstance.conditionalBranches.forEach((conditionalBranch: AjfCondition) => {\n      this._removeFromNodesConditionalBranchMap(slideInstance, conditionalBranch.condition);\n    });\n    return slideInstance;\n  }\n\n  private _removeNodeGroupInstance(\n    nodeGroupInstance: AjfNodeGroupInstance | AjfRepeatingSlideInstance\n  ): AjfNodeGroupInstance | AjfRepeatingSlideInstance {\n    const nodeGroup = nodeGroupInstance instanceof AjfNodeGroupInstance ?\n      nodeGroupInstance.nodeGroup : nodeGroupInstance.slide;\n    if (nodeGroup.visibility != null) {\n      this._removeFromNodesVisibilityMap(nodeGroupInstance, nodeGroup.visibility.condition);\n    }\n    if (nodeGroupInstance.formulaReps != null && nodeGroup.formulaReps != null) {\n      this._removeFromNodesRepetitionMap(nodeGroupInstance, nodeGroup.formulaReps.formula);\n    }\n    return nodeGroupInstance;\n  }\n\n  private _removeFieldInstance(fieldInstance: AjfFieldInstance): AjfFieldInstance {\n    const formGroup = this._formGroup.getValue();\n    const fieldInstanceName = fieldInstance.completeName;\n    if (formGroup != null && formGroup.contains(fieldInstanceName)) {\n      formGroup.removeControl(fieldInstanceName);\n    }\n    if (fieldInstance.validation != null) {\n      this._validationNodesMapUpdates.next((vmap: IAjfRendererUpdateMap): IAjfRendererUpdateMap => {\n          if (vmap[fieldInstanceName] == null) {\n            delete vmap[fieldInstanceName];\n          }\n          return vmap;\n        });\n    }\n\n    if (fieldInstance.visibility != null) {\n      this._removeFromNodesVisibilityMap(fieldInstance, fieldInstance.visibility.condition);\n    }\n\n    fieldInstance.conditionalBranches.forEach((conditionalBranch: AjfCondition) => {\n      this._removeFromNodesConditionalBranchMap(fieldInstance, conditionalBranch.condition);\n    });\n\n    if (fieldInstance.formula != null) {\n      this._removeFromNodesFormulaMap(fieldInstance, fieldInstance.formula.formula);\n    }\n\n    if (fieldInstance instanceof AjfNodeGroupInstance) {\n      if (fieldInstance.formulaReps != null) {\n        this._removeFromNodesRepetitionMap(fieldInstance, fieldInstance.formulaReps.formula);\n      }\n    }\n\n    if (fieldInstance.validation != null && fieldInstance.validation.conditions != null) {\n      fieldInstance.validation.conditions.forEach((condition) => {\n        this._removeFromNodesValidationMap(fieldInstance, condition.condition);\n      });\n    }\n\n    if (fieldInstance.warning != null) {\n      fieldInstance.warning.conditions.forEach((condition) => {\n        this._removeFromNodesWarningMap(fieldInstance, condition.condition);\n      });\n    }\n\n    if (fieldInstance.nextSlideCondition != null) {\n      this._removeFromNodesNextSlideConditionsMap(\n        fieldInstance, fieldInstance.nextSlideCondition.condition\n      );\n    }\n\n    if (\n      fieldInstance instanceof AjfFieldWithChoicesInstance && fieldInstance.choicesFilter != null\n    ) {\n      this._removeFromNodesFilteredChoicesMap(fieldInstance, fieldInstance.choicesFilter.formula);\n      if (fieldInstance.triggerConditions != null) {\n        fieldInstance.triggerConditions.forEach((condition) => {\n          this._removeFromNodesTriggerConditionsMap(fieldInstance, condition.condition);\n        });\n      }\n    }\n\n    return fieldInstance;\n  }\n\n  private _addNodeInstance(nodeInstance: AjfNodeInstance): AjfNodeInstance {\n    if (\n      nodeInstance instanceof AjfRepeatingSlideInstance ||\n      nodeInstance instanceof AjfNodeGroupInstance\n    ) {\n      return this._addNodeGroupInstance(nodeInstance);\n    } else if (nodeInstance instanceof AjfSlideInstance) {\n      return this._addSlideInstance(nodeInstance);\n    } else if (nodeInstance instanceof AjfFieldInstance) {\n      return this._addFieldInstance(nodeInstance);\n    }\n\n    return nodeInstance;\n  }\n\n  private _addFieldInstance(fieldInstance: AjfFieldInstance): AjfFieldInstance {\n    const formGroup = this._formGroup.getValue();\n    const fieldInstanceName = fieldInstance.completeName;\n    if (formGroup != null && !formGroup.contains(fieldInstanceName)) {\n      const control = new FormControl();\n      control.setValue(fieldInstance.value);\n      formGroup.registerControl(fieldInstanceName, control);\n    }\n    if (\n      formGroup != null && fieldInstance instanceof AjfTableFieldInstance\n      && (<AjfTableField>fieldInstance.node).editable\n    ) {\n      let node = <AjfTableField>fieldInstance.node;\n      let value: FormControl[][] = [];\n      node.rows.forEach((row) => {\n        let r: FormControl[] = [];\n        row.forEach((k) => {\n          const control = new FormControl();\n          control.setValue(fieldInstance.context[k]);\n          formGroup!.registerControl(k, control);\n          r.push(control);\n        });\n        value.push(r);\n      });\n      fieldInstance.controls = value;\n    }\n    if (fieldInstance.validation != null) {\n      this._validationNodesMapUpdates.next((vmap: IAjfRendererUpdateMap): IAjfRendererUpdateMap => {\n          if (vmap[fieldInstanceName] == null) {\n            vmap[fieldInstanceName] = [];\n          }\n          if (vmap[fieldInstanceName].indexOf(fieldInstance) == -1) {\n            vmap[fieldInstanceName].push(fieldInstance);\n          }\n          return vmap;\n        });\n    }\n\n    if (fieldInstance.visibility != null) {\n      this._addToNodesVisibilityMap(fieldInstance, fieldInstance.visibility.condition);\n    }\n\n    fieldInstance.conditionalBranches.forEach((conditionalBranch: AjfCondition) => {\n      this._addToNodesConditionalBranchMap(fieldInstance, conditionalBranch.condition);\n    });\n\n    if (fieldInstance.formula != null) {\n      this._addToNodesFormulaMap(fieldInstance, fieldInstance.formula.formula);\n    }\n\n    if (fieldInstance instanceof AjfNodeGroupInstance) {\n      if (fieldInstance.formulaReps != null) {\n        this._addToNodesRepetitionMap(fieldInstance, fieldInstance.formulaReps.formula);\n      }\n    }\n\n    if (fieldInstance.validation != null && fieldInstance.validation.conditions != null) {\n      fieldInstance.validation.conditions.forEach((condition) => {\n        this._addToNodesValidationMap(fieldInstance, condition.condition);\n      });\n    }\n\n    if (fieldInstance.warning != null) {\n      fieldInstance.warning.conditions.forEach((condition) => {\n        this._addToNodesWarningMap(fieldInstance, condition.condition);\n      });\n    }\n\n    if (fieldInstance.nextSlideCondition != null) {\n      this._addToNodesNextSlideConditionsMap(\n        fieldInstance, fieldInstance.nextSlideCondition.condition\n      );\n    }\n\n    if (fieldInstance instanceof AjfFieldWithChoicesInstance) {\n      if (fieldInstance.choicesFilter != null) {\n        this._addToNodesFilteredChoicesMap(fieldInstance, fieldInstance.choicesFilter.formula);\n      }\n      if (fieldInstance.triggerConditions != null) {\n        fieldInstance.triggerConditions.forEach((condition: AjfCondition) => {\n          this._addToNodesTriggerConditionsMap(fieldInstance, condition.condition);\n        });\n      }\n    }\n\n    return fieldInstance;\n  }\n\n  private _addSlideInstance(slideInstance: AjfSlideInstance): AjfSlideInstance {\n    const slide = slideInstance.slide;\n    if (slide.visibility != null) {\n      this._addToNodesVisibilityMap(slideInstance, slide.visibility.condition);\n    }\n    slideInstance.conditionalBranches.forEach((conditionalBranch: AjfCondition) => {\n      this._addToNodesConditionalBranchMap(slideInstance, conditionalBranch.condition);\n    });\n    return slideInstance;\n  }\n\n  private _addNodeGroupInstance(\n    nodeGroupInstance: AjfNodeGroupInstance | AjfRepeatingSlideInstance\n  ): AjfNodeGroupInstance | AjfRepeatingSlideInstance {\n    const nodeGroup = nodeGroupInstance instanceof AjfNodeGroupInstance ?\n      nodeGroupInstance.nodeGroup : nodeGroupInstance.slide;\n    if (nodeGroup.visibility != null) {\n      this._addToNodesVisibilityMap(nodeGroupInstance, nodeGroup.visibility.condition);\n    }\n    nodeGroupInstance.conditionalBranches.forEach((conditionalBranch: AjfCondition) => {\n      this._addToNodesConditionalBranchMap(nodeGroupInstance, conditionalBranch.condition);\n    });\n    if (nodeGroupInstance.formulaReps != null) {\n      if (nodeGroup.formulaReps != null) {\n        this._addToNodesRepetitionMap(nodeGroupInstance, nodeGroup.formulaReps.formula);\n      }\n    } else {\n      let formGroup = this._formGroup.getValue();\n      let nodeGroupInstanceName = nodeGroupInstance.completeName;\n      if (formGroup != null && !formGroup.contains(nodeGroupInstanceName)) {\n        const control = new FormControl();\n        control.setValue(nodeGroupInstance.reps);\n        formGroup.registerControl(nodeGroupInstanceName, control);\n      }\n    }\n    return nodeGroupInstance;\n  }\n\n  private _removeNodesVisibilityMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._visibilityNodesMapUpdates, index);\n  }\n\n  private _removeNodesRepetitionMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._repetitionNodesMapUpdates, index);\n  }\n\n  private _removeNodesConditionalBranchMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._conditionalBranchNodesMapUpdates, index);\n  }\n\n  private _removeNodesFormulaMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._formulaNodesMapUpdates, index);\n  }\n\n  private _removeNodesValidationMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._validationNodesMapUpdates, index);\n  }\n\n  private _removeNodesWarningMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._warningNodesMapUpdates, index);\n  }\n\n  private _removeNodesFilteredChoicesMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._filteredChoicesNodesMapUpdates, index);\n  }\n\n  private _removeNodesTriggerConditionsMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._triggerConditionsNodesMapUpdates, index);\n  }\n\n  private _removeNodesNextSlideConditionsMapIndex(index: string): void {\n    this._removeNodesMapIndex(this._nextSlideConditionsNodesMapUpdates, index);\n  }\n\n  private _removeNodesMapIndex(nodesMap: Subject<IAjfRendererUpdateMapOperation>, index: string) {\n    nodesMap.next((vmap: IAjfRendererUpdateMap): IAjfRendererUpdateMap => {\n      if (Object.keys(vmap).indexOf(index) > -1) {\n        delete vmap[index];\n      }\n      return vmap;\n    });\n  }\n\n  private _removeFromNodesVisibilityMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._removeFromNodesMap(this._visibilityNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesRepetitionMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._removeFromNodesMap(this._repetitionNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesConditionalBranchMap(\n    nodeInstance: AjfNodeInstance, formula: string\n  ): void {\n    this._removeFromNodesMap(this._conditionalBranchNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesFormulaMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._removeFromNodesMap(this._formulaNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesValidationMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._removeFromNodesMap(this._validationNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesWarningMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._removeFromNodesMap(this._warningNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesFilteredChoicesMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._removeFromNodesMap(this._filteredChoicesNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesTriggerConditionsMap(\n    nodeInstance: AjfNodeInstance, formula: string\n  ): void {\n    this._removeFromNodesMap(this._filteredChoicesNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesNextSlideConditionsMap(\n    nodeInstance: AjfNodeInstance, formula: string\n  ): void {\n    this._removeFromNodesMap(this._nextSlideConditionsNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _removeFromNodesMap(\n    nodesMap: Subject<IAjfRendererUpdateMapOperation>, nodeInstance: AjfNodeInstance,\n    formula: string\n  ): void {\n    let tokens = tokenize(formula)\n      .filter((token: any) => token.type == 'Identifier' && token.value != '$value');\n    if (tokens.length > 0) {\n      nodesMap.next((vmap: IAjfRendererUpdateMap): IAjfRendererUpdateMap => {\n        tokens.forEach((token: any) => {\n          let tokenName = token.value;\n          if (vmap[tokenName] != null) {\n            const idx = vmap[tokenName].indexOf(nodeInstance);\n            if (idx > -1) {\n              vmap[tokenName].splice(idx, 1);\n              if (vmap[tokenName].length == 0) {\n                delete vmap[tokenName];\n              }\n            }\n          }\n        });\n        return vmap;\n      });\n    }\n  }\n\n  private _addToNodesVisibilityMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._visibilityNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesRepetitionMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._repetitionNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesConditionalBranchMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._conditionalBranchNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesFormulaMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._formulaNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesValidationMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._validationNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesWarningMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._warningNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesFilteredChoicesMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._filteredChoicesNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesTriggerConditionsMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._triggerConditionsNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesNextSlideConditionsMap(nodeInstance: AjfNodeInstance, formula: string): void {\n    this._addToNodesMap(this._nextSlideConditionsNodesMapUpdates, nodeInstance, formula);\n  }\n\n  private _addToNodesMap(\n    nodesMap: Subject<IAjfRendererUpdateMapOperation>, nodeInstance: AjfNodeInstance,\n    formula: string\n  ): void {\n    let tokens = tokenize(formula)\n      .filter((token: any) => token.type == 'Identifier' && token.value != '$value');\n    if (tokens.length > 0) {\n      nodesMap.next((vmap: IAjfRendererUpdateMap): IAjfRendererUpdateMap => {\n        tokens.forEach((token: any) => {\n          let tokenName = token.value;\n          if (vmap[tokenName] == null) {\n            vmap[tokenName] = [];\n          }\n          if (vmap[tokenName].indexOf(nodeInstance) === -1) {\n            vmap[tokenName].push(nodeInstance);\n          }\n        });\n        return vmap;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {\n  AfterViewInit, AfterViewChecked, ChangeDetectorRef, EventEmitter, OnDestroy, QueryList\n} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\n\nimport {AjfPageSlider, AjfPageSliderOrientation} from '@ajf/core/page-slider';\nimport {coerceBooleanProperty} from '@ajf/core/utils';\n\nimport {Observable, Subscription} from 'rxjs';\nimport {delayWhen, map, withLatestFrom} from 'rxjs/operators';\n\nimport {AjfFormField} from './field';\nimport {AjfFormInitStatus, AjfFormRendererService} from './form-renderer';\nimport {AjfForm} from './forms';\nimport {AjfFieldType} from './nodes';\nimport {\n  AjfNodeGroupInstance, AjfNodeInstance, AjfRepeatingSlideInstance, IAjfSlideInstance\n} from './nodes-instances';\n\nexport class AjfFormActionEvent {\n  source: AjfFormRenderer;\n  value: Object;\n  action: string;\n}\n\nexport abstract class AjfFormRenderer implements AfterViewChecked, AfterViewInit, OnDestroy {\n  // formGroup is an Observable FormGroup type\n  readonly formGroup: Observable<FormGroup | null>;\n\n  //  slides is an observable AjfSlide array type\n  readonly slides: Observable<IAjfSlideInstance[]>;\n  readonly slidesNum: Observable<number>;\n  readonly errors: Observable<number>;\n  readonly formIsInit: Observable<boolean>;\n\n  // ajfFieldTypes [ Text, Number, Boolean, SingleChoice, MultipleChoice,\n  // Formula, Empty, Composed, LENGTH ]\n  readonly ajfFieldTypes = AjfFieldType;\n\n  title: string;\n\n  private _orientationChange: EventEmitter<AjfPageSliderOrientation>\n    = new EventEmitter<AjfPageSliderOrientation>();\n  readonly orientationChange: Observable<AjfPageSliderOrientation> =\n    this._orientationChange.asObservable();\n\n  private _saveDisabled: boolean = false;\n  get saveDisabled(): boolean { return this._saveDisabled; }\n  set saveDisabled(saveDisabled: boolean) {\n    this._saveDisabled = coerceBooleanProperty(saveDisabled);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _hasStartMessage = false;\n  get hasStartMessage(): boolean { return this._hasStartMessage; }\n  set hasStartMessage(hasStartMessage: boolean) {\n    this._hasStartMessage = coerceBooleanProperty(hasStartMessage);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _hasEndMessage = false;\n  get hasEndMessage(): boolean { return this._hasEndMessage; }\n  set hasEndMessage(hasEndMessage: boolean) {\n    this._hasEndMessage = coerceBooleanProperty(hasEndMessage);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _hideTopToolbar = false;\n  get hideTopToolbar(): boolean { return this._hideTopToolbar; }\n  set hideTopToolbar(hideTopToolbar: boolean) {\n    this._hideTopToolbar = coerceBooleanProperty(hideTopToolbar);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _hideBottomToolbar = false;\n  get hideBottompToolbar(): boolean { return this._hideBottomToolbar; }\n  set hideBottomToolbar(hideBottomToolbar: boolean) {\n    this._hideBottomToolbar = coerceBooleanProperty(hideBottomToolbar);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _hideNavigationButtons = false;\n  get hideNavigationButtons(): boolean { return this._hideNavigationButtons; }\n  set hideNavigationButtons(hideNavigationButtons: boolean) {\n    this._hideNavigationButtons = coerceBooleanProperty(hideNavigationButtons);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _fixedOrientation = false;\n  get fixedOrientation(): boolean { return this._fixedOrientation; }\n  set fixedOrientation(fixedOrientation: boolean) {\n    this._fixedOrientation = coerceBooleanProperty(fixedOrientation);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _orientation: AjfPageSliderOrientation = 'horizontal';\n  get orientation(): AjfPageSliderOrientation { return this._orientation; }\n  set orientation(orientation: AjfPageSliderOrientation) {\n    if (orientation !== 'horizontal' && orientation !== 'vertical') { return; }\n    if (orientation !== this._orientation) {\n      this._orientation = orientation;\n      this._changeDetectorRef.markForCheck();\n      this._orientationChange.emit(this._orientation);\n    }\n  }\n\n  formSlider: AjfPageSlider;\n  fields: QueryList<AjfFormField>;\n\n  private _errorMoveEvent: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  // _errorPositions is a private subject structure that contains next and prev\n  private _errorPositions: Observable<number[]>;\n\n  // _form is a private ajFForm\n  private _form: AjfForm;\n  // _init is a private boolean\n  private _init = false;\n\n  private _nextSlideSubscription: Subscription = Subscription.EMPTY;\n  private _errorMoveSubscription: Subscription = Subscription.EMPTY;\n\n  private _formAction: EventEmitter<AjfFormActionEvent> = new EventEmitter<AjfFormActionEvent>();\n  readonly formAction: Observable<AjfFormActionEvent> = this._formAction.asObservable();\n\n  set form(form: AjfForm) {\n    this._form = form;\n\n    if (this._init) {\n      this._rendererService.setForm(this._form);\n    }\n  }\n\n  /**\n   * this constructor will init current formula by ajfBuilderService\n   */\n  constructor(\n    private _rendererService: AjfFormRendererService,\n    protected _changeDetectorRef: ChangeDetectorRef\n  ) {\n    this.formGroup = _rendererService.formGroup;\n    this.slides = _rendererService.nodesTree;\n    this._errorPositions = _rendererService.errorPositions;\n    this.errors = _rendererService.errors;\n    this.slidesNum = _rendererService.slidesNum;\n    this.formIsInit = _rendererService.formInitEvent.pipe(\n      map(e => e === AjfFormInitStatus.Complete)\n    );\n  }\n\n  isRepeatingSlide(slide: IAjfSlideInstance): boolean {\n    return slide instanceof AjfRepeatingSlideInstance;\n  }\n\n  /**\n   * this method will scroll to next error received by subscribe\n   */\n  goToNextError(): void { this._errorMoveEvent.emit(true); }\n  /**\n   * this method will scroll to prev error received by subscribe\n   */\n  goToPrevError(): void { this._errorMoveEvent.emit(false); }\n\n  /**\n   * this method will add group\n   */\n  addGroup(nodeGroup: AjfNodeGroupInstance | AjfRepeatingSlideInstance): void {\n    let s = this._rendererService.addGroup(nodeGroup).pipe(\n      delayWhen(() => this.formSlider.pageScrollFinish),\n    ).subscribe(\n        (r) => { if (r && this.formSlider != null) { this.formSlider.slide({dir: 'down'}); } },\n        (_e) => { if (s) { s.unsubscribe(); } },\n        () => { if (s) { s.unsubscribe(); } }\n      );\n  }\n\n  /**\n   * this method will remove group\n   */\n  removeGroup(nodeGroup: AjfNodeGroupInstance | AjfRepeatingSlideInstance): void {\n    let s = this._rendererService.removeGroup(nodeGroup).pipe(\n      delayWhen(() => this.formSlider.pageScrollFinish),\n    ).subscribe(\n        (r) => { if (r && this.formSlider != null) { this.formSlider.slide({dir: 'up'}); } },\n        (_e) => { if (s) { s.unsubscribe(); } },\n        () => { if (s) { s.unsubscribe(); } }\n      );\n  }\n\n  onSave(_evt: any): void {\n    this._formAction.emit({\n      source: this,\n      action: 'save',\n      value: this._rendererService.getFormValue()\n    });\n  }\n\n  onFormAction(_evt: any, action: string) {\n    this._formAction.emit({\n      source: this,\n      value: this._rendererService.getFormValue(),\n      action: action\n    });\n  }\n\n  /**\n   * this method will set current form in rederer service when init form\n   */\n  ngAfterViewInit(): void {\n    if (this._form != null) {\n      this._rendererService.setForm(this._form);\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  ngAfterViewChecked(): void {\n    if (!this._init && this.formSlider != null) {\n      this._init = true;\n\n      this._errorMoveSubscription = (<Observable<boolean>>this._errorMoveEvent).pipe(\n        withLatestFrom(this._errorPositions)\n      ).subscribe((v: [boolean, number[]]) => {\n          const move = v[0];\n          const currentPosition = this.formSlider.currentPage - (+this.hasStartMessage) + 1;\n          const errors = v[1];\n          if (errors == null) { return; }\n\n          let found = false;\n          let prevIdx = -1;\n          let nextIdx = -1;\n          let idx = 0;\n          let errorsLen = errors.length;\n          while (!found && idx < errorsLen) {\n            if (errors[idx] == currentPosition) {\n              found = true;\n              prevIdx = idx > 0 ? idx - 1 : errorsLen - 1;\n              nextIdx = idx < errorsLen - 1 ? idx + 1 : 0;\n            } else if (errors[idx] > currentPosition) {\n              found = true;\n              prevIdx = idx > 0 ? idx - 1 : errorsLen - 1;\n              nextIdx = idx;\n            }\n            idx++;\n          }\n          if (!found) {\n            prevIdx = errorsLen - 1;\n            nextIdx = 0;\n          }\n\n          this.formSlider.slide({to: move ? errors[nextIdx] - 1 : errors[prevIdx] - 1});\n          this._changeDetectorRef.detectChanges();\n        });\n\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._nextSlideSubscription.unsubscribe();\n    this._errorMoveSubscription.unsubscribe();\n    this._orientationChange.complete();\n    this._errorMoveEvent.complete();\n    this._formAction.complete();\n  }\n\n  orientationChangeHandler(orientation: AjfPageSliderOrientation): void {\n    this.orientation = orientation;\n  }\n\n  trackNodeById(_: number, node: AjfNodeInstance): string {\n    return node.completeName;\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\n\n@Pipe({name: 'boolToInt'})\nexport class BoolToIntPipe implements PipeTransform {\n  transform(value: boolean): number {\n    return value ? 1 : 0;\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Pipe} from '@angular/core';\nimport {AjfFieldInstance} from './nodes-instances';\n\n@Pipe({ name: 'ajfFieldIsValid' })\nexport class AjfFieldIsValidPipe {\n    transform(fieldInstance: AjfFieldInstance): boolean {\n        if (\n            fieldInstance &&\n            fieldInstance.validationResults &&\n            fieldInstance.validationResults.length === 0\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\n\n@Pipe({name: 'tableRowClass'})\nexport class TableRowClass implements PipeTransform {\n  transform(value: number): string {\n    return value % 2 == 0 ? 'ajf-row-even' : 'ajf-row-odd';\n  }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {BoolToIntPipe} from './bool-to-int';\nimport {FieldIconPipe} from './field-icon';\nimport {AjfFieldIsValidPipe} from './field-is-valid';\nimport {AjfFormRendererService} from './form-renderer';\nimport {TableRowClass} from './table-row-class';\nimport {AjfValidationService} from './validation-service';\n\n\n@NgModule({\n  declarations: [\n    AjfFieldIsValidPipe,\n    BoolToIntPipe,\n    FieldIconPipe,\n    TableRowClass,\n  ],\n  exports: [\n    AjfFieldIsValidPipe,\n    BoolToIntPipe,\n    FieldIconPipe,\n    TableRowClass,\n  ],\n  providers: [\n    AjfFormRendererService,\n    AjfValidationService\n  ]\n})\nexport class AjfFormsModule { }\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfJsonSerializable} from '@ajf/core/models';\nimport {deepCopy} from '@ajf/core/utils';\n\nimport {AjfAttachmentsOrigin} from './attachments';\nimport {AjfChoicesOrigin, IAjfChoicesOrigin} from './choices';\nimport {AjfNode} from './nodes';\n\n\nexport class AjfForm extends AjfJsonSerializable {\n  nodes: AjfNode[];\n  choicesOrigins: IAjfChoicesOrigin[];\n  attachmentsOrigins: AjfAttachmentsOrigin[];\n  initContext: any;\n  topBar: boolean;\n  valid = true;\n  stringIdentifier: {label: string, value: string[]}[];\n  lastSelectedLocation: boolean = true;\n  supplementaryInformations: any;\n  /**\n   * this method will load an AjfForm from json\n   * @param obj : any - object form\n   * @return AjfForm\n   */\n  static fromJson(obj: any, context?: any): AjfForm {\n    obj = deepCopy(obj);\n    if (context) {\n      context = deepCopy(context);\n      obj.initContext = context;\n    }\n    let keys: string[] = Object.keys(obj);\n\n    if (keys.indexOf('choicesOrigins') > -1 &&\n        obj.choicesOrigins instanceof Array) {\n      let cos: IAjfChoicesOrigin[] = [];\n      for (let i = 0; i < obj.choicesOrigins.length; i++) {\n        cos.push(AjfChoicesOrigin.fromJson(obj.choicesOrigins[i]));\n      }\n      obj.choicesOrigins = cos;\n    }\n\n    if (keys.indexOf('attachmentsOrigins') > -1 &&\n        obj.attachmentsOrigins instanceof Array) {\n      let cos: AjfAttachmentsOrigin[] = [];\n      for (let i = 0; i < obj.attachmentsOrigins.length; i++) {\n        cos.push(AjfAttachmentsOrigin.fromJson(obj.attachmentsOrigins[i]));\n      }\n      obj.attachmentsOrigins = cos;\n    }\n\n    if (keys.indexOf('nodes') > -1 && obj.nodes instanceof Array) {\n      let fs: AjfNode[] = [];\n      for (let i = 0; i < obj.nodes.length; i++) {\n        let nodeObj: any = obj.nodes[i];\n        let node: AjfNode;\n        node = AjfNode.fromJson(nodeObj, obj.choicesOrigins,\n                                obj.attachmentsOrigins, context);\n        fs.push(node);\n      }\n      obj.nodes = fs;\n    }\n\n    return new AjfForm(obj);\n  }\n\n  static toString(schema: any, json: any, emptyString = ''): string | null {\n    if (schema.stringIdentifier != null && schema.stringIdentifier.length > 0) {\n      let str: string[] = schema.stringIdentifier.map((s: any) => {\n        let values: string[] = [];\n        if (s.value != null && s.value.length > 0) {\n          s.value.forEach((curValue: any) => {\n            let val: any;\n            let vp: string[] = curValue.split('.');\n            let cp: any = json;\n            vp.forEach(k => {\n              if (Object.keys(cp).indexOf(k) > -1) {\n                val = cp[k];\n                cp = cp[k];\n              }\n            });\n            if (val instanceof Array && val.length > 0) {\n              val = val.join(', ');\n            }\n            if (val != null) {\n              values.push(`${val}`);\n            }\n          });\n        }\n        return `${s.label}: ${values.length > 0 ? values.join(', ')\n                                                : emptyString}`;\n      });\n      return str.join(' - ');\n    }\n    return null;\n  }\n\n  constructor(obj?: any) {\n    super();\n\n    this.jsonExportedMembers = this.jsonExportedMembers.concat(\n        [ 'nodes', 'choicesOrigins', 'stringIdentifier', 'topBar' ]);\n\n    this.nodes = obj && obj.nodes || [];\n    this.choicesOrigins = obj && obj.choicesOrigins || [];\n    this.attachmentsOrigins = obj && obj.attachmentsOrigins || [];\n    this.initContext = obj && obj.initContext || {};\n    this.stringIdentifier = obj && obj.stringIdentifier || [];\n    this.lastSelectedLocation = obj && obj.lastSelectedLocation == false ? false : true;\n    this.supplementaryInformations = obj && obj.supplementaryInformations || null;\n  }\n  /**\n   * this method will get child nodes from ajfNode\n   * @param   node : AjfNode\n   * @return ajfNode[] - the child og AjfNode\n   */\n  getChildNodes(node: AjfNode): AjfNode[] {\n    return this.nodes.filter(n => n.parent === node.id).sort(n => n.parentNode);\n  }\n  /**\n   * this method will get root node\n   * @return ajfNode - the root node\n   */\n  getRootNode(): AjfNode | null {\n    if (this.nodes == null || this.nodes.length === 0) {\n      return null;\n    }\n    let ns: AjfNode[] = this.nodes.filter(n => n.parent == null);\n    return ns.length === 1 ? ns[0] : null;\n  }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","Link","Pdf","LENGTH","defineProperty","AjfAttachment","_label","_value","_type","obj","label","value","type","AjfAttachmentsOrigin","attachments","att","AjfAttachmentsType","push","Error","AjfAttachmentsFixedOrigin","fromJson","deepCopy","keys","indexOf","getName","_name","name","tslib_1.__extends","getAttachments","_attachments","_this","_super","getTypeName","v","typeStr","toString","match","String","Number","AjfChoice","AjfJsonSerializable","AjfChoicesOrigin","AjfChoicesFixedOrigin","AjfChoicesFunctionOrigin","AjfChoicesObservableOrigin","AjfChoicesObservableArrayOrigin","getLabel","setName","setLabel","getChoicesType","_choicesType","_guessChoicesType","cs","getChoices","jsonExportedMembers","concat","choicesType","getType","_choices","setChoices","choices","slice","_generator","generator","_observable","_currentChoices","splice","destroy","_subscription","unsubscribe","Subscription","EMPTY","self","subscribe","x","AjfChoicesPromiseOrigin","promise","then","AjfInvalidFieldDefinitionError","AjfError","message","factorial","f","AjfValidationResult","res","err","cVal","result","error","clientValidation","AjfValidation","AjfCondition","getMaxCondition","maxValue","condition","errorMessage","getMinCondition","minValue","getNotEmptyCondition","getMaxDigitsCondition","getMinDigitsCondition","evaluate","context","forceFormula","AjfValidationGroup","notEmpty","forceValue","maxDigits","minDigits","conditions","_i","_a","c","toJson","json","replace","map","_evaluateMaxValue","$value","_evaluateMinvalue","_evaluateNotEmpty","_evaluateConditions","forEach","cond","ctx","evaluateForceValue","wrn","warning","AjfWarning","getNotEmptyWarning","warningMessage","AjfWarningResult","AjfWarningGroup","AjfField","AjfFieldNodeLink","AjfNodeGroup","AjfSlide","AjfRepeatingSlide","AjfNode","_id","id","_parent","parent","_parentNode","parentNode","_conditionalBranches","conditionalBranches","_visibility","visibility","choicesOrigins","attachmentsOrigins","nodeType","AjfNodeType","cbs","alwaysCondition","createNode","thisObj","setConditionalBranchesNum","cbn","getMaxConditionalBranches","Math","min","Text","Boolean","SingleChoice","MultipleChoice","Formula","Empty","Date","DateInput","Time","Table","_nodes","nodes","_formulaReps","formulaReps","_maxReps","maxReps","_minReps","minReps","AjfFormula","_description","description","_editable","_formula","formula","_hasChoices","_defaultValue","defaultValue","validateValue","_size","size","_validation","validation","_warning","_hasAttachments","hasAttachments","_attachmentsOrigin","_nextSlideCondition","_nextSlide","val","AjfFormulaField","AjfFieldType","AjfMultipleChoiceField","AjfSingleChoiceField","AjfBooleanField","AjfNumberField","AjfTextField","AjfStringField","AjfDateField","AjfDateInputField","AjfTableField","AjfTimeField","fieldType","ret","AjfEmptyField","choicesFilter","origins","filter","choicesOriginRef","choicesOrigin","attachmentsOriginRef","attachmentsOrigin","triggerConditions","childNode","parentField","nextSlideCondition","setEditable","editable","setHasChoices","hasChoices","setHasAttachments","_","HTML","parseInt","parseFloat","AjfFieldWithChoices","forceExpanded","forceNarrow","max","l","good","total","tslib_1.__assign","minDate","maxDate","minDateValue","maxDateValue","columnLabels","rowLabels","hideEmptyRows","rows","fieldIconName","toLowerCase","FieldIconPipe","transform","field","Pipe","args","AjfNodeInstance","_updated","_node","_prefix","_visible","prefix","join","node","suffix","setNode","triggerUpdate","_updatedEvt","emit","updateVisibility","branchVisibility","oldVisibility","visible","newVisibility","updateConditionalBranches","oldBranch","verifiedBranch","idx","found","params","_context","EventEmitter","asObservable","AjfFieldInstance","_triggerWarning","_validationResults","_warningResults","updateFormula","newValue","oldValue","completeName","changed","_makeSupplementaryContext","supplementaryInformations","key","updateValidation","valid","validationResults","reduce","prev","updateWarning","updateNextSlideCondition","updateFieldState","emitTriggerWarning","next","reps","ReplaySubject","defVal","AjfFieldWithChoicesInstance","_triggerSelection","updateFilteredChoices","filteredChoices","$choiceValue","updateTriggerConditions","_firstTriggerConditionDone","conditionsNum","emitTriggerSelection","AjfNodeGroupInstance","_reps","_repsArr","v1","v2","setNodeGroup","nodeGroup","updateRepsNum","oldReps","ctxReps","newReps","AjfSlideInstance","flatNodes","setSlide","slide","AjfRepeatingSlideInstance","canRemoveGroup","canAddGroup","validSlide","slideNodes","slidePosition","position","AjfTableFieldInstance","_hideEmptyRows","_matrixFormControl","_matrixFormControlWithLabels","_controlsWithLabels","rowLabel","unshift","_matrixValue","_v","setValue","value_1","rowIndex_1","row","k","column","a","AjfDateFieldInstance","AjfEmptyFieldInstance","AjfFormFieldValueChanged","AjfFormField","_fieldInstance","fieldInstance","_fieldUpdateSubscription","updated","_changeDetectionRef","detectChanges","e","_valueChanged","ngOnInit","control","_rendererService","getControl","_triggerWarningSubscription","triggerWarning","pipe","withLatestFrom","showWarningAlertPrompt","warningResults","w","r","_e","ngAfterViewInit","_triggerSelectionSubscription","triggerSelection","ngOnDestroy","singleChoiceSelect","_isOpen","multipleChoiceSelect","open","ajfFieldTypes","tokenize","((/** @type {?} */ (esprima))).default","esprima","orderedNodes","newNodes","sort","n1","n2","isRepeatingNode","isContainerNode","flattenNodes","flattenNodesInstances","includeGroups","nodeInstance","getAncestorRepeatingNodes","allNodes","nodeGroups","curParent","find","getAncestorRepeatingNodesNames","names","sn","flattenNodesTree","flatTree","normalizeFormula","ancestorsNames","ancestorsNameStrings","token","RegExp","getInstanceCondition","oldCondition","newCondition","getInstanceFormula","oldFormula","newFormula","getInstanceConditions","newConditions","getInstanceValidations","validations","newValidations","newValidation","oldValidation","getInstanceValidation","getInstanceWarnings","warnings","newWarnings","newWarning","oldWarning","getInstanceWarning","nodeToNodeInstance","instance","isContainerNodeInstance","AjfValidationService","addFunction","_functions","_initFunctions","addFunctionHandler","fn","undefined","AjfValidatedProperty","utils","functionsStr","_functionsStr","_baseUtilFunctions","UTIL_FUNCTIONS","Injectable","Initializing","Complete","AjfFormRendererService","_flatNodesTree","_errorPositions","_errors","form","_form","getValue","setForm","_initUpdateMapStreams","initContext","currentForm","getFormValue","formGroup","_formGroup","addGroup","group","Observable","subscriber","complete","_nodesUpdates","_adjustReps","removeGroup","fieldName","contains","controls","_initErrorsStreams","currentPosition","errors","_slidesNum","publishReplay","refCount","startWith","_visibilityNodesMap","scan","rmap","op","share","_repetitionNodesMap","_conditionalBranchNodesMap","_formulaNodesMap","_validationNodesMap","_warningNodesMap","_filteredChoicesNodesMap","_triggerConditionsNodesMap","_nextSlideConditionsNodesMap","_nodesMaps","_initFormStreams","formObs","_initFormGroupStreams","FormGroup","_nodesInstances","_orderedNodesInstancesTree","_initNodeInstance","_explodeRepeatingNode","_addNodeInstance","added","removed","newNodes_1","newInstance","_loop_1","this_1","nodesNum","_removeNodeInstance","fg","nodesPerSlide","startNode","_updateFormValueAndValidity","values","updateValueAndValidity","nodesInstances","curSuffix","parentNodeInstance","ni","nni","_formValueDelta","_formGroupSubscription","init","initForm","_formInitEvent","AjfFormInitStatus","valueChanges","pairwise","debounceTime","_flatNodes","oldFormValue","newFormValue","visibilityMap","repetitionMap","conditionalBranchesMap","formulaMap","validationMap","warningMap","nextSlideConditionsMap","filteredChoicesMap","triggerConditionsMap","delta","deltaLen","updatedNodes","visibilityChanged","fg_1","s_1","timer","closed","_condition","_showSubtree","_hideSubtree","currentSupplementaryInformations","_nextSlideTrigger","branch","_updateSubtreeVisibility","subNodes","isContainer","cn","_initNodesStreams","slides","nodeName","_removeNodesVisibilityMapIndex","_removeNodesRepetitionMapIndex","_removeNodesConditionalBranchMapIndex","_removeNodesFormulaMapIndex","_removeNodesValidationMapIndex","_removeNodesWarningMapIndex","_removeNodesNextSlideConditionsMapIndex","_removeNodesFilteredChoicesMapIndex","_removeNodesTriggerConditionsMapIndex","_removeSlideInstance","_removeNodeGroupInstance","_removeFieldInstance","slideInstance","_removeFromNodesVisibilityMap","conditionalBranch","_removeFromNodesConditionalBranchMap","nodeGroupInstance","_removeFromNodesRepetitionMap","fieldInstanceName","removeControl","_validationNodesMapUpdates","vmap","_removeFromNodesFormulaMap","_removeFromNodesValidationMap","_removeFromNodesWarningMap","_removeFromNodesNextSlideConditionsMap","_removeFromNodesFilteredChoicesMap","_removeFromNodesTriggerConditionsMap","_addNodeGroupInstance","_addSlideInstance","_addFieldInstance","FormControl","registerControl","_addToNodesVisibilityMap","_addToNodesConditionalBranchMap","_addToNodesFormulaMap","_addToNodesRepetitionMap","_addToNodesValidationMap","_addToNodesWarningMap","_addToNodesNextSlideConditionsMap","_addToNodesFilteredChoicesMap","_addToNodesTriggerConditionsMap","nodeGroupInstanceName","index","_removeNodesMapIndex","_visibilityNodesMapUpdates","_repetitionNodesMapUpdates","_conditionalBranchNodesMapUpdates","_formulaNodesMapUpdates","_warningNodesMapUpdates","_filteredChoicesNodesMapUpdates","_triggerConditionsNodesMapUpdates","_nextSlideConditionsNodesMapUpdates","nodesMap","_removeFromNodesMap","tokens","tokenName","_addToNodesMap","Subject","formInitEvent","BehaviorSubject","nextSlideTrigger","slidesNum","AjfFormActionEvent","AjfFormRenderer","_saveDisabled","saveDisabled","coerceBooleanProperty","_changeDetectorRef","markForCheck","_hasStartMessage","hasStartMessage","_hasEndMessage","hasEndMessage","_hideTopToolbar","hideTopToolbar","_hideBottomToolbar","hideBottomToolbar","_hideNavigationButtons","hideNavigationButtons","_fixedOrientation","fixedOrientation","_orientation","orientation","_orientationChange","_init","isRepeatingSlide","goToNextError","_errorMoveEvent","goToPrevError","delayWhen","formSlider","pageScrollFinish","dir","onSave","_evt","_formAction","source","action","onFormAction","ngAfterViewChecked","_errorMoveSubscription","move","currentPage","prevIdx","nextIdx","errorsLen","to","_nextSlideSubscription","orientationChangeHandler","trackNodeById","orientationChange","formAction","nodesTree","errorPositions","formIsInit","BoolToIntPipe","AjfFieldIsValidPipe","TableRowClass","AjfFormsModule","NgModule","declarations","exports","providers","AjfForm","cos","fs","nodeObj","schema","emptyString","stringIdentifier","curValue","vp","split","cp","getChildNodes","getRootNode","ns","lastSelectedLocation","findNodeInstanceInTree","container","groups","len","flattenNodeInstances"],"mappings":"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"}