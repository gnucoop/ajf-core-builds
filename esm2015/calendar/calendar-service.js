import { __decorate } from "tslib";
/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { Injectable } from '@angular/core';
import { addDays, addMonths, addWeeks, addYears, endOfDay, endOfISOWeek, endOfMonth, endOfWeek, endOfYear, format, getISODay, isAfter, isBefore, isSameDay, setISODay, startOfDay, startOfISOWeek, startOfMonth, startOfWeek, startOfYear, subMonths, subWeeks, subYears } from 'date-fns';
import * as i0 from "@angular/core";
function isBetween(date, rangeLeft, rangeRight) {
    return (isAfter(date, rangeLeft) || isSameDay(date, rangeLeft)) &&
        (isBefore(date, rangeRight) || isSameDay(date, rangeRight));
}
function periodOrder(entryType) {
    return ['day', 'week', 'month', 'year'].indexOf(entryType);
}
let AjfCalendarService = /** @class */ (() => {
    let AjfCalendarService = class AjfCalendarService {
        buildView(params) {
            const { viewMode, viewDate } = params;
            switch (viewMode) {
                case 'decade':
                    let curYear = viewDate.getFullYear();
                    let firstYear = curYear - (curYear % 10) + 1;
                    let lastYear = firstYear + 11;
                    return {
                        header: `${firstYear} - ${lastYear}`,
                        headerRow: [],
                        rows: this._decadeCalendarRows(params),
                    };
                case 'year':
                    return {
                        header: `${viewDate.getFullYear()}`,
                        headerRow: [],
                        rows: this._yearCalendarRows(params),
                    };
                case 'month':
                    return {
                        header: format(viewDate, 'MMM yyyy'),
                        headerRow: this._monthHeaderRow(params),
                        rows: this._monthCalendarRows(params),
                    };
            }
            return {
                header: '',
                headerRow: [],
                rows: [],
            };
        }
        monthBounds(date, isoMode) {
            if (!isoMode) {
                return {
                    start: startOfMonth(date),
                    end: endOfMonth(date),
                };
            }
            const isoDay = getISODay(date);
            date = isoDay < 4 ? endOfISOWeek(date) : startOfISOWeek(date);
            let startDate = startOfMonth(date);
            let endDate = endOfMonth(startDate);
            const startWeekDay = startDate.getDay();
            const endWeekDay = endDate.getDay();
            if (startWeekDay == 0 || startWeekDay > 4) {
                startDate = addWeeks(startDate, 1);
            }
            if (endWeekDay > 0 && endWeekDay < 4) {
                endDate = subWeeks(endDate, 1);
            }
            startDate = startOfISOWeek(startDate);
            endDate = endOfISOWeek(endDate);
            return { start: startDate, end: endDate };
        }
        getEntryRange(entry) {
            if (entry.type === 'day') {
                return { start: new Date(entry.date), end: new Date(entry.date) };
            }
            else {
                let curDate = new Date(entry.date);
                return {
                    start: entry.type === 'month' ? startOfMonth(curDate) : startOfYear(curDate),
                    end: entry.type === 'month' ? endOfMonth(curDate) : endOfYear(curDate)
                };
            }
        }
        isEntrySelected(entry, selection) {
            if (selection != null && selection.startDate != null && selection.endDate != null) {
                let selectionStart = startOfDay(selection.startDate);
                let selectionEnd = endOfDay(selection.endDate);
                let selectionPeriodOrder = periodOrder(selection.type);
                let entryPeriodOrder = periodOrder(entry.type);
                let entryRange = this.getEntryRange(entry);
                if (entryPeriodOrder <= selectionPeriodOrder &&
                    isBetween(entryRange.start, selectionStart, selectionEnd) &&
                    isBetween(entryRange.end, selectionStart, selectionEnd)) {
                    return 'full';
                }
                else if (entryPeriodOrder > selectionPeriodOrder &&
                    isBetween(selectionStart, entryRange.start, entryRange.end) &&
                    isBetween(selectionEnd, entryRange.start, entryRange.end)) {
                    return 'partial';
                }
            }
            return 'none';
        }
        entryLabel(entry) {
            if (entry.type === 'day') {
                return `${entry.date.getDate()}`;
            }
            if (entry.type === 'month') {
                return format(entry.date, 'MMM');
            }
            return `${entry.date.getFullYear()}`;
        }
        nextView(viewDate, viewMode) {
            if (viewMode == 'month') {
                return addMonths(viewDate, 1);
            }
            else if (viewMode == 'year') {
                return addYears(viewDate, 1);
            }
            else if (viewMode == 'decade') {
                return addYears(viewDate, 10);
            }
            return viewDate;
        }
        previousView(viewDate, viewMode) {
            if (viewMode == 'month') {
                return subMonths(viewDate, 1);
            }
            else if (viewMode == 'year') {
                return subYears(viewDate, 1);
            }
            else if (viewMode == 'decade') {
                return subYears(viewDate, 10);
            }
            return viewDate;
        }
        _monthHeaderRow(params) {
            const { isoMode, viewDate } = params;
            let curDate;
            if (isoMode) {
                curDate = setISODay(startOfWeek(viewDate), 1);
            }
            else {
                curDate = startOfWeek(viewDate);
            }
            let weekDayNames = [];
            for (let i = 0; i < 7; i++) {
                weekDayNames.push(format(curDate, 'EEE'));
                curDate = addDays(curDate, 1);
            }
            return weekDayNames;
        }
        _decadeCalendarRows(params) {
            const { viewDate, selection } = params;
            let curYear = viewDate.getFullYear();
            let firstYear = curYear - (curYear % 10) + 1;
            let curDate = startOfYear(viewDate);
            curDate.setFullYear(firstYear);
            let rows = [];
            for (let i = 0; i < 4; i++) {
                let row = [];
                for (let j = 0; j < 3; j++) {
                    let date = new Date(curDate);
                    let newEntry = { type: 'year', date: date, selected: 'none' };
                    newEntry.selected = this.isEntrySelected(newEntry, selection);
                    row.push(newEntry);
                    curDate = addYears(curDate, 1);
                }
                rows.push(row);
            }
            return rows;
        }
        _yearCalendarRows(params) {
            const { viewDate, selection } = params;
            let curDate = startOfYear(viewDate);
            let rows = [];
            for (let i = 0; i < 4; i++) {
                let row = [];
                for (let j = 0; j < 3; j++) {
                    let date = new Date(curDate);
                    let newEntry = { type: 'month', date: date, selected: 'none' };
                    newEntry.selected = this.isEntrySelected(newEntry, selection);
                    row.push(newEntry);
                    curDate = addMonths(curDate, 1);
                }
                rows.push(row);
            }
            return rows;
        }
        _monthCalendarRows(params) {
            const { viewDate, selection, isoMode, minDate, maxDate } = params;
            const monthBounds = this.monthBounds(viewDate, isoMode);
            let viewStartDate = new Date(monthBounds.start);
            let viewEndDate = new Date(monthBounds.end);
            if (!isoMode) {
                viewStartDate = startOfWeek(viewStartDate);
                viewEndDate = endOfWeek(viewEndDate);
            }
            let rows = [];
            let todayDate = new Date();
            let curDate = new Date(viewStartDate);
            while (curDate < viewEndDate) {
                let row = [];
                for (let i = 0; i < 7; i++) {
                    let disabled = (minDate != null && isBefore(curDate, minDate)) ||
                        (maxDate != null && isAfter(curDate, maxDate));
                    let date = new Date(curDate);
                    let newEntry = {
                        type: 'day',
                        date: date,
                        selected: 'none',
                        highlight: format(todayDate, 'yyyy-MM-dd') === format(curDate, 'yyyy-MM-dd'),
                        disabled: disabled
                    };
                    newEntry.selected = this.isEntrySelected(newEntry, selection);
                    row.push(newEntry);
                    curDate = addDays(curDate, 1);
                }
                rows.push(row);
            }
            return rows;
        }
    };
    AjfCalendarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AjfCalendarService_Factory() { return new AjfCalendarService(); }, token: AjfCalendarService, providedIn: "root" });
    AjfCalendarService = __decorate([
        Injectable({ providedIn: 'root' })
    ], AjfCalendarService);
    return AjfCalendarService;
})();
export { AjfCalendarService };
//# sourceMappingURL=data:application/json;base64,