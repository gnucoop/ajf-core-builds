/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { AjfFieldType } from '../interface/fields/field-type';
import { AjfNodeType } from '../interface/nodes/node-type';
import { evaluateExpression } from '@ajf/core/models';
import { createPdf } from 'pdfmake/build/pdfmake';
import { vfsFonts } from './vfs-fonts';
const fontsMap = {
    Roboto: {
        normal: 'roboto-all-400-normal.woff',
        bold: 'roboto-all-500-normal.woff',
        italics: 'roboto-all-400-italic.woff',
        bolditalics: 'roboto-all-500-italic.woff'
    },
};
export function createFormPdf(formSchema, ts, formData) {
    const pdfDef = formToPdf(formSchema, ts, formData);
    return createPdf(pdfDef, undefined, fontsMap, vfsFonts);
}
function stripHTML(s) {
    return s.replace(/<\/?[^>]+(>|$)/g, '');
}
function translateFunction(ts) {
    if (ts == null) {
        return (s) => s;
    }
    return (s) => {
        if (s == null || s === '' || s === ' ') {
            return ' ';
        }
        return ts.instant(s);
    };
}
// Given a formData, lookupStringFunction returns a function that allows to retrieve
// the field values from the formData. The values are returned as print-friendly strings.
// rep is the index of the repeating slide, if the field belongs to one.
function lookupStringFunction(formData, rep) {
    if (formData == null || formData.data == null) {
        return (_) => ' ';
    }
    return (name) => {
        if (name == null) {
            return ' ';
        }
        if (rep != null) {
            name = name + '__' + rep;
        }
        const val = formData.data[name];
        if (val == null) {
            return ' ';
        }
        if (val === true) {
            return 'yes';
        }
        if (val === false) {
            return 'no';
        }
        return String(val);
    };
}
// Analogous to lookupStringFunction, but for multiple-choice questions,
// returning an array of values.
function lookupArrayFunction(formData, rep) {
    if (formData == null || formData.data == null) {
        return (_) => [];
    }
    return (name) => {
        if (name == null) {
            return [];
        }
        if (rep != null) {
            name = name + '__' + rep;
        }
        const val = formData.data[name];
        if (Array.isArray(val)) {
            return val;
        }
        return [];
    };
}
// Given an AjfForm, returns its pdfmake pdf document definition.
function formToPdf(formSchema, ts, formData) {
    const translate = translateFunction(ts);
    const name = translate(formSchema.name);
    const form = formSchema.schema;
    const choicesMap = {};
    for (const o of form.choicesOrigins) {
        choicesMap[o.name] = o.choices;
    }
    const content = [
        { text: name, fontSize: 22, bold: true, alignment: 'center', margin: [0, 0, 0, 10] }, {
            table: {
                widths: ['*', '*'],
                body: [[
                        translate('date start') + ': ' + (formData ? formData.date_start : ''),
                        translate('date end') + ': ' + (formData ? formData.date_end : ''),
                    ]]
            },
            layout: 'noBorders'
        }
    ];
    for (const slide of form.nodes) {
        if (slide.nodeType === AjfNodeType.AjfSlide) {
            content.push(...slideToPdf(slide, choicesMap, translate, formData));
        }
        else if (slide.nodeType === AjfNodeType.AjfRepeatingSlide) {
            content.push(...repeatingSlideToPdf(slide, choicesMap, translate, formData));
        }
    }
    const doc = { info: { title: name }, content };
    if (formSchema.is_tallysheet) {
        doc.pageOrientation = 'landscape';
    }
    return doc;
}
function slideToPdf(slide, choicesMap, translate, formData, rep) {
    let label = translate(slide.label);
    if (rep != null) {
        label = `${label} (${translate('repeat')} ${rep})`;
    }
    const content = [{ text: label, fontSize: 18, bold: true, margin: [0, 15, 0, 10] }];
    for (const field of slide.nodes) {
        content.push(...fieldToPdf(field, choicesMap, translate, formData, rep));
    }
    return content;
}
function repeatingSlideToPdf(slide, choicesMap, translate, formData) {
    let repeats = 3; // default, if no formData
    const maxRepeats = 20;
    if (formData != null && formData.data != null && slide.name != null) {
        const r = formData.data[slide.name];
        if (typeof (r) === 'number') {
            repeats = Math.min(r, maxRepeats);
        }
    }
    const content = [];
    for (let r = 0; r < repeats; r++) {
        content.push(...slideToPdf(slide, choicesMap, translate, formData, r));
    }
    return content;
}
function borderlessCell(text, bold) {
    return { table: { body: [[{ text, bold, border: [false, false, false, false] }]] } };
}
function fieldToPdf(field, choicesMap, translate, formData, rep) {
    if (field.nodeType !== AjfNodeType.AjfField) {
        throw new Error('not a field');
    }
    const visible = formData == null /* form not compiled, show all fields */ ||
        field.visibility == null ||
        evaluateExpression(field.visibility.condition, formData.data);
    if (!visible) {
        return [];
    }
    const lookupString = lookupStringFunction(formData, rep);
    switch (field.fieldType) {
        case AjfFieldType.String:
        case AjfFieldType.Text:
            return [
                borderlessCell(translate(field.label)),
                { table: { widths: ['*'], body: [[lookupString(field.name)]] }, margin: [5, 0, 0, 5] }
            ];
        case AjfFieldType.Formula:
            const formula = field.formula.formula;
            const value = evaluateExpression(formula, (formData || {}).data);
            return [
                borderlessCell(translate(field.label)),
                { table: { widths: ['*'], body: [[String(value)]] }, margin: [5, 0, 0, 5] }
            ];
        case AjfFieldType.Number:
        case AjfFieldType.Boolean:
        case AjfFieldType.DateInput:
        case AjfFieldType.Time:
            let val = lookupString(field.name);
            // for boolean fields in compiled forms, a null value is printed as 'no':
            if (field.fieldType === AjfFieldType.Boolean && formData != null && val === ' ') {
                val = 'no';
            }
            return [{
                    table: {
                        widths: ['*', '*'],
                        body: [[{ text: translate(field.label), border: [false, false, false, false] }, val]]
                    }
                }];
        case AjfFieldType.SingleChoice:
        case AjfFieldType.MultipleChoice:
            const choices = choicesMap[field.choicesOriginRef];
            if (formData == null) { // empty form
                return choiceToPdf(field, choices, translate);
            }
            // compiled form, only print choices that are selected
            const selectedValues = (field.fieldType === AjfFieldType.SingleChoice) ?
                [lookupString(field.name)] :
                lookupArrayFunction(formData, rep)(field.name);
            const selectedChoices = selectedValues.map(v => choices.find(c => c.value = v))
                .filter(c => c);
            return choiceToPdf(field, selectedChoices, translate);
        case AjfFieldType.Empty:
            const text = stripHTML(translate(field.HTML));
            return [borderlessCell(text, true)];
        case AjfFieldType.Table:
            return tableToPdf(field, lookupString, translate);
        default: // yet unsupported field type
            return [];
    }
}
function choiceToPdf(field, choices, translate) {
    let choiceLabels;
    if (choices == null || choices.length === 0) {
        choiceLabels = [' '];
    }
    else {
        choiceLabels = choices.map(c => c.label);
    }
    const body = [];
    for (const c of choiceLabels) {
        body.push([translate(c)]);
    }
    const question = translate(field.label) +
        ((field.fieldType === AjfFieldType.SingleChoice) ? ` (${translate('single choice')})` :
            ` (${translate('multipe choice')})`);
    return [{
            columns: [
                borderlessCell(question), {
                    table: { widths: ['*'], body },
                }
            ],
            margin: [0, 0, 0, 5]
        }];
}
function tableToPdf(table, lookupString, translate) {
    const body = [['', ...table.columnLabels.map(translate)]];
    for (let i = 0; i < table.rows.length; i++) {
        const row = [...table.rows[i]];
        for (let j = 0; j < row.length; j++) {
            if (typeof (row[j]) !== 'string') {
                row[j] = row[j].formula;
            }
        }
        const valsRow = row.map(lookupString).map(translate);
        body.push([translate(table.rowLabels[i]), ...valsRow]);
    }
    return [
        borderlessCell(translate(table.label)),
        { table: { body, widths: Array(table.columnLabels.length + 1).fill('*') }, margin: [5, 0, 0, 5] }
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS10by1wZGYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29yZS9mb3Jtcy9mb3JtLXRvLXBkZi9mb3JtLXRvLXBkZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFLSCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFHNUQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBS3pELE9BQU8sRUFBeUIsa0JBQWtCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUc1RSxPQUFPLEVBQUMsU0FBUyxFQUFjLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUVyQyxNQUFNLFFBQVEsR0FBRztJQUNmLE1BQU0sRUFBRTtRQUNOLE1BQU0sRUFBRSw0QkFBNEI7UUFDcEMsSUFBSSxFQUFFLDRCQUE0QjtRQUNsQyxPQUFPLEVBQUUsNEJBQTRCO1FBQ3JDLFdBQVcsRUFBRSw0QkFBNEI7S0FDMUM7Q0FDRixDQUFDO0FBa0JGLE1BQU0sVUFBVSxhQUFhLENBQzNCLFVBQXNCLEVBQUUsRUFBcUIsRUFBRSxRQUFtQjtJQUVsRSxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNuRCxPQUFPLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBT0QsU0FBUyxTQUFTLENBQUMsQ0FBUztJQUMxQixPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsRUFBcUI7SUFDOUMsSUFBSSxFQUFFLElBQUksSUFBSSxFQUFFO1FBQ2QsT0FB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QyxDQUFDLENBQUM7UUFDL0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsSUFBSSxPQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUMvQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUksR0FBRyxDQUFDLENBQUMsQ0FBa0IsQ0FBQyxPQUFPLENBQUM7YUFDM0M7U0FDRjtRQUNELE1BQU0sT0FBTyxHQUFJLEdBQWdCLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDeEQ7SUFDRCxPQUFPO1FBQ0wsY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsRUFBQyxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQztLQUM5RixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZDaG9pY2V9IGZyb20gJy4uL2ludGVyZmFjZS9jaG9pY2VzL2Nob2ljZSc7XG5pbXBvcnQge0FqZkVtcHR5RmllbGR9IGZyb20gJy4uL2ludGVyZmFjZS9maWVsZHMvZW1wdHktZmllbGQnO1xuaW1wb3J0IHtBamZGaWVsZH0gZnJvbSAnLi4vaW50ZXJmYWNlL2ZpZWxkcy9maWVsZCc7XG5pbXBvcnQge0FqZkZpZWxkVHlwZX0gZnJvbSAnLi4vaW50ZXJmYWNlL2ZpZWxkcy9maWVsZC10eXBlJztcbmltcG9ydCB7QWpmRm9ybX0gZnJvbSAnLi4vaW50ZXJmYWNlL2Zvcm1zL2Zvcm0nO1xuaW1wb3J0IHtBamZGb3JtdWxhRmllbGR9IGZyb20gJy4uL2ludGVyZmFjZS9maWVsZHMvZm9ybXVsYS1maWVsZCc7XG5pbXBvcnQge0FqZk5vZGVUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2Uvbm9kZXMvbm9kZS10eXBlJztcbmltcG9ydCB7QWpmUmVwZWF0aW5nU2xpZGV9IGZyb20gJy4uL2ludGVyZmFjZS9zbGlkZXMvcmVwZWF0aW5nLXNsaWRlJztcbmltcG9ydCB7QWpmU2xpZGV9IGZyb20gJy4uL2ludGVyZmFjZS9zbGlkZXMvc2xpZGUnO1xuaW1wb3J0IHtBamZUYWJsZUNlbGwsIEFqZlRhYmxlRmllbGR9IGZyb20gJy4uL2ludGVyZmFjZS9maWVsZHMvdGFibGUtZmllbGQnO1xuXG5pbXBvcnQge0FqZkNvbnRleHQsIEFqZkZvcm11bGEsIGV2YWx1YXRlRXhwcmVzc2lvbn0gZnJvbSAnQGFqZi9jb3JlL21vZGVscyc7XG5cbmltcG9ydCB7Q29udGVudCwgVERvY3VtZW50RGVmaW5pdGlvbnN9IGZyb20gJ3BkZm1ha2UvaW50ZXJmYWNlcyc7XG5pbXBvcnQge2NyZWF0ZVBkZiwgVENyZWF0ZWRQZGZ9IGZyb20gJ3BkZm1ha2UvYnVpbGQvcGRmbWFrZSc7XG5pbXBvcnQge3Zmc0ZvbnRzfSBmcm9tICcuL3Zmcy1mb250cyc7XG5cbmNvbnN0IGZvbnRzTWFwID0ge1xuICBSb2JvdG86IHtcbiAgICBub3JtYWw6ICdyb2JvdG8tYWxsLTQwMC1ub3JtYWwud29mZicsXG4gICAgYm9sZDogJ3JvYm90by1hbGwtNTAwLW5vcm1hbC53b2ZmJyxcbiAgICBpdGFsaWNzOiAncm9ib3RvLWFsbC00MDAtaXRhbGljLndvZmYnLFxuICAgIGJvbGRpdGFsaWNzOiAncm9ib3RvLWFsbC01MDAtaXRhbGljLndvZmYnXG4gIH0sXG59O1xuXG5pbnRlcmZhY2UgRm9ybVNjaGVtYSB7XG4gIG5hbWU6IHN0cmluZztcbiAgc2NoZW1hOiBBamZGb3JtO1xuICBpc190YWxseXNoZWV0OiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgRm9ybURhdGEge1xuICBkYXRlX3N0YXJ0OiBzdHJpbmc7XG4gIGRhdGVfZW5kOiBzdHJpbmc7XG4gIGRhdGE6IEFqZkNvbnRleHQ7XG59XG5cbmludGVyZmFjZSBUcmFuc2xhdGVTZXJ2aWNlIHtcbiAgaW5zdGFudChzOiBzdHJpbmcpOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGb3JtUGRmKFxuICBmb3JtU2NoZW1hOiBGb3JtU2NoZW1hLCB0cz86IFRyYW5zbGF0ZVNlcnZpY2UsIGZvcm1EYXRhPzogRm9ybURhdGEpOiBUQ3JlYXRlZFBkZiB7XG5cbiAgY29uc3QgcGRmRGVmID0gZm9ybVRvUGRmKGZvcm1TY2hlbWEsIHRzLCBmb3JtRGF0YSk7XG4gIHJldHVybiBjcmVhdGVQZGYocGRmRGVmLCB1bmRlZmluZWQsIGZvbnRzTWFwLCB2ZnNGb250cyk7XG59XG5cbi8vIENob2ljZXNNYXAgbWFwcyBhIGNob2ljZXNPcmlnaW5SZWYgdG8gdGhlIGxpc3QgdGhlIGNob2ljZXMuXG5pbnRlcmZhY2UgQ2hvaWNlc01hcCB7XG4gIFtuYW1lOiBzdHJpbmddOiBBamZDaG9pY2U8YW55PltdO1xufVxuXG5mdW5jdGlvbiBzdHJpcEhUTUwoczogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHMucmVwbGFjZSgvPFxcLz9bXj5dKyg+fCQpL2csICcnKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlRnVuY3Rpb24odHM/OiBUcmFuc2xhdGVTZXJ2aWNlKTogKHM6IHN0cmluZykgPT4gc3RyaW5nIHtcbiAgaWYgKHRzID09IG51bGwpIHtcbiAgICByZXR1cm4gKHM6IHN0cmluZykgPT4gcztcbiAgfVxuICByZXR1cm4gKHM6IHN0cmluZykgPT4ge1xuICAgIGlmIChzID09IG51bGwgfHwgcyA9PT0gJycgfHwgcyA9PT0gJyAnKSB7XG4gICAgICByZXR1cm4gJyAnO1xuICAgIH1cbiAgICByZXR1cm4gdHMuaW5zdGFudChzKSBhcyBzdHJpbmc7XG4gIH07XG59XG5cbi8vIEdpdmVuIGEgZm9ybURhdGEsIGxvb2t1cFN0cmluZ0Z1bmN0aW9uIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFsbG93cyB0byByZXRyaWV2ZVxuLy8gdGhlIGZpZWxkIHZhbHVlcyBmcm9tIHRoZSBmb3JtRGF0YS4gVGhlIHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcHJpbnQtZnJpZW5kbHkgc3RyaW5ncy5cbi8vIHJlcCBpcyB0aGUgaW5kZXggb2YgdGhlIHJlcGVhdGluZyBzbGlkZSwgaWYgdGhlIGZpZWxkIGJlbG9uZ3MgdG8gb25lLlxuZnVuY3Rpb24gbG9va3VwU3RyaW5nRnVuY3Rpb24oZm9ybURhdGE/OiBGb3JtRGF0YSwgcmVwPzogbnVtYmVyKTogKG5hbWU6IHN0cmluZykgPT4gc3RyaW5nIHtcbiAgaWYgKGZvcm1EYXRhID09IG51bGwgfHwgZm9ybURhdGEuZGF0YSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIChfOiBzdHJpbmcpID0+ICcgJztcbiAgfVxuICByZXR1cm4gKG5hbWU6IHN0cmluZykgPT4ge1xuICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnICc7XG4gICAgfVxuICAgIGlmIChyZXAgIT0gbnVsbCkge1xuICAgICAgbmFtZSA9IG5hbWUgKyAnX18nICsgcmVwO1xuICAgIH1cbiAgICBjb25zdCB2YWwgPSBmb3JtRGF0YS5kYXRhW25hbWVdO1xuICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcgJztcbiAgICB9XG4gICAgaWYgKHZhbCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuICd5ZXMnO1xuICAgIH1cbiAgICBpZiAodmFsID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuICdubyc7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcodmFsKTtcbiAgfTtcbn1cblxuLy8gQW5hbG9nb3VzIHRvIGxvb2t1cFN0cmluZ0Z1bmN0aW9uLCBidXQgZm9yIG11bHRpcGxlLWNob2ljZSBxdWVzdGlvbnMsXG4vLyByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdmFsdWVzLlxuZnVuY3Rpb24gbG9va3VwQXJyYXlGdW5jdGlvbihmb3JtRGF0YT86IEZvcm1EYXRhLCByZXA/OiBudW1iZXIpOiAobmFtZTogc3RyaW5nKSA9PiBzdHJpbmdbXSB7XG4gIGlmIChmb3JtRGF0YSA9PSBudWxsIHx8IGZvcm1EYXRhLmRhdGEgPT0gbnVsbCkge1xuICAgIHJldHVybiAoXzogc3RyaW5nKSA9PiBbXTtcbiAgfVxuICByZXR1cm4gKG5hbWU6IHN0cmluZykgPT4ge1xuICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKHJlcCAhPSBudWxsKSB7XG4gICAgICBuYW1lID0gbmFtZSArICdfXycgKyByZXA7XG4gICAgfVxuICAgIGNvbnN0IHZhbCA9IGZvcm1EYXRhLmRhdGFbbmFtZV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9O1xufVxuXG4vLyBHaXZlbiBhbiBBamZGb3JtLCByZXR1cm5zIGl0cyBwZGZtYWtlIHBkZiBkb2N1bWVudCBkZWZpbml0aW9uLlxuZnVuY3Rpb24gZm9ybVRvUGRmKFxuICBmb3JtU2NoZW1hOiBGb3JtU2NoZW1hLCB0cz86IFRyYW5zbGF0ZVNlcnZpY2UsIGZvcm1EYXRhPzogRm9ybURhdGEpOiBURG9jdW1lbnREZWZpbml0aW9ucyB7XG5cbiAgY29uc3QgdHJhbnNsYXRlID0gdHJhbnNsYXRlRnVuY3Rpb24odHMpO1xuICBjb25zdCBuYW1lID0gdHJhbnNsYXRlKGZvcm1TY2hlbWEubmFtZSk7XG4gIGNvbnN0IGZvcm06IEFqZkZvcm0gPSBmb3JtU2NoZW1hLnNjaGVtYTtcblxuICBjb25zdCBjaG9pY2VzTWFwOiBDaG9pY2VzTWFwID0ge307XG4gIGZvciAoY29uc3QgbyBvZiBmb3JtLmNob2ljZXNPcmlnaW5zKSB7XG4gICAgY2hvaWNlc01hcFtvLm5hbWVdID0gby5jaG9pY2VzO1xuICB9XG5cbiAgY29uc3QgY29udGVudDogQ29udGVudFtdID0gW1xuICAgIHt0ZXh0OiBuYW1lLCBmb250U2l6ZTogMjIsIGJvbGQ6IHRydWUsIGFsaWdubWVudDogJ2NlbnRlcicsIG1hcmdpbjogWzAsIDAsIDAsIDEwXX0sIHtcbiAgICAgIHRhYmxlOiB7XG4gICAgICAgIHdpZHRoczogWycqJywgJyonXSxcbiAgICAgICAgYm9keTogW1tcbiAgICAgICAgICB0cmFuc2xhdGUoJ2RhdGUgc3RhcnQnKSArICc6ICcgKyAoZm9ybURhdGEgPyBmb3JtRGF0YS5kYXRlX3N0YXJ0IDogJycpLFxuICAgICAgICAgIHRyYW5zbGF0ZSgnZGF0ZSBlbmQnKSArICc6ICcgKyAoZm9ybURhdGEgPyBmb3JtRGF0YS5kYXRlX2VuZCA6ICcnKSxcbiAgICAgICAgXV1cbiAgICAgIH0sXG4gICAgICBsYXlvdXQ6ICdub0JvcmRlcnMnXG4gICAgfVxuICBdO1xuICBmb3IgKGNvbnN0IHNsaWRlIG9mIGZvcm0ubm9kZXMpIHtcbiAgICBpZiAoc2xpZGUubm9kZVR5cGUgPT09IEFqZk5vZGVUeXBlLkFqZlNsaWRlKSB7XG4gICAgICBjb250ZW50LnB1c2goLi4uc2xpZGVUb1BkZihzbGlkZSBhcyBBamZTbGlkZSwgY2hvaWNlc01hcCwgdHJhbnNsYXRlLCBmb3JtRGF0YSkpO1xuICAgIH0gZWxzZSBpZiAoc2xpZGUubm9kZVR5cGUgPT09IEFqZk5vZGVUeXBlLkFqZlJlcGVhdGluZ1NsaWRlKSB7XG4gICAgICBjb250ZW50LnB1c2goXG4gICAgICAgIC4uLnJlcGVhdGluZ1NsaWRlVG9QZGYoc2xpZGUgYXMgQWpmUmVwZWF0aW5nU2xpZGUsIGNob2ljZXNNYXAsIHRyYW5zbGF0ZSwgZm9ybURhdGEpXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb25zdCBkb2M6IFREb2N1bWVudERlZmluaXRpb25zID0ge2luZm86IHt0aXRsZTogbmFtZX0sIGNvbnRlbnR9O1xuICBpZiAoZm9ybVNjaGVtYS5pc190YWxseXNoZWV0KSB7XG4gICAgZG9jLnBhZ2VPcmllbnRhdGlvbiA9ICdsYW5kc2NhcGUnIGFzIGFueTtcbiAgfVxuICByZXR1cm4gZG9jO1xufVxuXG5mdW5jdGlvbiBzbGlkZVRvUGRmKFxuICBzbGlkZTogQWpmU2xpZGUgfCBBamZSZXBlYXRpbmdTbGlkZSwgY2hvaWNlc01hcDogQ2hvaWNlc01hcCxcbiAgdHJhbnNsYXRlOiAoczogc3RyaW5nKSA9PiBzdHJpbmcsIGZvcm1EYXRhPzogRm9ybURhdGEsIHJlcD86IG51bWJlcik6IENvbnRlbnRbXSB7XG5cbiAgbGV0IGxhYmVsID0gdHJhbnNsYXRlKHNsaWRlLmxhYmVsKTtcbiAgaWYgKHJlcCAhPSBudWxsKSB7XG4gICAgbGFiZWwgPSBgJHtsYWJlbH0gKCR7dHJhbnNsYXRlKCdyZXBlYXQnKX0gJHtyZXB9KWA7XG4gIH1cbiAgY29uc3QgY29udGVudDogQ29udGVudFtdID1cbiAgICBbe3RleHQ6IGxhYmVsLCBmb250U2l6ZTogMTgsIGJvbGQ6IHRydWUsIG1hcmdpbjogWzAsIDE1LCAwLCAxMF19XTtcbiAgZm9yIChjb25zdCBmaWVsZCBvZiAoc2xpZGUubm9kZXMgYXMgQWpmRmllbGRbXSkpIHtcbiAgICBjb250ZW50LnB1c2goLi4uZmllbGRUb1BkZihmaWVsZCwgY2hvaWNlc01hcCwgdHJhbnNsYXRlLCBmb3JtRGF0YSwgcmVwKSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbmZ1bmN0aW9uIHJlcGVhdGluZ1NsaWRlVG9QZGYoXG4gIHNsaWRlOiBBamZSZXBlYXRpbmdTbGlkZSwgY2hvaWNlc01hcDogQ2hvaWNlc01hcCwgdHJhbnNsYXRlOiAoczogc3RyaW5nKSA9PiBzdHJpbmcsXG4gIGZvcm1EYXRhPzogRm9ybURhdGEpOiBDb250ZW50W10ge1xuXG4gIGxldCByZXBlYXRzID0gMzsgIC8vIGRlZmF1bHQsIGlmIG5vIGZvcm1EYXRhXG4gIGNvbnN0IG1heFJlcGVhdHMgPSAyMDtcbiAgaWYgKGZvcm1EYXRhICE9IG51bGwgJiYgZm9ybURhdGEuZGF0YSAhPSBudWxsICYmIHNsaWRlLm5hbWUgIT0gbnVsbCkge1xuICAgIGNvbnN0IHIgPSBmb3JtRGF0YS5kYXRhW3NsaWRlLm5hbWVdO1xuICAgIGlmICh0eXBlb2YgKHIpID09PSAnbnVtYmVyJykge1xuICAgICAgcmVwZWF0cyA9IE1hdGgubWluKHIsIG1heFJlcGVhdHMpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGNvbnRlbnQgPSBbXTtcbiAgZm9yIChsZXQgciA9IDA7IHIgPCByZXBlYXRzOyByKyspIHtcbiAgICBjb250ZW50LnB1c2goLi4uc2xpZGVUb1BkZihzbGlkZSwgY2hvaWNlc01hcCwgdHJhbnNsYXRlLCBmb3JtRGF0YSwgcikpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5mdW5jdGlvbiBib3JkZXJsZXNzQ2VsbCh0ZXh0OiBzdHJpbmcsIGJvbGQ/OiBib29sZWFuKTogQ29udGVudCB7XG4gIHJldHVybiB7dGFibGU6IHtib2R5OiBbW3t0ZXh0LCBib2xkLCBib3JkZXI6IFtmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZV19XV19fTtcbn1cblxuZnVuY3Rpb24gZmllbGRUb1BkZihcbiAgZmllbGQ6IEFqZkZpZWxkLCBjaG9pY2VzTWFwOiBDaG9pY2VzTWFwLCB0cmFuc2xhdGU6IChzOiBzdHJpbmcpID0+IHN0cmluZyxcbiAgZm9ybURhdGE/OiBGb3JtRGF0YSwgcmVwPzogbnVtYmVyKTogQ29udGVudFtdIHtcblxuICBpZiAoZmllbGQubm9kZVR5cGUgIT09IEFqZk5vZGVUeXBlLkFqZkZpZWxkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdub3QgYSBmaWVsZCcpO1xuICB9XG5cbiAgY29uc3QgdmlzaWJsZSA9XG4gICAgZm9ybURhdGEgPT0gbnVsbCAvKiBmb3JtIG5vdCBjb21waWxlZCwgc2hvdyBhbGwgZmllbGRzICovIHx8XG4gICAgZmllbGQudmlzaWJpbGl0eSA9PSBudWxsIHx8XG4gICAgZXZhbHVhdGVFeHByZXNzaW9uKGZpZWxkLnZpc2liaWxpdHkuY29uZGl0aW9uLCBmb3JtRGF0YS5kYXRhKTtcbiAgaWYgKCF2aXNpYmxlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3QgbG9va3VwU3RyaW5nID0gbG9va3VwU3RyaW5nRnVuY3Rpb24oZm9ybURhdGEsIHJlcCk7XG5cbiAgc3dpdGNoIChmaWVsZC5maWVsZFR5cGUpIHtcbiAgICBjYXNlIEFqZkZpZWxkVHlwZS5TdHJpbmc6XG4gICAgY2FzZSBBamZGaWVsZFR5cGUuVGV4dDpcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGJvcmRlcmxlc3NDZWxsKHRyYW5zbGF0ZShmaWVsZC5sYWJlbCkpLFxuICAgICAgICB7dGFibGU6IHt3aWR0aHM6IFsnKiddLCBib2R5OiBbW2xvb2t1cFN0cmluZyhmaWVsZC5uYW1lKV1dfSwgbWFyZ2luOiBbNSwgMCwgMCwgNV19XG4gICAgICBdO1xuICAgIGNhc2UgQWpmRmllbGRUeXBlLkZvcm11bGE6XG4gICAgICBjb25zdCBmb3JtdWxhID0gKChmaWVsZCBhcyBBamZGb3JtdWxhRmllbGQpLmZvcm11bGEgYXMgQWpmRm9ybXVsYSkuZm9ybXVsYTtcbiAgICAgIGNvbnN0IHZhbHVlID0gZXZhbHVhdGVFeHByZXNzaW9uKGZvcm11bGEsIChmb3JtRGF0YSB8fCB7fSkuZGF0YSk7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBib3JkZXJsZXNzQ2VsbCh0cmFuc2xhdGUoZmllbGQubGFiZWwpKSxcbiAgICAgICAge3RhYmxlOiB7d2lkdGhzOiBbJyonXSwgYm9keTogW1tTdHJpbmcodmFsdWUpXV19LCBtYXJnaW46IFs1LCAwLCAwLCA1XX1cbiAgICAgIF07XG4gICAgY2FzZSBBamZGaWVsZFR5cGUuTnVtYmVyOlxuICAgIGNhc2UgQWpmRmllbGRUeXBlLkJvb2xlYW46XG4gICAgY2FzZSBBamZGaWVsZFR5cGUuRGF0ZUlucHV0OlxuICAgIGNhc2UgQWpmRmllbGRUeXBlLlRpbWU6XG4gICAgICBsZXQgdmFsID0gbG9va3VwU3RyaW5nKGZpZWxkLm5hbWUpO1xuICAgICAgLy8gZm9yIGJvb2xlYW4gZmllbGRzIGluIGNvbXBpbGVkIGZvcm1zLCBhIG51bGwgdmFsdWUgaXMgcHJpbnRlZCBhcyAnbm8nOlxuICAgICAgaWYgKGZpZWxkLmZpZWxkVHlwZSA9PT0gQWpmRmllbGRUeXBlLkJvb2xlYW4gJiYgZm9ybURhdGEgIT0gbnVsbCAmJiB2YWwgPT09ICcgJykge1xuICAgICAgICB2YWwgPSAnbm8nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIHRhYmxlOiB7XG4gICAgICAgICAgd2lkdGhzOiBbJyonLCAnKiddLFxuICAgICAgICAgIGJvZHk6IFtbIHt0ZXh0OiB0cmFuc2xhdGUoZmllbGQubGFiZWwpLCBib3JkZXI6IFtmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZV19LCB2YWwgXV1cbiAgICAgICAgfVxuICAgICAgfV07XG4gICAgY2FzZSBBamZGaWVsZFR5cGUuU2luZ2xlQ2hvaWNlOlxuICAgIGNhc2UgQWpmRmllbGRUeXBlLk11bHRpcGxlQ2hvaWNlOlxuICAgICAgY29uc3QgY2hvaWNlcyA9IGNob2ljZXNNYXBbKGZpZWxkIGFzIGFueSkuY2hvaWNlc09yaWdpblJlZl07XG4gICAgICBpZiAoZm9ybURhdGEgPT0gbnVsbCkgeyAvLyBlbXB0eSBmb3JtXG4gICAgICAgIHJldHVybiBjaG9pY2VUb1BkZihmaWVsZCwgY2hvaWNlcywgdHJhbnNsYXRlKTtcbiAgICAgIH1cbiAgICAgIC8vIGNvbXBpbGVkIGZvcm0sIG9ubHkgcHJpbnQgY2hvaWNlcyB0aGF0IGFyZSBzZWxlY3RlZFxuICAgICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZXMgPSAoZmllbGQuZmllbGRUeXBlID09PSBBamZGaWVsZFR5cGUuU2luZ2xlQ2hvaWNlKSA/XG4gICAgICAgIFtsb29rdXBTdHJpbmcoZmllbGQubmFtZSldIDpcbiAgICAgICAgbG9va3VwQXJyYXlGdW5jdGlvbihmb3JtRGF0YSwgcmVwKShmaWVsZC5uYW1lKTtcbiAgICAgIGNvbnN0IHNlbGVjdGVkQ2hvaWNlcyA9IHNlbGVjdGVkVmFsdWVzLm1hcCh2ID0+IGNob2ljZXMuZmluZChjID0+IGMudmFsdWUgPSB2KSlcbiAgICAgICAgLmZpbHRlcihjID0+IGMpIGFzIEFqZkNob2ljZTxhbnk+W107XG4gICAgICByZXR1cm4gY2hvaWNlVG9QZGYoZmllbGQsIHNlbGVjdGVkQ2hvaWNlcywgdHJhbnNsYXRlKTtcbiAgICBjYXNlIEFqZkZpZWxkVHlwZS5FbXB0eTpcbiAgICAgIGNvbnN0IHRleHQgPSBzdHJpcEhUTUwodHJhbnNsYXRlKChmaWVsZCBhcyBBamZFbXB0eUZpZWxkKS5IVE1MKSk7XG4gICAgICByZXR1cm4gW2JvcmRlcmxlc3NDZWxsKHRleHQsIHRydWUpXTtcbiAgICBjYXNlIEFqZkZpZWxkVHlwZS5UYWJsZTpcbiAgICAgIHJldHVybiB0YWJsZVRvUGRmKGZpZWxkIGFzIEFqZlRhYmxlRmllbGQsIGxvb2t1cFN0cmluZywgdHJhbnNsYXRlKTtcbiAgICBkZWZhdWx0OiAgLy8geWV0IHVuc3VwcG9ydGVkIGZpZWxkIHR5cGVcbiAgICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaG9pY2VUb1BkZihcbiAgZmllbGQ6IEFqZkZpZWxkLCBjaG9pY2VzOiBBamZDaG9pY2U8YW55PltdLCB0cmFuc2xhdGU6IChzOiBzdHJpbmcpID0+IHN0cmluZyk6IENvbnRlbnRbXSB7XG5cbiAgbGV0IGNob2ljZUxhYmVsczogc3RyaW5nW107XG4gIGlmIChjaG9pY2VzID09IG51bGwgfHwgY2hvaWNlcy5sZW5ndGggPT09IDApIHtcbiAgICBjaG9pY2VMYWJlbHMgPSBbJyAnXTtcbiAgfSBlbHNlIHtcbiAgICBjaG9pY2VMYWJlbHMgPSBjaG9pY2VzLm1hcChjID0+IGMubGFiZWwpO1xuICB9XG4gIGNvbnN0IGJvZHkgPSBbXTtcbiAgZm9yIChjb25zdCBjIG9mIGNob2ljZUxhYmVscykge1xuICAgIGJvZHkucHVzaChbdHJhbnNsYXRlKGMpXSk7XG4gIH1cbiAgY29uc3QgcXVlc3Rpb24gPSB0cmFuc2xhdGUoZmllbGQubGFiZWwpICtcbiAgICAoKGZpZWxkLmZpZWxkVHlwZSA9PT0gQWpmRmllbGRUeXBlLlNpbmdsZUNob2ljZSkgPyBgICgke3RyYW5zbGF0ZSgnc2luZ2xlIGNob2ljZScpfSlgIDpcbiAgICAgIGAgKCR7dHJhbnNsYXRlKCdtdWx0aXBlIGNob2ljZScpfSlgKTtcbiAgcmV0dXJuIFt7XG4gICAgY29sdW1uczogW1xuICAgICAgYm9yZGVybGVzc0NlbGwocXVlc3Rpb24pLCB7XG4gICAgICAgIHRhYmxlOiB7d2lkdGhzOiBbJyonXSwgYm9keX0sXG4gICAgICB9XG4gICAgXSxcbiAgICBtYXJnaW46IFswLCAwLCAwLCA1XVxuICB9XTtcbn1cblxuZnVuY3Rpb24gdGFibGVUb1BkZihcbiAgdGFibGU6IEFqZlRhYmxlRmllbGQsIGxvb2t1cFN0cmluZzogKHM6IHN0cmluZykgPT4gc3RyaW5nLFxuICB0cmFuc2xhdGU6IChzOiBzdHJpbmcpID0+IHN0cmluZyk6IENvbnRlbnRbXSB7XG5cbiAgY29uc3QgYm9keTogc3RyaW5nW11bXSA9IFtbJycsIC4uLnRhYmxlLmNvbHVtbkxhYmVscy5tYXAodHJhbnNsYXRlKV1dO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRhYmxlLnJvd3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCByb3cgPSBbLi4udGFibGUucm93c1tpXV07XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmICh0eXBlb2Yocm93W2pdKSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcm93W2pdID0gKHJvd1tqXSBhcyBBamZUYWJsZUNlbGwpLmZvcm11bGE7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHZhbHNSb3cgPSAocm93IGFzIHN0cmluZ1tdKS5tYXAobG9va3VwU3RyaW5nKS5tYXAodHJhbnNsYXRlKTtcbiAgICBib2R5LnB1c2goW3RyYW5zbGF0ZSh0YWJsZS5yb3dMYWJlbHNbaV0pLCAuLi52YWxzUm93XSk7XG4gIH1cbiAgcmV0dXJuIFtcbiAgICBib3JkZXJsZXNzQ2VsbCh0cmFuc2xhdGUodGFibGUubGFiZWwpKSxcbiAgICB7dGFibGU6IHtib2R5LCB3aWR0aHM6IEFycmF5KHRhYmxlLmNvbHVtbkxhYmVscy5sZW5ndGggKyAxKS5maWxsKCcqJyl9LCBtYXJnaW46IFs1LCAwLCAwLCA1XX1cbiAgXTtcbn1cbiJdfQ==