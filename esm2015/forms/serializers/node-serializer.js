/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { AjfConditionSerializer, AjfFormulaSerializer } from '@ajf/core/models';
import { AjfFieldType } from '../interface/fields/field-type';
import { AjfNodeType } from '../interface/nodes/node-type';
import { createField } from '../utils/fields/create-field';
import { createFieldWithChoices } from '../utils/fields/create-field-with-choices';
import { componentsMap } from '../utils/fields/fields-map';
import { createContainerNode } from '../utils/nodes/create-container-node';
import { createNode } from '../utils/nodes/create-node';
import { createNodeGroup } from '../utils/nodes/create-node-group';
import { createRepeatingNode } from '../utils/nodes/create-repeating-node';
import { createRepeatingSlide } from '../utils/slides/create-repeating-slide';
import { createSlide } from '../utils/slides/create-slide';
import { AjfValidationGroupSerializer } from './validation-group-serializer';
import { AjfWarningGroupSerializer } from './warning-group-serializer';
/**
 * Create an AjfNode by json schema,
 * apply a default value for name
 * throw new error if id,parent or nodeType attribute missed
 */
export class AjfNodeSerializer {
    static fromJson(json, choicesOrigins, attachmentsOrigins) {
        const err = 'Malformed node';
        json.name = json.name || '';
        if (json.id == null || json.parent == null || json.nodeType == null) {
            throw new Error(err);
        }
        const obj = json;
        if (obj.visibility) {
            obj.visibility = AjfConditionSerializer.fromJson(obj.visibility);
        }
        obj.conditionalBranches =
            (obj.conditionalBranches || []).map(c => AjfConditionSerializer.fromJson(c));
        // call serializer by nodeType and cast obj with the right interface
        switch (obj.nodeType) {
            case AjfNodeType.AjfField:
                return AjfNodeSerializer._fieldFromJson(obj, choicesOrigins, attachmentsOrigins);
            case AjfNodeType.AjfFieldNodeLink:
                return AjfNodeSerializer._fieldNodeLinkFromJson(obj);
            case AjfNodeType.AjfNodeGroup:
                return AjfNodeSerializer._nodeGroupFromJson(obj, choicesOrigins, attachmentsOrigins);
            case AjfNodeType.AjfRepeatingSlide:
                return AjfNodeSerializer._repeatingSlideFromJson(obj, choicesOrigins, attachmentsOrigins);
            case AjfNodeType.AjfSlide:
                const slideObj = obj;
                if (slideObj.readonly) {
                    slideObj.readonly = AjfConditionSerializer.fromJson(slideObj.readonly);
                }
                return AjfNodeSerializer._slideFromJson(slideObj, choicesOrigins, attachmentsOrigins);
        }
        throw new Error(err);
    }
    static _containerNodeFromJson(json, choicesOrigins, attachmentsOrigins) {
        json.nodes = (json.nodes ||
            []).map(n => AjfNodeSerializer.fromJson(n, choicesOrigins, attachmentsOrigins));
        return createContainerNode(json);
    }
    static _fieldFromJson(json, choicesOrigins, attachmentsOrigins) {
        if (json.fieldType == null) {
            throw new Error('Malformed field');
        }
        const obj = json;
        if (obj.validation) {
            obj.validation = AjfValidationGroupSerializer.fromJson(obj.validation);
        }
        if (obj.warning) {
            obj.warning = AjfWarningGroupSerializer.fromJson(obj.warning);
        }
        if (json.attachmentsOriginRef) {
            obj.attachmentOrigin =
                (attachmentsOrigins || []).find(a => a.name === json.attachmentsOriginRef);
        }
        if (obj.nextSlideCondition) {
            obj.nextSlideCondition = AjfConditionSerializer.fromJson(obj.nextSlideCondition);
        }
        const isCustomFieldWithChoice = obj.fieldType > 100 && componentsMap[obj.fieldType] != null &&
            componentsMap[obj.fieldType].isFieldWithChoice === true;
        if (isCustomFieldWithChoice) {
            return AjfNodeSerializer._fieldWithChoicesFromJson(json, choicesOrigins);
        }
        switch (obj.fieldType) {
            case AjfFieldType.Formula:
                return AjfNodeSerializer._formulaFieldFromJson(json);
            case AjfFieldType.MultipleChoice:
            case AjfFieldType.SingleChoice:
                return AjfNodeSerializer._fieldWithChoicesFromJson(json, choicesOrigins);
        }
        return createField(obj);
    }
    static _fieldNodeLinkFromJson(json) {
        return Object.assign(Object.assign({}, createNode(json)), { nodeType: AjfNodeType.AjfFieldNodeLink });
    }
    static _fieldWithChoicesFromJson(json, choicesOrigins) {
        const err = 'Malformed field with choices';
        if (json.choicesOriginRef == null) {
            throw new Error(err);
        }
        const choicesOrigin = (choicesOrigins || []).find(c => c.name === json.choicesOriginRef);
        if (choicesOrigin == null) {
            throw new Error(err);
        }
        if (json.choicesFilter) {
            json.choicesFilter = AjfFormulaSerializer.fromJson(json.choicesFilter);
        }
        if (json.triggerConditions) {
            json.triggerConditions = json.triggerConditions.map(t => AjfConditionSerializer.fromJson(t));
        }
        return createFieldWithChoices(Object.assign(Object.assign({}, json), { choicesOrigin }));
    }
    static _formulaFieldFromJson(json) {
        if (json.formula) {
            json.formula = AjfFormulaSerializer.fromJson(json.formula);
        }
        return Object.assign(Object.assign({}, createField(json)), { fieldType: AjfFieldType.Formula });
    }
    static _nodeGroupFromJson(json, choicesOrigins, attachmentsOrigins) {
        return createNodeGroup(Object.assign(Object.assign({}, AjfNodeSerializer._containerNodeFromJson(json, choicesOrigins, attachmentsOrigins)), AjfNodeSerializer._repeatingNodeFromJson(json)));
    }
    static _repeatingNodeFromJson(json) {
        if (json.formulaReps) {
            json.formulaReps = AjfFormulaSerializer.fromJson(json.formulaReps);
        }
        return createRepeatingNode(json);
    }
    static _repeatingSlideFromJson(json, choicesOrigins, attachmentsOrigins) {
        return createRepeatingSlide(Object.assign(Object.assign({}, AjfNodeSerializer._containerNodeFromJson(json, choicesOrigins, attachmentsOrigins)), AjfNodeSerializer._repeatingNodeFromJson(json)));
    }
    static _slideFromJson(json, choicesOrigins, attachmentsOrigins) {
        return createSlide(AjfNodeSerializer._containerNodeFromJson(json, choicesOrigins, attachmentsOrigins));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvcmUvZm9ybXMvc2VyaWFsaXplcnMvbm9kZS1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUVILE9BQU8sRUFBQyxzQkFBc0IsRUFBRSxvQkFBb0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBSzlFLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQU81RCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFJekQsT0FBTyxFQUFpQixXQUFXLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUN6RSxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSwyQ0FBMkMsQ0FBQztBQUNqRixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDekQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFDekUsT0FBTyxFQUFnQixVQUFVLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUNyRSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFDakUsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFDekUsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sd0NBQXdDLENBQUM7QUFDNUUsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBRXpELE9BQU8sRUFBQyw0QkFBNEIsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQzNFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBRXJFOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLE1BQU0sQ0FBQyxRQUFRLENBQ1gsSUFBc0IsRUFDdEIsY0FBd0Ms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a0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQzFGLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZDb25kaXRpb25TZXJpYWxpemVyLCBBamZGb3JtdWxhU2VyaWFsaXplcn0gZnJvbSAnQGFqZi9jb3JlL21vZGVscyc7XG5cbmltcG9ydCB7QWpmQXR0YWNobWVudHNPcmlnaW59IGZyb20gJy4uL2ludGVyZmFjZS9hdHRhY2htZW50cy9hdHRhY2htZW50cy1vcmlnaW4nO1xuaW1wb3J0IHtBamZDaG9pY2VzT3JpZ2lufSBmcm9tICcuLi9pbnRlcmZhY2UvY2hvaWNlcy9jaG9pY2VzLW9yaWdpbic7XG5pbXBvcnQge0FqZkZpZWxkfSBmcm9tICcuLi9pbnRlcmZhY2UvZmllbGRzL2ZpZWxkJztcbmltcG9ydCB7QWpmRmllbGRUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2UvZmllbGRzL2ZpZWxkLXR5cGUnO1xuaW1wb3J0IHtBamZGaWVsZFdpdGhDaG9pY2VzfSBmcm9tICcuLi9pbnRlcmZhY2UvZmllbGRzL2ZpZWxkLXdpdGgtY2hvaWNlcyc7XG5pbXBvcnQge0FqZkZvcm11bGFGaWVsZH0gZnJvbSAnLi4vaW50ZXJmYWNlL2ZpZWxkcy9mb3JtdWxhLWZpZWxkJztcbmltcG9ydCB7QWpmQ29udGFpbmVyTm9kZX0gZnJvbSAnLi4vaW50ZXJmYWNlL25vZGVzL2NvbnRhaW5lci1ub2RlJztcbmltcG9ydCB7QWpmTm9kZX0gZnJvbSAnLi4vaW50ZXJmYWNlL25vZGVzL25vZGUnO1xuaW1wb3J0IHtBamZOb2RlR3JvdXB9IGZyb20gJy4uL2ludGVyZmFjZS9ub2Rlcy9ub2RlLWdyb3VwJztcbmltcG9ydCB7QWpmRmllbGROb2RlTGlua30gZnJvbSAnLi4vaW50ZXJmYWNlL25vZGVzL25vZGUtbGluayc7XG5pbXBvcnQge0FqZk5vZGVUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2Uvbm9kZXMvbm9kZS10eXBlJztcbmltcG9ydCB7QWpmUmVwZWF0aW5nTm9kZX0gZnJvbSAnLi4vaW50ZXJmYWNlL25vZGVzL3JlcGVhdGluZy1ub2RlJztcbmltcG9ydCB7QWpmUmVwZWF0aW5nU2xpZGV9IGZyb20gJy4uL2ludGVyZmFjZS9zbGlkZXMvcmVwZWF0aW5nLXNsaWRlJztcbmltcG9ydCB7QWpmU2xpZGV9IGZyb20gJy4uL2ludGVyZmFjZS9zbGlkZXMvc2xpZGUnO1xuaW1wb3J0IHtBamZGaWVsZENyZWF0ZSwgY3JlYXRlRmllbGR9IGZyb20gJy4uL3V0aWxzL2ZpZWxkcy9jcmVhdGUtZmllbGQnO1xuaW1wb3J0IHtjcmVhdGVGaWVsZFdpdGhDaG9pY2VzfSBmcm9tICcuLi91dGlscy9maWVsZHMvY3JlYXRlLWZpZWxkLXdpdGgtY2hvaWNlcyc7XG5pbXBvcnQge2NvbXBvbmVudHNNYXB9IGZyb20gJy4uL3V0aWxzL2ZpZWxkcy9maWVsZHMtbWFwJztcbmltcG9ydCB7Y3JlYXRlQ29udGFpbmVyTm9kZX0gZnJvbSAnLi4vdXRpbHMvbm9kZXMvY3JlYXRlLWNvbnRhaW5lci1ub2RlJztcbmltcG9ydCB7QWpmTm9kZUNyZWF0ZSwgY3JlYXRlTm9kZX0gZnJvbSAnLi4vdXRpbHMvbm9kZXMvY3JlYXRlLW5vZGUnO1xuaW1wb3J0IHtjcmVhdGVOb2RlR3JvdXB9IGZyb20gJy4uL3V0aWxzL25vZGVzL2NyZWF0ZS1ub2RlLWdyb3VwJztcbmltcG9ydCB7Y3JlYXRlUmVwZWF0aW5nTm9kZX0gZnJvbSAnLi4vdXRpbHMvbm9kZXMvY3JlYXRlLXJlcGVhdGluZy1ub2RlJztcbmltcG9ydCB7Y3JlYXRlUmVwZWF0aW5nU2xpZGV9IGZyb20gJy4uL3V0aWxzL3NsaWRlcy9jcmVhdGUtcmVwZWF0aW5nLXNsaWRlJztcbmltcG9ydCB7Y3JlYXRlU2xpZGV9IGZyb20gJy4uL3V0aWxzL3NsaWRlcy9jcmVhdGUtc2xpZGUnO1xuXG5pbXBvcnQge0FqZlZhbGlkYXRpb25Hcm91cFNlcmlhbGl6ZXJ9IGZyb20gJy4vdmFsaWRhdGlvbi1ncm91cC1zZXJpYWxpemVyJztcbmltcG9ydCB7QWpmV2FybmluZ0dyb3VwU2VyaWFsaXplcn0gZnJvbSAnLi93YXJuaW5nLWdyb3VwLXNlcmlhbGl6ZXInO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBBamZOb2RlIGJ5IGpzb24gc2NoZW1hLFxuICogYXBwbHkgYSBkZWZhdWx0IHZhbHVlIGZvciBuYW1lXG4gKiB0aHJvdyBuZXcgZXJyb3IgaWYgaWQscGFyZW50IG9yIG5vZGVUeXBlIGF0dHJpYnV0ZSBtaXNzZWRcbiAqL1xuZXhwb3J0IGNsYXNzIEFqZk5vZGVTZXJpYWxpemVyIHtcbiAgc3RhdGljIGZyb21Kc29uKFxuICAgICAganNvbjogUGFydGlhbDxBamZOb2RlPixcbiAgICAgIGNob2ljZXNPcmlnaW5zPzogQWpmQ2hvaWNlc09yaWdpbjxhbnk+W10sXG4gICAgICBhdHRhY2htZW50c09yaWdpbnM/OiBBamZBdHRhY2htZW50c09yaWdpbjxhbnk+W10sXG4gICAgICApOiBBamZOb2RlIHtcbiAgICBjb25zdCBlcnIgPSAnTWFsZm9ybWVkIG5vZGUnO1xuICAgIGpzb24ubmFtZSA9IGpzb24ubmFtZSB8fCAnJztcbiAgICBpZiAoanNvbi5pZCA9PSBudWxsIHx8IGpzb24ucGFyZW50ID09IG51bGwgfHwganNvbi5ub2RlVHlwZSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICB9XG4gICAgY29uc3Qgb2JqID0ganNvbiBhcyBBamZOb2RlQ3JlYXRlO1xuICAgIGlmIChvYmoudmlzaWJpbGl0eSkge1xuICAgICAgb2JqLnZpc2liaWxpdHkgPSBBamZDb25kaXRpb25TZXJpYWxpemVyLmZyb21Kc29uKG9iai52aXNpYmlsaXR5KTtcbiAgICB9XG4gICAgb2JqLmNvbmRpdGlvbmFsQnJhbmNoZXMgPVxuICAgICAgICAob2JqLmNvbmRpdGlvbmFsQnJhbmNoZXMgfHwgW10pLm1hcChjID0+IEFqZkNvbmRpdGlvblNlcmlhbGl6ZXIuZnJvbUpzb24oYykpO1xuICAgIC8vIGNhbGwgc2VyaWFsaXplciBieSBub2RlVHlwZSBhbmQgY2FzdCBvYmogd2l0aCB0aGUgcmlnaHQgaW50ZXJmYWNlXG4gICAgc3dpdGNoIChvYmoubm9kZVR5cGUpIHtcbiAgICAgIGNhc2UgQWpmTm9kZVR5cGUuQWpmRmllbGQ6XG4gICAgICAgIHJldHVybiBBamZOb2RlU2VyaWFsaXplci5fZmllbGRGcm9tSnNvbihcbiAgICAgICAgICAgIG9iaiBhcyBBamZOb2RlQ3JlYXRlICYgUGFydGlhbDxBamZGaWVsZD4sXG4gICAgICAgICAgICBjaG9pY2VzT3JpZ2lucyxcbiAgICAgICAgICAgIGF0dGFjaG1lbnRzT3JpZ2lucyxcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgQWpmTm9kZVR5cGUuQWpmRmllbGROb2RlTGluazpcbiAgICAgICAgcmV0dXJuIEFqZk5vZGVTZXJpYWxpemVyLl9maWVsZE5vZGVMaW5rRnJvbUpzb24oXG4gICAgICAgICAgICBvYmogYXMgQWpmTm9kZUNyZWF0ZSAmIFBhcnRpYWw8QWpmRmllbGROb2RlTGluaz4pO1xuICAgICAgY2FzZSBBamZOb2RlVHlwZS5BamZOb2RlR3JvdXA6XG4gICAgICAgIHJldHVybiBBamZOb2RlU2VyaWFsaXplci5fbm9kZUdyb3VwRnJvbUpzb24oXG4gICAgICAgICAgICBvYmogYXMgQWpmTm9kZUNyZWF0ZSAmIFBhcnRpYWw8QWpmTm9kZUdyb3VwPixcbiAgICAgICAgICAgIGNob2ljZXNPcmlnaW5zLFxuICAgICAgICAgICAgYXR0YWNobWVudHNPcmlnaW5zLFxuICAgICAgICApO1xuICAgICAgY2FzZSBBamZOb2RlVHlwZS5BamZSZXBlYXRpbmdTbGlkZTpcbiAgICAgICAgcmV0dXJuIEFqZk5vZGVTZXJpYWxpemVyLl9yZXBlYXRpbmdTbGlkZUZyb21Kc29uKFxuICAgICAgICAgICAgb2JqIGFzIEFqZk5vZGVDcmVhdGUgJiBQYXJ0aWFsPEFqZlJlcGVhdGluZ1NsaWRlPixcbiAgICAgICAgICAgIGNob2ljZXNPcmlnaW5zLFxuICAgICAgICAgICAgYXR0YWNobWVudHNPcmlnaW5zLFxuICAgICAgICApO1xuICAgICAgY2FzZSBBamZOb2RlVHlwZS5BamZTbGlkZTpcbiAgICAgICAgY29uc3Qgc2xpZGVPYmogPSBvYmogYXMgQWpmTm9kZUNyZWF0ZSAmIFBhcnRpYWw8QWpmU2xpZGU+O1xuICAgICAgICBpZiAoc2xpZGVPYmoucmVhZG9ubHkpIHtcbiAgICAgICAgICBzbGlkZU9iai5yZWFkb25seSA9IEFqZkNvbmRpdGlvblNlcmlhbGl6ZXIuZnJvbUpzb24oc2xpZGVPYmoucmVhZG9ubHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBamZOb2RlU2VyaWFsaXplci5fc2xpZGVGcm9tSnNvbihcbiAgICAgICAgICAgIHNsaWRlT2JqIGFzIEFqZk5vZGVDcmVhdGUgJiBQYXJ0aWFsPEFqZlNsaWRlPixcbiAgICAgICAgICAgIGNob2ljZXNPcmlnaW5zLFxuICAgICAgICAgICAgYXR0YWNobWVudHNPcmlnaW5zLFxuICAgICAgICApO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIF9jb250YWluZXJOb2RlRnJvbUpzb24oXG4gICAgICBqc29uOiBBamZOb2RlQ3JlYXRlJlBhcnRpYWw8QWpmQ29udGFpbmVyTm9kZT4sXG4gICAgICBjaG9pY2VzT3JpZ2lucz86IEFqZkNob2ljZXNPcmlnaW48YW55PltdLFxuICAgICAgYXR0YWNobWVudHNPcmlnaW5zPzogQWpmQXR0YWNobWVudHNPcmlnaW48YW55PltdLFxuICAgICAgKTogQWpmQ29udGFpbmVyTm9kZSB7XG4gICAganNvbi5ub2RlcyA9IChqc29uLm5vZGVzIHx8XG4gICAgICAgICAgICAgICAgICBbXSkubWFwKG4gPT4gQWpmTm9kZVNlcmlhbGl6ZXIuZnJvbUpzb24obiwgY2hvaWNlc09yaWdpbnMsIGF0dGFjaG1lbnRzT3JpZ2lucykpO1xuICAgIHJldHVybiBjcmVhdGVDb250YWluZXJOb2RlKGpzb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgX2ZpZWxkRnJvbUpzb24oXG4gICAgICBqc29uOiBBamZOb2RlQ3JlYXRlJlBhcnRpYWw8QWpmRmllbGQ+JlBhcnRpYWw8e2F0dGFjaG1lbnRzT3JpZ2luUmVmOiBzdHJpbmd9PixcbiAgICAgIGNob2ljZXNPcmlnaW5zPzogQWpmQ2hvaWNlc09yaWdpbjxhbnk+W10sXG4gICAgICBhdHRhY2htZW50c09yaWdpbnM/OiBBamZBdHRhY2htZW50c09yaWdpbjxhbnk+W10sXG4gICAgICApOiBBamZGaWVsZCB7XG4gICAgaWYgKGpzb24uZmllbGRUeXBlID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIGZpZWxkJyk7XG4gICAgfVxuICAgIGNvbnN0IG9iaiA9IGpzb24gYXMgQWpmRmllbGRDcmVhdGU7XG4gICAgaWYgKG9iai52YWxpZGF0aW9uKSB7XG4gICAgICBvYmoudmFsaWRhdGlvbiA9IEFqZlZhbGlkYXRpb25Hcm91cFNlcmlhbGl6ZXIuZnJvbUpzb24ob2JqLnZhbGlkYXRpb24pO1xuICAgIH1cbiAgICBpZiAob2JqLndhcm5pbmcpIHtcbiAgICAgIG9iai53YXJuaW5nID0gQWpmV2FybmluZ0dyb3VwU2VyaWFsaXplci5mcm9tSnNvbihvYmoud2FybmluZyk7XG4gICAgfVxuICAgIGlmIChqc29uLmF0dGFjaG1lbnRzT3JpZ2luUmVmKSB7XG4gICAgICBvYmouYXR0YWNobWVudE9yaWdpbiA9XG4gICAgICAgICAgKGF0dGFjaG1lbnRzT3JpZ2lucyB8fCBbXSkuZmluZChhID0+IGEubmFtZSA9PT0ganNvbi5hdHRhY2htZW50c09yaWdpblJlZik7XG4gICAgfVxuICAgIGlmIChvYmoubmV4dFNsaWRlQ29uZGl0aW9uKSB7XG4gICAgICBvYmoubmV4dFNsaWRlQ29uZGl0aW9uID0gQWpmQ29uZGl0aW9uU2VyaWFsaXplci5mcm9tSnNvbihvYmoubmV4dFNsaWRlQ29uZGl0aW9uKTtcbiAgICB9XG4gICAgY29uc3QgaXNDdXN0b21GaWVsZFdpdGhDaG9pY2UgPSBvYmouZmllbGRUeXBlID4gMTAwICYmIGNvbXBvbmVudHNNYXBbb2JqLmZpZWxkVHlwZV0gIT0gbnVsbCAmJlxuICAgICAgICBjb21wb25lbnRzTWFwW29iai5maWVsZFR5cGVdLmlzRmllbGRXaXRoQ2hvaWNlID09PSB0cnVlO1xuICAgIGlmIChpc0N1c3RvbUZpZWxkV2l0aENob2ljZSkge1xuICAgICAgcmV0dXJuIEFqZk5vZGVTZXJpYWxpemVyLl9maWVsZFdpdGhDaG9pY2VzRnJvbUpzb24oXG4gICAgICAgICAganNvbiBhcyBBamZGaWVsZENyZWF0ZSAmIFBhcnRpYWw8QWpmRmllbGRXaXRoQ2hvaWNlczxhbnk+PixcbiAgICAgICAgICBjaG9pY2VzT3JpZ2lucyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgc3dpdGNoIChvYmouZmllbGRUeXBlKSB7XG4gICAgICBjYXNlIEFqZkZpZWxkVHlwZS5Gb3JtdWxhOlxuICAgICAgICByZXR1cm4gQWpmTm9kZVNlcmlhbGl6ZXIuX2Zvcm11bGFGaWVsZEZyb21Kc29uKFxuICAgICAgICAgICAganNvbiBhcyBBamZGaWVsZENyZWF0ZSAmIFBhcnRpYWw8QWpmRm9ybXVsYUZpZWxkPik7XG4gICAgICBjYXNlIEFqZkZpZWxkVHlwZS5NdWx0aXBsZUNob2ljZTpcbiAgICAgIGNhc2UgQWpmRmllbGRUeXBlLlNpbmdsZUNob2ljZTpcbiAgICAgICAgcmV0dXJuIEFqZk5vZGVTZXJpYWxpemVyLl9maWVsZFdpdGhDaG9pY2VzRnJvbUpzb24oXG4gICAgICAgICAgICBqc29uIGFzIEFqZkZpZWxkQ3JlYXRlICYgUGFydGlhbDxBamZGaWVsZFdpdGhDaG9pY2VzPGFueT4+LFxuICAgICAgICAgICAgY2hvaWNlc09yaWdpbnMsXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVGaWVsZChvYmopO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgX2ZpZWxkTm9kZUxpbmtGcm9tSnNvbihqc29uOiBBamZOb2RlQ3JlYXRlJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhcnRpYWw8QWpmRmllbGROb2RlTGluaz4pOiBBamZGaWVsZE5vZGVMaW5rIHtcbiAgICByZXR1cm4gey4uLmNyZWF0ZU5vZGUoanNvbiksIG5vZGVUeXBlOiBBamZOb2RlVHlwZS5BamZGaWVsZE5vZGVMaW5rfTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIF9maWVsZFdpdGhDaG9pY2VzRnJvbUpzb24oXG4gICAgICBqc29uOiBBamZGaWVsZENyZWF0ZSZQYXJ0aWFsPEFqZkZpZWxkV2l0aENob2ljZXM8YW55Pj4mUGFydGlhbDx7Y2hvaWNlc09yaWdpblJlZjogc3RyaW5nfT4sXG4gICAgICBjaG9pY2VzT3JpZ2lucz86IEFqZkNob2ljZXNPcmlnaW48YW55PltdLFxuICAgICAgKTogQWpmRmllbGRXaXRoQ2hvaWNlczxhbnk+IHtcbiAgICBjb25zdCBlcnIgPSAnTWFsZm9ybWVkIGZpZWxkIHdpdGggY2hvaWNlcyc7XG4gICAgaWYgKGpzb24uY2hvaWNlc09yaWdpblJlZiA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICB9XG4gICAgY29uc3QgY2hvaWNlc09yaWdpbiA9IChjaG9pY2VzT3JpZ2lucyB8fCBbXSkuZmluZChjID0+IGMubmFtZSA9PT0ganNvbi5jaG9pY2VzT3JpZ2luUmVmKTtcbiAgICBpZiAoY2hvaWNlc09yaWdpbiA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICB9XG4gICAgaWYgKGpzb24uY2hvaWNlc0ZpbHRlcikge1xuICAgICAganNvbi5jaG9pY2VzRmlsdGVyID0gQWpmRm9ybXVsYVNlcmlhbGl6ZXIuZnJvbUpzb24oanNvbi5jaG9pY2VzRmlsdGVyKTtcbiAgICB9XG4gICAgaWYgKGpzb24udHJpZ2dlckNvbmRpdGlvbnMpIHtcbiAgICAgIGpzb24udHJpZ2dlckNvbmRpdGlvbnMgPSBqc29uLnRyaWdnZXJDb25kaXRpb25zLm1hcCh0ID0+IEFqZkNvbmRpdGlvblNlcmlhbGl6ZXIuZnJvbUpzb24odCkpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlRmllbGRXaXRoQ2hvaWNlczxhbnk+KHsuLi5qc29uLCBjaG9pY2VzT3JpZ2lufSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBfZm9ybXVsYUZpZWxkRnJvbUpzb24oanNvbjogQWpmRmllbGRDcmVhdGUmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJ0aWFsPEFqZkZvcm11bGFGaWVsZD4pOiBBamZGb3JtdWxhRmllbGQge1xuICAgIGlmIChqc29uLmZvcm11bGEpIHtcbiAgICAgIGpzb24uZm9ybXVsYSA9IEFqZkZvcm11bGFTZXJpYWxpemVyLmZyb21Kc29uKGpzb24uZm9ybXVsYSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAuLi5jcmVhdGVGaWVsZChqc29uKSxcbiAgICAgIGZpZWxkVHlwZTogQWpmRmllbGRUeXBlLkZvcm11bGEsXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIF9ub2RlR3JvdXBGcm9tSnNvbihcbiAgICAgIGpzb246IEFqZk5vZGVDcmVhdGUmUGFydGlhbDxBamZOb2RlR3JvdXA+LFxuICAgICAgY2hvaWNlc09yaWdpbnM/OiBBamZDaG9pY2VzT3JpZ2luPGFueT5bXSxcbiAgICAgIGF0dGFjaG1lbnRzT3JpZ2lucz86IEFqZkF0dGFjaG1lbnRzT3JpZ2luPGFueT5bXSxcbiAgICAgICk6IEFqZk5vZGVHcm91cCB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vZGVHcm91cCh7XG4gICAgICAuLi5BamZOb2RlU2VyaWFsaXplci5fY29udGFpbmVyTm9kZUZyb21Kc29uKGpzb24sIGNob2ljZXNPcmlnaW5zLCBhdHRhY2htZW50c09yaWdpbnMpLFxuICAgICAgLi4uQWpmTm9kZVNlcmlhbGl6ZXIuX3JlcGVhdGluZ05vZGVGcm9tSnNvbihqc29uKSxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIF9yZXBlYXRpbmdOb2RlRnJvbUpzb24oanNvbjogQWpmTm9kZUNyZWF0ZSZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJ0aWFsPEFqZlJlcGVhdGluZ05vZGU+KTogQWpmUmVwZWF0aW5nTm9kZSB7XG4gICAgaWYgKGpzb24uZm9ybXVsYVJlcHMpIHtcbiAgICAgIGpzb24uZm9ybXVsYVJlcHMgPSBBamZGb3JtdWxhU2VyaWFsaXplci5mcm9tSnNvbihqc29uLmZvcm11bGFSZXBzKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZVJlcGVhdGluZ05vZGUoanNvbik7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBfcmVwZWF0aW5nU2xpZGVGcm9tSnNvbihcbiAgICAgIGpzb246IEFqZk5vZGVDcmVhdGUmUGFydGlhbDxBamZSZXBlYXRpbmdTbGlkZT4sXG4gICAgICBjaG9pY2VzT3JpZ2lucz86IEFqZkNob2ljZXNPcmlnaW48YW55PltdLFxuICAgICAgYXR0YWNobWVudHNPcmlnaW5zPzogQWpmQXR0YWNobWVudHNPcmlnaW48YW55PltdLFxuICAgICAgKTogQWpmUmVwZWF0aW5nU2xpZGUge1xuICAgIHJldHVybiBjcmVhdGVSZXBlYXRpbmdTbGlkZSh7XG4gICAgICAuLi5BamZOb2RlU2VyaWFsaXplci5fY29udGFpbmVyTm9kZUZyb21Kc29uKGpzb24sIGNob2ljZXNPcmlnaW5zLCBhdHRhY2htZW50c09yaWdpbnMpLFxuICAgICAgLi4uQWpmTm9kZVNlcmlhbGl6ZXIuX3JlcGVhdGluZ05vZGVGcm9tSnNvbihqc29uKSxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIF9zbGlkZUZyb21Kc29uKFxuICAgICAganNvbjogQWpmTm9kZUNyZWF0ZSZQYXJ0aWFsPEFqZlNsaWRlPixcbiAgICAgIGNob2ljZXNPcmlnaW5zPzogQWpmQ2hvaWNlc09yaWdpbjxhbnk+W10sXG4gICAgICBhdHRhY2htZW50c09yaWdpbnM/OiBBamZBdHRhY2htZW50c09yaWdpbjxhbnk+W10sXG4gICAgICApOiBBamZTbGlkZSB7XG4gICAgcmV0dXJuIGNyZWF0ZVNsaWRlKFxuICAgICAgICBBamZOb2RlU2VyaWFsaXplci5fY29udGFpbmVyTm9kZUZyb21Kc29uKGpzb24sIGNob2ljZXNPcmlnaW5zLCBhdHRhY2htZW50c09yaWdpbnMpKTtcbiAgfVxufVxuIl19