/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { EventEmitter } from '@angular/core';
import { createNodeInstance } from '../nodes-instances/create-node-instance';
import { nodeInstanceCompleteName } from '../nodes-instances/node-instance-complete-name';
/**
 * Create a field instance and init the value of the field by cascade conditions.
 *
 * First check if the value is in the context by node name.
 * Second check if the value is in the context by complete name.
 * Third check if the field has a default value.
 * Else value is null.
 *
 * If instance validationResultsis is not defined assign empty array.
 * If instance warningResults is not defined assign empty array.
 * Init valid with false.
 */
export function createFieldInstance(instance, context) {
    const nodeInstance = createNodeInstance(instance);
    let value = null;
    if (nodeInstance.node != null && context != null) {
        const completeName = nodeInstanceCompleteName(nodeInstance);
        if (context[nodeInstance.node.name] != null) {
            value = context[nodeInstance.node.name];
        }
        else if (context[completeName] != null) {
            value = context[completeName];
        }
        else if (instance.node.defaultValue != null) {
            context[completeName] = instance.node.defaultValue;
            value = context[completeName];
        }
    }
    return Object.assign(Object.assign({}, nodeInstance), { node: instance.node, value, valid: false, validationResults: instance.validationResults || [], warningResults: instance.warningResults || [], warningTrigger: new EventEmitter() });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWZpZWxkLWluc3RhbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvcmUvZm9ybXMvdXRpbHMvZmllbGRzLWluc3RhbmNlcy9jcmVhdGUtZmllbGQtaW5zdGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBR0gsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQXdCLGtCQUFrQixFQUFDLE1BQU0seUNBQXlDLENBQUM7QUFDbEcsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sZ0RBQWdELENBQUM7QUFJeEY7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLFVBQVUsbUJBQW1CLENBQy9CLFFBQWdDLEVBQUUsT0FBbUI7SUFDdkQsTUFBTSxZQUFZLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEQsSUFBSSxLQUFLLEdBQVEsSUFBSSxDQUFDO0lBQ3RCLElBQUksWUFBWSxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtRQUNoRCxNQUFNLFlBQVksR0FBRyx3QkFBd0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM1RCxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtZQUMzQyxLQUFLLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekM7YUFBTSxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDeEMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMvQjthQUFNLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxFQUFFO1lBQzdDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNuRCxLQUFLLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQy9CO0tBQ0Y7SUFDRCx1Q0FDSyxZQUFZLEtBQ2YsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQ25CLEtBQUssRUFDTCxLQUFLLEVBQUUsS0FBSyxFQUNaLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLEVBQ25ELGNBQWMsRUFBRSxRQUFRLENBQUMsY0FBYyxJQUFJLEVBQUUsRUFDN0MsY0FBYyxFQUFFLElBQUksWUFBWSxFQUFRLElBQ3hDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZDb250ZXh0fSBmcm9tICdAYWpmL2NvcmUvbW9kZWxzJztcbmltcG9ydCB7RXZlbnRFbWl0dGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtBamZGaWVsZEluc3RhbmNlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2UvZmllbGRzLWluc3RhbmNlcy9maWVsZC1pbnN0YW5jZSc7XG5pbXBvcnQge0FqZk5vZGVJbnN0YW5jZUNyZWF0ZSwgY3JlYXRlTm9kZUluc3RhbmNlfSBmcm9tICcuLi9ub2Rlcy1pbnN0YW5jZXMvY3JlYXRlLW5vZGUtaW5zdGFuY2UnO1xuaW1wb3J0IHtub2RlSW5zdGFuY2VDb21wbGV0ZU5hbWV9IGZyb20gJy4uL25vZGVzLWluc3RhbmNlcy9ub2RlLWluc3RhbmNlLWNvbXBsZXRlLW5hbWUnO1xuXG5leHBvcnQgdHlwZSBBamZGaWVsZEluc3RhbmNlQ3JlYXRlID0gQWpmTm9kZUluc3RhbmNlQ3JlYXRlJlBhcnRpYWw8QWpmRmllbGRJbnN0YW5jZT47XG5cbi8qKlxuICogQ3JlYXRlIGEgZmllbGQgaW5zdGFuY2UgYW5kIGluaXQgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBieSBjYXNjYWRlIGNvbmRpdGlvbnMuXG4gKlxuICogRmlyc3QgY2hlY2sgaWYgdGhlIHZhbHVlIGlzIGluIHRoZSBjb250ZXh0IGJ5IG5vZGUgbmFtZS5cbiAqIFNlY29uZCBjaGVjayBpZiB0aGUgdmFsdWUgaXMgaW4gdGhlIGNvbnRleHQgYnkgY29tcGxldGUgbmFtZS5cbiAqIFRoaXJkIGNoZWNrIGlmIHRoZSBmaWVsZCBoYXMgYSBkZWZhdWx0IHZhbHVlLlxuICogRWxzZSB2YWx1ZSBpcyBudWxsLlxuICpcbiAqIElmIGluc3RhbmNlIHZhbGlkYXRpb25SZXN1bHRzaXMgaXMgbm90IGRlZmluZWQgYXNzaWduIGVtcHR5IGFycmF5LlxuICogSWYgaW5zdGFuY2Ugd2FybmluZ1Jlc3VsdHMgaXMgbm90IGRlZmluZWQgYXNzaWduIGVtcHR5IGFycmF5LlxuICogSW5pdCB2YWxpZCB3aXRoIGZhbHNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmllbGRJbnN0YW5jZShcbiAgICBpbnN0YW5jZTogQWpmRmllbGRJbnN0YW5jZUNyZWF0ZSwgY29udGV4dDogQWpmQ29udGV4dCk6IEFqZkZpZWxkSW5zdGFuY2Uge1xuICBjb25zdCBub2RlSW5zdGFuY2UgPSBjcmVhdGVOb2RlSW5zdGFuY2UoaW5zdGFuY2UpO1xuICBsZXQgdmFsdWU6IGFueSA9IG51bGw7XG4gIGlmIChub2RlSW5zdGFuY2Uubm9kZSAhPSBudWxsICYmIGNvbnRleHQgIT0gbnVsbCkge1xuICAgIGNvbnN0IGNvbXBsZXRlTmFtZSA9IG5vZGVJbnN0YW5jZUNvbXBsZXRlTmFtZShub2RlSW5zdGFuY2UpO1xuICAgIGlmIChjb250ZXh0W25vZGVJbnN0YW5jZS5ub2RlLm5hbWVdICE9IG51bGwpIHtcbiAgICAgIHZhbHVlID0gY29udGV4dFtub2RlSW5zdGFuY2Uubm9kZS5uYW1lXTtcbiAgICB9IGVsc2UgaWYgKGNvbnRleHRbY29tcGxldGVOYW1lXSAhPSBudWxsKSB7XG4gICAgICB2YWx1ZSA9IGNvbnRleHRbY29tcGxldGVOYW1lXTtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlLm5vZGUuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgIGNvbnRleHRbY29tcGxldGVOYW1lXSA9IGluc3RhbmNlLm5vZGUuZGVmYXVsdFZhbHVlO1xuICAgICAgdmFsdWUgPSBjb250ZXh0W2NvbXBsZXRlTmFtZV07XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgLi4ubm9kZUluc3RhbmNlLFxuICAgIG5vZGU6IGluc3RhbmNlLm5vZGUsXG4gICAgdmFsdWUsXG4gICAgdmFsaWQ6IGZhbHNlLFxuICAgIHZhbGlkYXRpb25SZXN1bHRzOiBpbnN0YW5jZS52YWxpZGF0aW9uUmVzdWx0cyB8fCBbXSxcbiAgICB3YXJuaW5nUmVzdWx0czogaW5zdGFuY2Uud2FybmluZ1Jlc3VsdHMgfHwgW10sXG4gICAgd2FybmluZ1RyaWdnZXI6IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKSxcbiAgfTtcbn1cbiJdfQ==