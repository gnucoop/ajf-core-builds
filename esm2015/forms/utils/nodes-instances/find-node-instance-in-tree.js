/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { isContainerNodeInstance } from './is-container-node-instance';
/**
 * It search recursively a nodeInstance inside a tree of nodes.
 * Base case: search it in main nodes.
 * Otherwise search it recursively inside all containerNodieInstance.
 * If found return the container of node instance and the index position inside him.
 */
export function findNodeInstanceInTree(nodes, node) {
    const index = nodes.indexOf(node);
    if (index > -1) {
        return { container: nodes, index: index };
    }
    const groups = nodes.filter(n => isContainerNodeInstance(n));
    let i = 0;
    const len = groups.length;
    while (i < len) {
        const res = findNodeInstanceInTree(groups[i].node.nodes, node);
        if (res.index > -1) {
            return res;
        }
        i++;
    }
    return { container: [], index: -1 };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC1ub2RlLWluc3RhbmNlLWluLXRyZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29yZS9mb3Jtcy91dGlscy9ub2Rlcy1pbnN0YW5jZXMvZmluZC1ub2RlLWluc3RhbmNlLWluLXRyZWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBR0gsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFFckU7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsS0FBd0IsRUFBRSxJQUFxQjtJQUVwRixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQ2QsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQyxDQUFDO0tBQ3pDO0lBQ0QsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMxQixPQUFPLENBQUMsR0FBRyxHQUFHLEVBQUU7UUFDZCxNQUFNLEdBQUcsR0FBRyxzQkFBc0IsQ0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0RSxJQUFJLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxHQUFHLENBQUM7U0FDWjtRQUNELENBQUMsRUFBRSxDQUFDO0tBQ0w7SUFDRCxPQUFPLEVBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQztBQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChDKSBHbnVjb29wIHNvYy4gY29vcC5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzXG4gKiBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSxcbiAqIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlUgQWZmZXJvXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKiBJZiBub3QsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvLlxuICpcbiAqL1xuXG5pbXBvcnQge0FqZk5vZGVJbnN0YW5jZX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL25vZGVzLWluc3RhbmNlcy9ub2RlLWluc3RhbmNlJztcbmltcG9ydCB7aXNDb250YWluZXJOb2RlSW5zdGFuY2V9IGZyb20gJy4vaXMtY29udGFpbmVyLW5vZGUtaW5zdGFuY2UnO1xuXG4vKipcbiAqIEl0IHNlYXJjaCByZWN1cnNpdmVseSBhIG5vZGVJbnN0YW5jZSBpbnNpZGUgYSB0cmVlIG9mIG5vZGVzLlxuICogQmFzZSBjYXNlOiBzZWFyY2ggaXQgaW4gbWFpbiBub2Rlcy5cbiAqIE90aGVyd2lzZSBzZWFyY2ggaXQgcmVjdXJzaXZlbHkgaW5zaWRlIGFsbCBjb250YWluZXJOb2RpZUluc3RhbmNlLlxuICogSWYgZm91bmQgcmV0dXJuIHRoZSBjb250YWluZXIgb2Ygbm9kZSBpbnN0YW5jZSBhbmQgdGhlIGluZGV4IHBvc2l0aW9uIGluc2lkZSBoaW0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTm9kZUluc3RhbmNlSW5UcmVlKG5vZGVzOiBBamZOb2RlSW5zdGFuY2VbXSwgbm9kZTogQWpmTm9kZUluc3RhbmNlKTpcbiAgICB7Y29udGFpbmVyOiBBamZOb2RlSW5zdGFuY2VbXSwgaW5kZXg6IG51bWJlcn0ge1xuICBjb25zdCBpbmRleCA9IG5vZGVzLmluZGV4T2Yobm9kZSk7XG4gIGlmIChpbmRleCA+IC0xKSB7XG4gICAgcmV0dXJuIHtjb250YWluZXI6IG5vZGVzLCBpbmRleDogaW5kZXh9O1xuICB9XG4gIGNvbnN0IGdyb3VwcyA9IG5vZGVzLmZpbHRlcihuID0+IGlzQ29udGFpbmVyTm9kZUluc3RhbmNlKG4pKTtcbiAgbGV0IGkgPSAwO1xuICBjb25zdCBsZW4gPSBncm91cHMubGVuZ3RoO1xuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIGNvbnN0IHJlcyA9IGZpbmROb2RlSW5zdGFuY2VJblRyZWUoKDxhbnk+Z3JvdXBzW2ldKS5ub2RlLm5vZGVzLCBub2RlKTtcbiAgICBpZiAocmVzLmluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGkrKztcbiAgfVxuICByZXR1cm4ge2NvbnRhaW5lcjogW10sIGluZGV4OiAtMX07XG59XG4iXX0=