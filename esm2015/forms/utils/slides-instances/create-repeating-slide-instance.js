/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { __rest } from "tslib";
import { AjfNodeType } from '../../interface/nodes/node-type';
import { createSlideInstance } from './create-slide-instance';
export function createRepeatingSlideInstance(instance) {
    const { node } = instance, slideInstanceCreate = __rest(instance, ["node"]);
    const { nodeType } = node, slideNode = __rest(node, ["nodeType"]);
    const slideInstance = createSlideInstance(Object.assign(Object.assign({}, slideInstanceCreate), { node: Object.assign({ nodeType: AjfNodeType.AjfSlide }, slideNode) }));
    return Object.assign(Object.assign({}, slideInstance), { node: instance.node, slideNodes: [], formulaReps: instance.formulaReps, reps: 0, nodes: [], flatNodes: [] });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXJlcGVhdGluZy1zbGlkZS1pbnN0YW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb3JlL2Zvcm1zL3V0aWxzL3NsaWRlcy1pbnN0YW5jZXMvY3JlYXRlLXJlcGVhdGluZy1zbGlkZS1pbnN0YW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7O0FBRUgsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBRTVELE9BQU8sRUFBeUIsbUJBQW1CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUtwRixNQUFNLFVBQVUsNEJBQTRCLENBQUMsUUFBeUM7SUFFcEYsTUFBTSxFQUFDLElBQUksS0FBNEIsUUFBUSxFQUEvQixtQkFBbUIsVUFBSSxRQUFRLEVBQXpDLFFBQThCLENBQVcsQ0FBQztJQUNoRCxNQUFNLEVBQUMsUUFBUSxLQUFrQixJQUFJLEVBQWpCLFNBQVMsVUFBSSxJQUFJLEVBQS9CLFlBQXdCLENBQU8sQ0FBQztJQUN0QyxNQUFNLGFBQWEsR0FBRyxtQkFBbUIsaUNBQ2pDLG1CQUFtQixLQUFFLElBQUksa0JBQUcsUUFBUSxFQUFFLFdBQVcsQ0FBQyxRQUFRLElBQUssU0FBUyxLQUFHLENBQUM7SUFDcEYsdUNBQ0ssYUFBYSxLQUNoQixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksRUFDbkIsVUFBVSxFQUFFLEVBQUUsRUFDZCxXQUFXLEVBQUUsUUFBUSxDQUFDLFdBQVcsRUFDakMsSUFBSSxFQUFFLENBQUMsRUFDUCxLQUFLLEVBQUUsRUFBRSxFQUNULFNBQVMsRUFBRSxFQUFFLElBQ2I7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChDKSBHbnVjb29wIHNvYy4gY29vcC5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzXG4gKiBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSxcbiAqIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlUgQWZmZXJvXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKiBJZiBub3QsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvLlxuICpcbiAqL1xuXG5pbXBvcnQge0FqZk5vZGVUeXBlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2Uvbm9kZXMvbm9kZS10eXBlJztcbmltcG9ydCB7QWpmUmVwZWF0aW5nU2xpZGVJbnN0YW5jZX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL3NsaWRlcy1pbnN0YW5jZXMvcmVwZWF0aW5nLXNsaWRlLWluc3RhbmNlJztcbmltcG9ydCB7QWpmU2xpZGVJbnN0YW5jZUNyZWF0ZSwgY3JlYXRlU2xpZGVJbnN0YW5jZX0gZnJvbSAnLi9jcmVhdGUtc2xpZGUtaW5zdGFuY2UnO1xuXG5leHBvcnQgdHlwZSBBamZSZXBlYXRpbmdTbGlkZUluc3RhbmNlQ3JlYXRlID0gT21pdDxBamZTbGlkZUluc3RhbmNlQ3JlYXRlLCAnbm9kZSc+JlxuICAgIFBpY2s8QWpmUmVwZWF0aW5nU2xpZGVJbnN0YW5jZSwgJ25vZGUnPiZQYXJ0aWFsPEFqZlJlcGVhdGluZ1NsaWRlSW5zdGFuY2U+O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVwZWF0aW5nU2xpZGVJbnN0YW5jZShpbnN0YW5jZTogQWpmUmVwZWF0aW5nU2xpZGVJbnN0YW5jZUNyZWF0ZSk6XG4gICAgQWpmUmVwZWF0aW5nU2xpZGVJbnN0YW5jZSB7XG4gIGNvbnN0IHtub2RlLCAuLi5zbGlkZUluc3RhbmNlQ3JlYXRlfSA9IGluc3RhbmNlO1xuICBjb25zdCB7bm9kZVR5cGUsIC4uLnNsaWRlTm9kZX0gPSBub2RlO1xuICBjb25zdCBzbGlkZUluc3RhbmNlID0gY3JlYXRlU2xpZGVJbnN0YW5jZShcbiAgICAgIHsuLi5zbGlkZUluc3RhbmNlQ3JlYXRlLCBub2RlOiB7bm9kZVR5cGU6IEFqZk5vZGVUeXBlLkFqZlNsaWRlLCAuLi5zbGlkZU5vZGV9fSk7XG4gIHJldHVybiB7XG4gICAgLi4uc2xpZGVJbnN0YW5jZSxcbiAgICBub2RlOiBpbnN0YW5jZS5ub2RlLFxuICAgIHNsaWRlTm9kZXM6IFtdLFxuICAgIGZvcm11bGFSZXBzOiBpbnN0YW5jZS5mb3JtdWxhUmVwcyxcbiAgICByZXBzOiAwLFxuICAgIG5vZGVzOiBbXSxcbiAgICBmbGF0Tm9kZXM6IFtdLFxuICB9O1xufVxuIl19