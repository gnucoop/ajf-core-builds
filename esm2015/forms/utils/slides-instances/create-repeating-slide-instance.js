/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { __rest } from "tslib";
import { AjfNodeType } from '../../interface/nodes/node-type';
import { createSlideInstance } from './create-slide-instance';
export function createRepeatingSlideInstance(instance) {
    const { node } = instance, slideInstanceCreate = __rest(instance, ["node"]);
    const { nodeType } = node, slideNode = __rest(node, ["nodeType"]);
    const slideInstance = createSlideInstance(Object.assign(Object.assign({}, slideInstanceCreate), { node: Object.assign({ nodeType: AjfNodeType.AjfSlide }, slideNode) }));
    return Object.assign(Object.assign({}, slideInstance), { node: instance.node, slideNodes: [], formulaReps: instance.formulaReps, disableRemoval: instance.disableRemoval, reps: 0, nodes: [], flatNodes: [] });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXJlcGVhdGluZy1zbGlkZS1pbnN0YW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb3JlL2Zvcm1zL3V0aWxzL3NsaWRlcy1pbnN0YW5jZXMvY3JlYXRlLXJlcGVhdGluZy1zbGlkZS1pbnN0YW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7O0FBRUgsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBRTVELE9BQU8sRUFBeUIsbUJBQW1CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUtwRixNQUFNLFVBQVUsNEJBQTRCLENBQUMsUUFBeUM7SUFFcEYsTUFBTSxFQUFDLElBQUksS0FBNEIsUUFBUSxFQUEvQixtQkFBbUIsVUFBSSxRQUFRLEVBQXpDLFFBQThCLENBQVcsQ0FBQztJQUNoRCxNQUFNLEVBQUMsUUFBUSxLQUFrQixJQUFJLEVBQWpCLFNBQVMsVUFBSSxJQUFJLEVBQS9CLFlBQXdCLENBQU8sQ0FBQztJQUN0QyxNQUFNLGFBQWEsR0FBRyxtQkFBbUIsaUNBQ2pDLG1CQUFtQixLQUFFLElBQUksa0JBQUcsUUFBUSxFQUFFLFdBQVcsQ0FBQyxRQUFRLElBQUssU0FBUyxLQUFHLENBQUM7SUFDcEYsdUNBQ0ssYUFBYSxLQUNoQixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksRUFDbkIsVUFBVSxFQUFFLEVBQUUsRUFDZCxXQUFXLEVBQUUsUUFBUSxDQUFDLFdBQVcsRUFDakMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxjQUFjLEVBQ3ZDLElBQUksRUFBRSxDQUFDLEVBQ1AsS0FBSyxFQUFFLEVBQUUsRUFDVCxTQUFTLEVBQUUsRUFBRSxJQUNiO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZOb2RlVHlwZX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL25vZGVzL25vZGUtdHlwZSc7XG5pbXBvcnQge0FqZlJlcGVhdGluZ1NsaWRlSW5zdGFuY2V9IGZyb20gJy4uLy4uL2ludGVyZmFjZS9zbGlkZXMtaW5zdGFuY2VzL3JlcGVhdGluZy1zbGlkZS1pbnN0YW5jZSc7XG5pbXBvcnQge0FqZlNsaWRlSW5zdGFuY2VDcmVhdGUsIGNyZWF0ZVNsaWRlSW5zdGFuY2V9IGZyb20gJy4vY3JlYXRlLXNsaWRlLWluc3RhbmNlJztcblxuZXhwb3J0IHR5cGUgQWpmUmVwZWF0aW5nU2xpZGVJbnN0YW5jZUNyZWF0ZSA9IE9taXQ8QWpmU2xpZGVJbnN0YW5jZUNyZWF0ZSwgJ25vZGUnPiZcbiAgICBQaWNrPEFqZlJlcGVhdGluZ1NsaWRlSW5zdGFuY2UsICdub2RlJz4mUGFydGlhbDxBamZSZXBlYXRpbmdTbGlkZUluc3RhbmNlPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlcGVhdGluZ1NsaWRlSW5zdGFuY2UoaW5zdGFuY2U6IEFqZlJlcGVhdGluZ1NsaWRlSW5zdGFuY2VDcmVhdGUpOlxuICAgIEFqZlJlcGVhdGluZ1NsaWRlSW5zdGFuY2Uge1xuICBjb25zdCB7bm9kZSwgLi4uc2xpZGVJbnN0YW5jZUNyZWF0ZX0gPSBpbnN0YW5jZTtcbiAgY29uc3Qge25vZGVUeXBlLCAuLi5zbGlkZU5vZGV9ID0gbm9kZTtcbiAgY29uc3Qgc2xpZGVJbnN0YW5jZSA9IGNyZWF0ZVNsaWRlSW5zdGFuY2UoXG4gICAgICB7Li4uc2xpZGVJbnN0YW5jZUNyZWF0ZSwgbm9kZToge25vZGVUeXBlOiBBamZOb2RlVHlwZS5BamZTbGlkZSwgLi4uc2xpZGVOb2RlfX0pO1xuICByZXR1cm4ge1xuICAgIC4uLnNsaWRlSW5zdGFuY2UsXG4gICAgbm9kZTogaW5zdGFuY2Uubm9kZSxcbiAgICBzbGlkZU5vZGVzOiBbXSxcbiAgICBmb3JtdWxhUmVwczogaW5zdGFuY2UuZm9ybXVsYVJlcHMsXG4gICAgZGlzYWJsZVJlbW92YWw6IGluc3RhbmNlLmRpc2FibGVSZW1vdmFsLFxuICAgIHJlcHM6IDAsXG4gICAgbm9kZXM6IFtdLFxuICAgIGZsYXROb2RlczogW10sXG4gIH07XG59XG4iXX0=