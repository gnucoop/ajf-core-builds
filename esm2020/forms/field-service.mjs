/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { componentsMap } from './utils/fields/fields-map';
export class AjfFieldService {
    constructor() {
        this.componentsMap = componentsMap;
    }
    /**
     * It allows to register custom fields inside an Ajf form.
     * @param fieldType is the field type of the custom field. Values from 0 to 100 are reserved to
     *     Ajf.
     * @param component It is the custom component that implement an AjfBaseFieldComponent.
     * @param readOnlyComponent It is the readonly custom component that implement an
     *     AjfBaseFieldComponent.
     * @createInstance The signature and return type of the method used for create Instance.
     * @isFieldWithChoice If true, the field has choices.
     */
    registerCustomField(field) {
        const { fieldType, component } = field;
        if (fieldType < 100) {
            throw new Error('Invalid custom field type, it must be greater than 100');
        }
        if (component == null) {
            throw new Error('Invalid custom field component');
        }
        this.componentsMap[fieldType] = field;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvZm9ybXMvc3JjL2ZpZWxkLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBU0gsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRXhELE1BQU0sT0FBZ0IsZUFBZTtJQUFyQztRQUNXLGtCQUFhLEdBQTBCLGFBQWEsQ0FBQztJQTRCaEUsQ0FBQztJQTFCQzs7Ozs7Ozs7O09BU0c7SUFDSCxtQkFBbUIsQ0FBQyxLQU1uQjtRQUNDLE1BQU0sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3JDLElBQUksU0FBUyxHQUFHLEdBQUcsRUFBRTtZQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLHdEQUF3RCxDQUFDLENBQUM7U0FDM0U7UUFDRCxJQUFJLFNBQVMsSUFBSSxJQUFJLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1NBQ25EO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDeEMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChDKSBHbnVjb29wIHNvYy4gY29vcC5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzXG4gKiBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSxcbiAqIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlUgQWZmZXJvXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKiBJZiBub3QsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvLlxuICpcbiAqL1xuXG5pbXBvcnQge0FqZkNvbnRleHR9IGZyb20gJ0BhamYvY29yZS9tb2RlbHMnO1xuaW1wb3J0IHtUeXBlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtBamZCYXNlRmllbGRDb21wb25lbnR9IGZyb20gJy4vYmFzZS1maWVsZCc7XG5pbXBvcnQge0FqZkZpZWxkSW5zdGFuY2V9IGZyb20gJy4vaW50ZXJmYWNlL2ZpZWxkcy1pbnN0YW5jZXMvZmllbGQtaW5zdGFuY2UnO1xuaW1wb3J0IHtBamZGaWVsZENvbXBvbmVudHNNYXB9IGZyb20gJy4vaW50ZXJmYWNlL2ZpZWxkcy9maWVsZC1jb21wb25lbnRzLW1hcCc7XG5pbXBvcnQge0FqZkZpZWxkSW5zdGFuY2VDcmVhdGV9IGZyb20gJy4vdXRpbHMvZmllbGRzLWluc3RhbmNlcy9jcmVhdGUtZmllbGQtaW5zdGFuY2UnO1xuaW1wb3J0IHtjb21wb25lbnRzTWFwfSBmcm9tICcuL3V0aWxzL2ZpZWxkcy9maWVsZHMtbWFwJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFqZkZpZWxkU2VydmljZSB7XG4gIHJlYWRvbmx5IGNvbXBvbmVudHNNYXA6IEFqZkZpZWxkQ29tcG9uZW50c01hcCA9IGNvbXBvbmVudHNNYXA7XG5cbiAgLyoqXG4gICAqIEl0IGFsbG93cyB0byByZWdpc3RlciBjdXN0b20gZmllbGRzIGluc2lkZSBhbiBBamYgZm9ybS5cbiAgICogQHBhcmFtIGZpZWxkVHlwZSBpcyB0aGUgZmllbGQgdHlwZSBvZiB0aGUgY3VzdG9tIGZpZWxkLiBWYWx1ZXMgZnJvbSAwIHRvIDEwMCBhcmUgcmVzZXJ2ZWQgdG9cbiAgICogICAgIEFqZi5cbiAgICogQHBhcmFtIGNvbXBvbmVudCBJdCBpcyB0aGUgY3VzdG9tIGNvbXBvbmVudCB0aGF0IGltcGxlbWVudCBhbiBBamZCYXNlRmllbGRDb21wb25lbnQuXG4gICAqIEBwYXJhbSByZWFkT25seUNvbXBvbmVudCBJdCBpcyB0aGUgcmVhZG9ubHkgY3VzdG9tIGNvbXBvbmVudCB0aGF0IGltcGxlbWVudCBhblxuICAgKiAgICAgQWpmQmFzZUZpZWxkQ29tcG9uZW50LlxuICAgKiBAY3JlYXRlSW5zdGFuY2UgVGhlIHNpZ25hdHVyZSBhbmQgcmV0dXJuIHR5cGUgb2YgdGhlIG1ldGhvZCB1c2VkIGZvciBjcmVhdGUgSW5zdGFuY2UuXG4gICAqIEBpc0ZpZWxkV2l0aENob2ljZSBJZiB0cnVlLCB0aGUgZmllbGQgaGFzIGNob2ljZXMuXG4gICAqL1xuICByZWdpc3RlckN1c3RvbUZpZWxkKGZpZWxkOiB7XG4gICAgZmllbGRUeXBlOiBudW1iZXI7XG4gICAgY29tcG9uZW50OiBUeXBlPEFqZkJhc2VGaWVsZENvbXBvbmVudD47XG4gICAgcmVhZE9ubHlDb21wb25lbnQ/OiBUeXBlPEFqZkJhc2VGaWVsZENvbXBvbmVudD47XG4gICAgY3JlYXRlSW5zdGFuY2U/OiAoaW5zdGFuY2U6IEFqZkZpZWxkSW5zdGFuY2VDcmVhdGUsIGNvbnRleHQ6IEFqZkNvbnRleHQpID0+IEFqZkZpZWxkSW5zdGFuY2U7XG4gICAgaXNGaWVsZFdpdGhDaG9pY2U/OiBib29sZWFuO1xuICB9KTogdm9pZCB7XG4gICAgY29uc3Qge2ZpZWxkVHlwZSwgY29tcG9uZW50fSA9IGZpZWxkO1xuICAgIGlmIChmaWVsZFR5cGUgPCAxMDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjdXN0b20gZmllbGQgdHlwZSwgaXQgbXVzdCBiZSBncmVhdGVyIHRoYW4gMTAwJyk7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnQgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGN1c3RvbSBmaWVsZCBjb21wb25lbnQnKTtcbiAgICB9XG4gICAgdGhpcy5jb21wb25lbnRzTWFwW2ZpZWxkVHlwZV0gPSBmaWVsZDtcbiAgfVxufVxuIl19