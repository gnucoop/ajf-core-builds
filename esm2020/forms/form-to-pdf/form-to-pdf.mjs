/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { evaluateExpression } from '@ajf/core/models';
import { createPdf, } from '@ajf/core/pdfmake';
import { AjfFieldType } from '../interface/fields/field-type';
import { AjfNodeType } from '../interface/nodes/node-type';
export function createFormPdf(form, translate, orientation, header, context) {
    const t = translate ? translate : (s) => s;
    const pdfDef = formToPdf(form, t, orientation, header, context);
    return createPdf(pdfDef);
}
function stripHTML(s) {
    return s.replace(/<\/?[^>]+(>|$)/g, '');
}
// Given a context, lookupStringFunction returns a function that allows to retrieve
// the field values from the context. The values are returned as print-friendly strings.
// rep is the index of the repeating slide, if the field belongs to one.
function lookupStringFunction(context, rep) {
    if (context == null) {
        return (_) => ' ';
    }
    return (name) => {
        if (name == null) {
            return ' ';
        }
        if (rep != null) {
            name = name + '__' + rep;
        }
        const val = context[name];
        if (val == null) {
            return ' ';
        }
        if (val === true) {
            return 'yes';
        }
        if (val === false) {
            return 'no';
        }
        return String(val);
    };
}
// Analogous to lookupStringFunction, but for multiple-choice questions,
// returning an array of values.
function lookupArrayFunction(context, rep) {
    if (context == null) {
        return (_) => [];
    }
    return (name) => {
        if (name == null) {
            return [];
        }
        if (rep != null) {
            name = name + '__' + rep;
        }
        const val = context[name];
        if (Array.isArray(val)) {
            return val;
        }
        return [];
    };
}
// Given an AjfForm, returns its pdfmake pdf document definition.
function formToPdf(form, translate, orientation, header, context) {
    const choicesMap = {};
    for (const o of form.choicesOrigins) {
        choicesMap[o.name] = o.choices;
    }
    const content = header ? [...header] : [];
    for (const slide of form.nodes) {
        if (slide.nodeType === AjfNodeType.AjfSlide) {
            content.push(...slideToPdf(slide, choicesMap, translate, context));
        }
        else if (slide.nodeType === AjfNodeType.AjfRepeatingSlide) {
            content.push(...repeatingSlideToPdf(slide, choicesMap, translate, context));
        }
    }
    return { content, pageOrientation: orientation };
}
function slideToPdf(slide, choicesMap, translate, context, rep) {
    let label = translate(slide.label);
    if (rep != null) {
        label = `${label} (${translate('repeat')} ${rep})`;
    }
    const content = [{ text: label, fontSize: 18, bold: true, margin: [0, 15, 0, 10] }];
    for (const field of slide.nodes) {
        content.push(...fieldToPdf(field, choicesMap, translate, context, rep));
    }
    return content;
}
function repeatingSlideToPdf(slide, choicesMap, translate, context) {
    let repeats = 3; // default, if no formData
    const maxRepeats = 20;
    if (context != null && slide.name != null) {
        const r = context[slide.name];
        if (typeof r === 'number') {
            repeats = Math.min(r, maxRepeats);
        }
    }
    const content = [];
    for (let r = 0; r < repeats; r++) {
        content.push(...slideToPdf(slide, choicesMap, translate, context, r));
    }
    return content;
}
function borderlessCell(text, bold) {
    return { table: { body: [[{ text, bold, border: [false, false, false, false] }]] } };
}
function fieldToPdf(field, choicesMap, translate, context, rep) {
    if (field.nodeType !== AjfNodeType.AjfField) {
        throw new Error('not a field');
    }
    const visible = context == null /* form not compiled, show all fields */ ||
        field.visibility == null ||
        evaluateExpression(field.visibility.condition, context);
    if (!visible) {
        return [];
    }
    const lookupString = lookupStringFunction(context, rep);
    switch (field.fieldType) {
        case AjfFieldType.String:
        case AjfFieldType.Text:
            return [
                borderlessCell(translate(field.label)),
                { table: { widths: ['*'], body: [[lookupString(field.name)]] }, margin: [5, 0, 0, 5] },
            ];
        case AjfFieldType.Formula:
            const formulaField = field;
            let value = lookupString(formulaField.name);
            if (value === ' ') {
                // If the value of the field is not in the context, recompute the formula.
                const formula = formulaField.formula;
                value = String(evaluateExpression(formula.formula, context));
            }
            return [
                borderlessCell(translate(field.label)),
                { table: { widths: ['*'], body: [[value]] }, margin: [5, 0, 0, 5] },
            ];
        case AjfFieldType.Number:
        case AjfFieldType.Boolean:
        case AjfFieldType.DateInput:
        case AjfFieldType.Time:
            let val = lookupString(field.name);
            // for boolean fields in compiled forms, a null value is printed as 'no':
            if (field.fieldType === AjfFieldType.Boolean && context != null && val === ' ') {
                val = 'no';
            }
            return [
                {
                    table: {
                        widths: ['*', '*'],
                        body: [[{ text: translate(field.label), border: [false, false, false, false] }, val]],
                    },
                },
            ];
        case AjfFieldType.SingleChoice:
        case AjfFieldType.MultipleChoice:
            const choices = choicesMap[field.choicesOriginRef];
            if (context == null) {
                // empty form
                return choiceToPdf(field, choices, translate);
            }
            // compiled form, only print choices that are selected
            const selectedValues = field.fieldType === AjfFieldType.SingleChoice
                ? [lookupString(field.name)]
                : lookupArrayFunction(context, rep)(field.name);
            let selectedChoices = selectedValues
                .map(v => choices.find(c => c.value === v))
                .filter(c => c);
            if (selectedChoices.length === 0) {
                selectedChoices = selectedValues.map(v => ({
                    label: v,
                    value: v,
                }));
            }
            return choiceToPdf(field, selectedChoices, translate, context);
        case AjfFieldType.Empty:
            const text = stripHTML(translate(field.HTML));
            return [borderlessCell(text, true)];
        case AjfFieldType.Table:
            return tableToPdf(field, lookupString, translate);
        default:
            // yet unsupported field type
            return [];
    }
}
function choiceToPdf(field, choices, translate, context) {
    let choiceLabels;
    if (choices == null || choices.length === 0) {
        choiceLabels = [' '];
    }
    else {
        choiceLabels = choices.map(c => c.label);
    }
    const body = [];
    for (const c of choiceLabels) {
        body.push([translate(c)]);
    }
    let question = translate(field.label);
    // If the form is empty (to be compiled),
    // help the user distinguish between single- and multiple-choice questions:
    if (context == null && field.fieldType === AjfFieldType.SingleChoice) {
        question += ` (${translate('single choice')})`;
    }
    if (context == null && field.fieldType === AjfFieldType.MultipleChoice) {
        question += ` (${translate('multipe choice')})`;
    }
    return [
        {
            columns: [
                borderlessCell(question),
                {
                    table: { widths: ['*'], body },
                },
            ],
            margin: [0, 0, 0, 5],
        },
    ];
}
function tableToPdf(table, lookupString, translate) {
    const body = [['', ...table.columnLabels.map(translate)]];
    for (let i = 0; i < table.rows.length; i++) {
        const row = [...table.rows[i]];
        for (let j = 0; j < row.length; j++) {
            if (typeof row[j] !== 'string') {
                row[j] = row[j].formula;
            }
        }
        const valsRow = row.map(lookupString).map(translate);
        body.push([translate(table.rowLabels[i]), ...valsRow]);
    }
    return [
        borderlessCell(translate(table.label)),
        { table: { body, widths: Array(table.columnLabels.length + 1).fill('*') }, margin: [5, 0, 0, 5] },
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS10by1wZGYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2Zvcm1zL3NyYy9mb3JtLXRvLXBkZi9mb3JtLXRvLXBkZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFFSCxPQUFPLEVBQXlCLGtCQUFrQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDNUUsT0FBTyxFQUNMLFNBQVMsR0FLVixNQUFNLG1CQUFtQixDQUFDO0FBSzNCLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUk1RCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFJekQsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsSUFBYSxFQUNiLFNBQWlDLEVBQ2pDLFdBQTZCLEVBQzdCLE1BQWtCLEVBQ2xCLE9BQW9CO0lBRXBCLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEUsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQU9ELFNBQVMsU0FBUyxDQUFDLENBQVM7SUFDMUIsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFFRCxtRkFBbUY7QUFDbkYsd0ZBQXdGO0FBQ3hGLHdFQUF3RTtBQUN4RSxTQUFTLG9CQUFvQixDQUFDLE9BQW9CLEVBQUUsR0FBWTtJQUM5RCxJQUFJLE9BQU8sSUFBSSxJQUFJLEVBQUU7UUFDbkIsT0FBTyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0tBQzNCO0lBQ0QsT0FBTyxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ3RCLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtZQUNoQixPQUFPLEdBQUcsQ0FBQztTQUNaO1FBQ0QsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFO1lBQ2YsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO1NBQzFCO1FBQ0QsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtZQUNmLE9BQU8sR0FBRyxDQUFDO1NBQ1o7UUFDRCxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7WUFDaEIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELElBQUksR0FBRyxLQUFLLEtBQUssRUFBRTtZQUNqQixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELHdFQUF3RTtBQUN4RSxnQ0FBZ0M7QUFDaEMsU0FBUyxtQkFBbUIsQ0FBQyxPQUFvQixFQUFFLEdBQVk7SUFDN0QsSUFBSSxPQUFPLElBQUksSUFBSSxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUMxQjtJQUNELE9BQU8sQ0FBQyxJQUFZLEVBQUUsRUFBRTtRQUN0QixJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDaEIsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtZQUNmLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztTQUMxQjtRQUNELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxHQUFHLENBQUM7U0FDWjtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELGlFQUFpRTtBQUNqRSxTQUFTLFNBQVMsQ0FDaEIsSUFBYSxFQUNiLFNBQWdDLEVBQ2hDLFdBQTZCLEVBQzdCLE1BQWtCLEVBQ2xCLE9BQW9CO0lBRXBCLE1BQU0sVUFBVSxHQUFlLEVBQUUsQ0FBQztJQUNsQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7UUFDbkMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO0tBQ2hDO0lBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMxQyxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDOUIsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLFdBQVcsQ0FBQyxRQUFRLEVBQUU7WUFDM0MsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFpQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNoRjthQUFNLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxXQUFXLENBQUMsaUJBQWlCLEVBQUU7WUFDM0QsT0FBTyxDQUFDLElBQUksQ0FDVixHQUFHLG1CQUFtQixDQUFDLEtBQTBCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FDbkYsQ0FBQztTQUNIO0tBQ0Y7SUFDRCxPQUFPLEVBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQ2pCLEtBQW1DLEVBQ25DLFVBQXNCLEVBQ3RCLFNBQWdDLEVBQ2hDLE9BQW9CLEVBQ3BCLEdBQVk7SUFFWixJQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtRQUNmLEtBQUssR0FBRyxHQUFHLEtBQUssS0FBSyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7S0FDcEQ7SUFDRCxNQUFNLE9BQU8sR0FBYyxDQUFDLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQzdGLEtBQUssTUFBTSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQW1CLEVBQUU7UUFDN0MsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUN6RTtJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUMxQixLQUF3QixFQUN4QixVQUFzQixFQUN0QixTQUFnQyxFQUNoQyxPQUFvQjtJQUVwQixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQywwQkFBMEI7SUFDM0MsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLElBQUksT0FBTyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtRQUN6QyxNQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQ3pCLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNuQztLQUNGO0lBRUQsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ25CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDaEMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN2RTtJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxJQUFZLEVBQUUsSUFBYztJQUNsRCxPQUFPLEVBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDO0FBQ2pGLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FDakIsS0FBZSxFQUNmLFVBQXNCLEVBQ3RCLFNBQWdDLEVBQ2hDLE9BQW9CLEVBQ3BCLEdBQVk7SUFFWixJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssV0FBVyxDQUFDLFFBQVEsRUFBRTtRQUMzQyxNQUFNLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ2hDO0lBRUQsTUFBTSxPQUFPLEdBQ1gsT0FBTyxJQUFJLElBQUksQ0FBQyx3Q0FBd0M7UUFDeEQsS0FBSyxDQUFDLFVBQVUsSUFBSSxJQUFJO1FBQ3hCLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFELElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsTUFBTSxZQUFZLEdBQUcsb0JBQW9CLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXhELFFBQVEsS0FBSyxDQUFDLFNBQVMsRUFBRTtRQUN2QixLQUFLLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDekIsS0FBSyxZQUFZLENBQUMsSUFBSTtZQUNwQixPQUFPO2dCQUNMLGNBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN0QyxFQUFDLEtBQUssRUFBRSxFQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQzthQUNuRixDQUFDO1FBQ0osS0FBSyxZQUFZLENBQUMsT0FBTztZQUN2QixNQUFNLFlBQVksR0FBRyxLQUF3QixDQUFDO1lBQzlDLElBQUksS0FBSyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUMsSUFBSSxLQUFLLEtBQUssR0FBRyxFQUFFO2dCQUNqQiwwRUFBMEU7Z0JBQzFFLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFxQixDQUFDO2dCQUNuRCxLQUFLLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUM5RDtZQUNELE9BQU87Z0JBQ0wsY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3RDLEVBQUMsS0FBSyxFQUFFLEVBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUM7YUFDaEUsQ0FBQztRQUNKLEtBQUssWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUN6QixLQUFLLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFDMUIsS0FBSyxZQUFZLENBQUMsU0FBUyxDQUFDO1FBQzVCLEtBQUssWUFBWSxDQUFDLElBQUk7WUFDcEIsSUFBSSxHQUFHLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuQyx5RUFBeUU7WUFDekUsSUFBSSxLQUFLLENBQUMsU0FBUyxLQUFLLFlBQVksQ0FBQyxPQUFPLElBQUksT0FBTyxJQUFJLElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxFQUFFO2dCQUM5RSxHQUFHLEdBQUcsSUFBSSxDQUFDO2FBQ1o7WUFDRCxPQUFPO2dCQUNMO29CQUNFLEtBQUssRUFBRTt3QkFDTCxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO3dCQUNsQixJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztxQkFDcEY7aUJBQ0Y7YUFDRixDQUFDO1FBQ0osS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDO1FBQy9CLEtBQUssWUFBWSxDQUFDLGNBQWM7WUFDOUIsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFFLEtBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzVELElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtnQkFDbkIsYUFBYTtnQkFDYixPQUFPLFdBQVcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQy9DO1lBQ0Qsc0RBQXNEO1lBQ3RELE1BQU0sY0FBYyxHQUNsQixLQUFLLENBQUMsU0FBUyxLQUFLLFlBQVksQ0FBQyxZQUFZO2dCQUMzQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM1QixDQUFDLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwRCxJQUFJLGVBQWUsR0FBRyxjQUFjO2lCQUNqQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztpQkFDMUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFxQixDQUFDO1lBQ3RDLElBQUksZUFBZSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ2hDLGVBQWUsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUNsQyxDQUFDLENBQUMsRUFBRSxDQUNGLENBQUM7b0JBQ0MsS0FBSyxFQUFFLENBQUM7b0JBQ1IsS0FBSyxFQUFFLENBQUM7aUJBQ2EsQ0FBQSxDQUMxQixDQUFDO2FBQ0g7WUFDRCxPQUFPLFdBQVcsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNqRSxLQUFLLFlBQVksQ0FBQyxLQUFLO1lBQ3JCLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUUsS0FBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDdEMsS0FBSyxZQUFZLENBQUMsS0FBSztZQUNyQixPQUFPLFVBQVUsQ0FBQyxLQUFzQixFQUFFLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNyRTtZQUNFLDZCQUE2QjtZQUM3QixPQUFPLEVBQUUsQ0FBQztLQUNiO0FBQ0gsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUNsQixLQUFlLEVBQ2YsT0FBeUIsRUFDekIsU0FBZ0MsRUFDaEMsT0FBb0I7SUFFcEIsSUFBSSxZQUFzQixDQUFDO0lBQzNCLElBQUksT0FBTyxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUMzQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN0QjtTQUFNO1FBQ0wsWUFBWSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDMUM7SUFDRCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUM7SUFDaEIsS0FBSyxNQUFNLENBQUMsSUFBSSxZQUFZLEVBQUU7UUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDM0I7SUFDRCxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLHlDQUF5QztJQUN6QywyRUFBMkU7SUFDM0UsSUFBSSxPQUFPLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssWUFBWSxDQUFDLFlBQVksRUFBRTtRQUNwRSxRQUFRLElBQUksS0FBSyxTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQztLQUNoRDtJQUNELElBQUksT0FBTyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsU0FBUyxLQUFLLFlBQVksQ0FBQyxjQUFjLEVBQUU7UUFDdEUsUUFBUSxJQUFJLEtBQUssU0FBUyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQztLQUNqRDtJQUNELE9BQU87UUFDTDtZQUNFLE9BQU8sRUFBRTtnQkFDUCxjQUFjLENBQUMsUUFBUSxDQUFDO2dCQUN4QjtvQkFDRSxLQUFLLEVBQUUsRUFBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUM7aUJBQzdCO2FBQ0Y7WUFDRCxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDckI7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsVUFBVSxDQUNqQixLQUFvQixFQUNwQixZQUFtQyxFQUNuQyxTQUFnQztJQUVoQyxNQUFNLElBQUksR0FBZSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMxQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUM5QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUksR0FBRyxDQUFDLENBQUMsQ0FBa0IsQ0FBQyxPQUFPLENBQUM7YUFDM0M7U0FDRjtRQUNELE1BQU0sT0FBTyxHQUFJLEdBQWdCLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDeEQ7SUFDRCxPQUFPO1FBQ0wsY0FBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsRUFBQyxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQztLQUM5RixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZDb250ZXh0LCBBamZGb3JtdWxhLCBldmFsdWF0ZUV4cHJlc3Npb259IGZyb20gJ0BhamYvY29yZS9tb2RlbHMnO1xuaW1wb3J0IHtcbiAgY3JlYXRlUGRmLFxuICBDb250ZW50LFxuICBQYWdlT3JpZW50YXRpb24sXG4gIFRDcmVhdGVkUGRmLFxuICBURG9jdW1lbnREZWZpbml0aW9ucyxcbn0gZnJvbSAnQGFqZi9jb3JlL3BkZm1ha2UnO1xuXG5pbXBvcnQge0FqZkNob2ljZX0gZnJvbSAnLi4vaW50ZXJmYWNlL2Nob2ljZXMvY2hvaWNlJztcbmltcG9ydCB7QWpmRW1wdHlGaWVsZH0gZnJvbSAnLi4vaW50ZXJmYWNlL2ZpZWxkcy9lbXB0eS1maWVsZCc7XG5pbXBvcnQge0FqZkZpZWxkfSBmcm9tICcuLi9pbnRlcmZhY2UvZmllbGRzL2ZpZWxkJztcbmltcG9ydCB7QWpmRmllbGRUeXBlfSBmcm9tICcuLi9pbnRlcmZhY2UvZmllbGRzL2ZpZWxkLXR5cGUnO1xuaW1wb3J0IHtBamZGb3JtdWxhRmllbGR9IGZyb20gJy4uL2ludGVyZmFjZS9maWVsZHMvZm9ybXVsYS1maWVsZCc7XG5pbXBvcnQge0FqZlRhYmxlQ2VsbCwgQWpmVGFibGVGaWVsZH0gZnJvbSAnLi4vaW50ZXJmYWNlL2ZpZWxkcy90YWJsZS1maWVsZCc7XG5pbXBvcnQge0FqZkZvcm19IGZyb20gJy4uL2ludGVyZmFjZS9mb3Jtcy9mb3JtJztcbmltcG9ydCB7QWpmTm9kZVR5cGV9IGZyb20gJy4uL2ludGVyZmFjZS9ub2Rlcy9ub2RlLXR5cGUnO1xuaW1wb3J0IHtBamZSZXBlYXRpbmdTbGlkZX0gZnJvbSAnLi4vaW50ZXJmYWNlL3NsaWRlcy9yZXBlYXRpbmctc2xpZGUnO1xuaW1wb3J0IHtBamZTbGlkZX0gZnJvbSAnLi4vaW50ZXJmYWNlL3NsaWRlcy9zbGlkZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGb3JtUGRmKFxuICBmb3JtOiBBamZGb3JtLFxuICB0cmFuc2xhdGU/OiAoczogc3RyaW5nKSA9PiBzdHJpbmcsXG4gIG9yaWVudGF0aW9uPzogUGFnZU9yaWVudGF0aW9uLFxuICBoZWFkZXI/OiBDb250ZW50W10sXG4gIGNvbnRleHQ/OiBBamZDb250ZXh0LFxuKTogVENyZWF0ZWRQZGYge1xuICBjb25zdCB0ID0gdHJhbnNsYXRlID8gdHJhbnNsYXRlIDogKHM6IHN0cmluZykgPT4gcztcbiAgY29uc3QgcGRmRGVmID0gZm9ybVRvUGRmKGZvcm0sIHQsIG9yaWVudGF0aW9uLCBoZWFkZXIsIGNvbnRleHQpO1xuICByZXR1cm4gY3JlYXRlUGRmKHBkZkRlZik7XG59XG5cbi8vIENob2ljZXNNYXAgbWFwcyBhIGNob2ljZXNPcmlnaW5SZWYgdG8gdGhlIGxpc3QgdGhlIGNob2ljZXMuXG5pbnRlcmZhY2UgQ2hvaWNlc01hcCB7XG4gIFtuYW1lOiBzdHJpbmddOiBBamZDaG9pY2U8YW55PltdO1xufVxuXG5mdW5jdGlvbiBzdHJpcEhUTUwoczogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHMucmVwbGFjZSgvPFxcLz9bXj5dKyg+fCQpL2csICcnKTtcbn1cblxuLy8gR2l2ZW4gYSBjb250ZXh0LCBsb29rdXBTdHJpbmdGdW5jdGlvbiByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhbGxvd3MgdG8gcmV0cmlldmVcbi8vIHRoZSBmaWVsZCB2YWx1ZXMgZnJvbSB0aGUgY29udGV4dC4gVGhlIHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcHJpbnQtZnJpZW5kbHkgc3RyaW5ncy5cbi8vIHJlcCBpcyB0aGUgaW5kZXggb2YgdGhlIHJlcGVhdGluZyBzbGlkZSwgaWYgdGhlIGZpZWxkIGJlbG9uZ3MgdG8gb25lLlxuZnVuY3Rpb24gbG9va3VwU3RyaW5nRnVuY3Rpb24oY29udGV4dD86IEFqZkNvbnRleHQsIHJlcD86IG51bWJlcik6IChuYW1lOiBzdHJpbmcpID0+IHN0cmluZyB7XG4gIGlmIChjb250ZXh0ID09IG51bGwpIHtcbiAgICByZXR1cm4gKF86IHN0cmluZykgPT4gJyAnO1xuICB9XG4gIHJldHVybiAobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcgJztcbiAgICB9XG4gICAgaWYgKHJlcCAhPSBudWxsKSB7XG4gICAgICBuYW1lID0gbmFtZSArICdfXycgKyByZXA7XG4gICAgfVxuICAgIGNvbnN0IHZhbCA9IGNvbnRleHRbbmFtZV07XG4gICAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyAnO1xuICAgIH1cbiAgICBpZiAodmFsID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gJ3llcyc7XG4gICAgfVxuICAgIGlmICh2YWwgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gJ25vJztcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyh2YWwpO1xuICB9O1xufVxuXG4vLyBBbmFsb2dvdXMgdG8gbG9va3VwU3RyaW5nRnVuY3Rpb24sIGJ1dCBmb3IgbXVsdGlwbGUtY2hvaWNlIHF1ZXN0aW9ucyxcbi8vIHJldHVybmluZyBhbiBhcnJheSBvZiB2YWx1ZXMuXG5mdW5jdGlvbiBsb29rdXBBcnJheUZ1bmN0aW9uKGNvbnRleHQ/OiBBamZDb250ZXh0LCByZXA/OiBudW1iZXIpOiAobmFtZTogc3RyaW5nKSA9PiBzdHJpbmdbXSB7XG4gIGlmIChjb250ZXh0ID09IG51bGwpIHtcbiAgICByZXR1cm4gKF86IHN0cmluZykgPT4gW107XG4gIH1cbiAgcmV0dXJuIChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmIChyZXAgIT0gbnVsbCkge1xuICAgICAgbmFtZSA9IG5hbWUgKyAnX18nICsgcmVwO1xuICAgIH1cbiAgICBjb25zdCB2YWwgPSBjb250ZXh0W25hbWVdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfTtcbn1cblxuLy8gR2l2ZW4gYW4gQWpmRm9ybSwgcmV0dXJucyBpdHMgcGRmbWFrZSBwZGYgZG9jdW1lbnQgZGVmaW5pdGlvbi5cbmZ1bmN0aW9uIGZvcm1Ub1BkZihcbiAgZm9ybTogQWpmRm9ybSxcbiAgdHJhbnNsYXRlOiAoczogc3RyaW5nKSA9PiBzdHJpbmcsXG4gIG9yaWVudGF0aW9uPzogUGFnZU9yaWVudGF0aW9uLFxuICBoZWFkZXI/OiBDb250ZW50W10sXG4gIGNvbnRleHQ/OiBBamZDb250ZXh0LFxuKTogVERvY3VtZW50RGVmaW5pdGlvbnMge1xuICBjb25zdCBjaG9pY2VzTWFwOiBDaG9pY2VzTWFwID0ge307XG4gIGZvciAoY29uc3QgbyBvZiBmb3JtLmNob2ljZXNPcmlnaW5zKSB7XG4gICAgY2hvaWNlc01hcFtvLm5hbWVdID0gby5jaG9pY2VzO1xuICB9XG5cbiAgY29uc3QgY29udGVudCA9IGhlYWRlciA/IFsuLi5oZWFkZXJdIDogW107XG4gIGZvciAoY29uc3Qgc2xpZGUgb2YgZm9ybS5ub2Rlcykge1xuICAgIGlmIChzbGlkZS5ub2RlVHlwZSA9PT0gQWpmTm9kZVR5cGUuQWpmU2xpZGUpIHtcbiAgICAgIGNvbnRlbnQucHVzaCguLi5zbGlkZVRvUGRmKHNsaWRlIGFzIEFqZlNsaWRlLCBjaG9pY2VzTWFwLCB0cmFuc2xhdGUsIGNvbnRleHQpKTtcbiAgICB9IGVsc2UgaWYgKHNsaWRlLm5vZGVUeXBlID09PSBBamZOb2RlVHlwZS5BamZSZXBlYXRpbmdTbGlkZSkge1xuICAgICAgY29udGVudC5wdXNoKFxuICAgICAgICAuLi5yZXBlYXRpbmdTbGlkZVRvUGRmKHNsaWRlIGFzIEFqZlJlcGVhdGluZ1NsaWRlLCBjaG9pY2VzTWFwLCB0cmFuc2xhdGUsIGNvbnRleHQpLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtjb250ZW50LCBwYWdlT3JpZW50YXRpb246IG9yaWVudGF0aW9ufTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb1BkZihcbiAgc2xpZGU6IEFqZlNsaWRlIHwgQWpmUmVwZWF0aW5nU2xpZGUsXG4gIGNob2ljZXNNYXA6IENob2ljZXNNYXAsXG4gIHRyYW5zbGF0ZTogKHM6IHN0cmluZykgPT4gc3RyaW5nLFxuICBjb250ZXh0PzogQWpmQ29udGV4dCxcbiAgcmVwPzogbnVtYmVyLFxuKTogQ29udGVudFtdIHtcbiAgbGV0IGxhYmVsID0gdHJhbnNsYXRlKHNsaWRlLmxhYmVsKTtcbiAgaWYgKHJlcCAhPSBudWxsKSB7XG4gICAgbGFiZWwgPSBgJHtsYWJlbH0gKCR7dHJhbnNsYXRlKCdyZXBlYXQnKX0gJHtyZXB9KWA7XG4gIH1cbiAgY29uc3QgY29udGVudDogQ29udGVudFtdID0gW3t0ZXh0OiBsYWJlbCwgZm9udFNpemU6IDE4LCBib2xkOiB0cnVlLCBtYXJnaW46IFswLCAxNSwgMCwgMTBdfV07XG4gIGZvciAoY29uc3QgZmllbGQgb2Ygc2xpZGUubm9kZXMgYXMgQWpmRmllbGRbXSkge1xuICAgIGNvbnRlbnQucHVzaCguLi5maWVsZFRvUGRmKGZpZWxkLCBjaG9pY2VzTWFwLCB0cmFuc2xhdGUsIGNvbnRleHQsIHJlcCkpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5mdW5jdGlvbiByZXBlYXRpbmdTbGlkZVRvUGRmKFxuICBzbGlkZTogQWpmUmVwZWF0aW5nU2xpZGUsXG4gIGNob2ljZXNNYXA6IENob2ljZXNNYXAsXG4gIHRyYW5zbGF0ZTogKHM6IHN0cmluZykgPT4gc3RyaW5nLFxuICBjb250ZXh0PzogQWpmQ29udGV4dCxcbik6IENvbnRlbnRbXSB7XG4gIGxldCByZXBlYXRzID0gMzsgLy8gZGVmYXVsdCwgaWYgbm8gZm9ybURhdGFcbiAgY29uc3QgbWF4UmVwZWF0cyA9IDIwO1xuICBpZiAoY29udGV4dCAhPSBudWxsICYmIHNsaWRlLm5hbWUgIT0gbnVsbCkge1xuICAgIGNvbnN0IHIgPSBjb250ZXh0W3NsaWRlLm5hbWVdO1xuICAgIGlmICh0eXBlb2YgciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJlcGVhdHMgPSBNYXRoLm1pbihyLCBtYXhSZXBlYXRzKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjb250ZW50ID0gW107XG4gIGZvciAobGV0IHIgPSAwOyByIDwgcmVwZWF0czsgcisrKSB7XG4gICAgY29udGVudC5wdXNoKC4uLnNsaWRlVG9QZGYoc2xpZGUsIGNob2ljZXNNYXAsIHRyYW5zbGF0ZSwgY29udGV4dCwgcikpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5mdW5jdGlvbiBib3JkZXJsZXNzQ2VsbCh0ZXh0OiBzdHJpbmcsIGJvbGQ/OiBib29sZWFuKTogQ29udGVudCB7XG4gIHJldHVybiB7dGFibGU6IHtib2R5OiBbW3t0ZXh0LCBib2xkLCBib3JkZXI6IFtmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZV19XV19fTtcbn1cblxuZnVuY3Rpb24gZmllbGRUb1BkZihcbiAgZmllbGQ6IEFqZkZpZWxkLFxuICBjaG9pY2VzTWFwOiBDaG9pY2VzTWFwLFxuICB0cmFuc2xhdGU6IChzOiBzdHJpbmcpID0+IHN0cmluZyxcbiAgY29udGV4dD86IEFqZkNvbnRleHQsXG4gIHJlcD86IG51bWJlcixcbik6IENvbnRlbnRbXSB7XG4gIGlmIChmaWVsZC5ub2RlVHlwZSAhPT0gQWpmTm9kZVR5cGUuQWpmRmllbGQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBhIGZpZWxkJyk7XG4gIH1cblxuICBjb25zdCB2aXNpYmxlID1cbiAgICBjb250ZXh0ID09IG51bGwgLyogZm9ybSBub3QgY29tcGlsZWQsIHNob3cgYWxsIGZpZWxkcyAqLyB8fFxuICAgIGZpZWxkLnZpc2liaWxpdHkgPT0gbnVsbCB8fFxuICAgIGV2YWx1YXRlRXhwcmVzc2lvbihmaWVsZC52aXNpYmlsaXR5LmNvbmRpdGlvbiwgY29udGV4dCk7XG4gIGlmICghdmlzaWJsZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IGxvb2t1cFN0cmluZyA9IGxvb2t1cFN0cmluZ0Z1bmN0aW9uKGNvbnRleHQsIHJlcCk7XG5cbiAgc3dpdGNoIChmaWVsZC5maWVsZFR5cGUpIHtcbiAgICBjYXNlIEFqZkZpZWxkVHlwZS5TdHJpbmc6XG4gICAgY2FzZSBBamZGaWVsZFR5cGUuVGV4dDpcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGJvcmRlcmxlc3NDZWxsKHRyYW5zbGF0ZShmaWVsZC5sYWJlbCkpLFxuICAgICAgICB7dGFibGU6IHt3aWR0aHM6IFsnKiddLCBib2R5OiBbW2xvb2t1cFN0cmluZyhmaWVsZC5uYW1lKV1dfSwgbWFyZ2luOiBbNSwgMCwgMCwgNV19LFxuICAgICAgXTtcbiAgICBjYXNlIEFqZkZpZWxkVHlwZS5Gb3JtdWxhOlxuICAgICAgY29uc3QgZm9ybXVsYUZpZWxkID0gZmllbGQgYXMgQWpmRm9ybXVsYUZpZWxkO1xuICAgICAgbGV0IHZhbHVlID0gbG9va3VwU3RyaW5nKGZvcm11bGFGaWVsZC5uYW1lKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJyAnKSB7XG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgaXMgbm90IGluIHRoZSBjb250ZXh0LCByZWNvbXB1dGUgdGhlIGZvcm11bGEuXG4gICAgICAgIGNvbnN0IGZvcm11bGEgPSBmb3JtdWxhRmllbGQuZm9ybXVsYSBhcyBBamZGb3JtdWxhO1xuICAgICAgICB2YWx1ZSA9IFN0cmluZyhldmFsdWF0ZUV4cHJlc3Npb24oZm9ybXVsYS5mb3JtdWxhLCBjb250ZXh0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gW1xuICAgICAgICBib3JkZXJsZXNzQ2VsbCh0cmFuc2xhdGUoZmllbGQubGFiZWwpKSxcbiAgICAgICAge3RhYmxlOiB7d2lkdGhzOiBbJyonXSwgYm9keTogW1t2YWx1ZV1dfSwgbWFyZ2luOiBbNSwgMCwgMCwgNV19LFxuICAgICAgXTtcbiAgICBjYXNlIEFqZkZpZWxkVHlwZS5OdW1iZXI6XG4gICAgY2FzZSBBamZGaWVsZFR5cGUuQm9vbGVhbjpcbiAgICBjYXNlIEFqZkZpZWxkVHlwZS5EYXRlSW5wdXQ6XG4gICAgY2FzZSBBamZGaWVsZFR5cGUuVGltZTpcbiAgICAgIGxldCB2YWwgPSBsb29rdXBTdHJpbmcoZmllbGQubmFtZSk7XG4gICAgICAvLyBmb3IgYm9vbGVhbiBmaWVsZHMgaW4gY29tcGlsZWQgZm9ybXMsIGEgbnVsbCB2YWx1ZSBpcyBwcmludGVkIGFzICdubyc6XG4gICAgICBpZiAoZmllbGQuZmllbGRUeXBlID09PSBBamZGaWVsZFR5cGUuQm9vbGVhbiAmJiBjb250ZXh0ICE9IG51bGwgJiYgdmFsID09PSAnICcpIHtcbiAgICAgICAgdmFsID0gJ25vJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0YWJsZToge1xuICAgICAgICAgICAgd2lkdGhzOiBbJyonLCAnKiddLFxuICAgICAgICAgICAgYm9keTogW1t7dGV4dDogdHJhbnNsYXRlKGZpZWxkLmxhYmVsKSwgYm9yZGVyOiBbZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdfSwgdmFsXV0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF07XG4gICAgY2FzZSBBamZGaWVsZFR5cGUuU2luZ2xlQ2hvaWNlOlxuICAgIGNhc2UgQWpmRmllbGRUeXBlLk11bHRpcGxlQ2hvaWNlOlxuICAgICAgY29uc3QgY2hvaWNlcyA9IGNob2ljZXNNYXBbKGZpZWxkIGFzIGFueSkuY2hvaWNlc09yaWdpblJlZl07XG4gICAgICBpZiAoY29udGV4dCA9PSBudWxsKSB7XG4gICAgICAgIC8vIGVtcHR5IGZvcm1cbiAgICAgICAgcmV0dXJuIGNob2ljZVRvUGRmKGZpZWxkLCBjaG9pY2VzLCB0cmFuc2xhdGUpO1xuICAgICAgfVxuICAgICAgLy8gY29tcGlsZWQgZm9ybSwgb25seSBwcmludCBjaG9pY2VzIHRoYXQgYXJlIHNlbGVjdGVkXG4gICAgICBjb25zdCBzZWxlY3RlZFZhbHVlcyA9XG4gICAgICAgIGZpZWxkLmZpZWxkVHlwZSA9PT0gQWpmRmllbGRUeXBlLlNpbmdsZUNob2ljZVxuICAgICAgICAgID8gW2xvb2t1cFN0cmluZyhmaWVsZC5uYW1lKV1cbiAgICAgICAgICA6IGxvb2t1cEFycmF5RnVuY3Rpb24oY29udGV4dCwgcmVwKShmaWVsZC5uYW1lKTtcbiAgICAgIGxldCBzZWxlY3RlZENob2ljZXMgPSBzZWxlY3RlZFZhbHVlc1xuICAgICAgICAubWFwKHYgPT4gY2hvaWNlcy5maW5kKGMgPT4gYy52YWx1ZSA9PT0gdikpXG4gICAgICAgIC5maWx0ZXIoYyA9PiBjKSBhcyBBamZDaG9pY2U8YW55PltdO1xuICAgICAgaWYgKHNlbGVjdGVkQ2hvaWNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgc2VsZWN0ZWRDaG9pY2VzID0gc2VsZWN0ZWRWYWx1ZXMubWFwKFxuICAgICAgICAgIHYgPT5cbiAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgIGxhYmVsOiB2LFxuICAgICAgICAgICAgICB2YWx1ZTogdixcbiAgICAgICAgICAgIH0gYXMgQWpmQ2hvaWNlPHN0cmluZz4pLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNob2ljZVRvUGRmKGZpZWxkLCBzZWxlY3RlZENob2ljZXMsIHRyYW5zbGF0ZSwgY29udGV4dCk7XG4gICAgY2FzZSBBamZGaWVsZFR5cGUuRW1wdHk6XG4gICAgICBjb25zdCB0ZXh0ID0gc3RyaXBIVE1MKHRyYW5zbGF0ZSgoZmllbGQgYXMgQWpmRW1wdHlGaWVsZCkuSFRNTCkpO1xuICAgICAgcmV0dXJuIFtib3JkZXJsZXNzQ2VsbCh0ZXh0LCB0cnVlKV07XG4gICAgY2FzZSBBamZGaWVsZFR5cGUuVGFibGU6XG4gICAgICByZXR1cm4gdGFibGVUb1BkZihmaWVsZCBhcyBBamZUYWJsZUZpZWxkLCBsb29rdXBTdHJpbmcsIHRyYW5zbGF0ZSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIHlldCB1bnN1cHBvcnRlZCBmaWVsZCB0eXBlXG4gICAgICByZXR1cm4gW107XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hvaWNlVG9QZGYoXG4gIGZpZWxkOiBBamZGaWVsZCxcbiAgY2hvaWNlczogQWpmQ2hvaWNlPGFueT5bXSxcbiAgdHJhbnNsYXRlOiAoczogc3RyaW5nKSA9PiBzdHJpbmcsXG4gIGNvbnRleHQ/OiBBamZDb250ZXh0LFxuKTogQ29udGVudFtdIHtcbiAgbGV0IGNob2ljZUxhYmVsczogc3RyaW5nW107XG4gIGlmIChjaG9pY2VzID09IG51bGwgfHwgY2hvaWNlcy5sZW5ndGggPT09IDApIHtcbiAgICBjaG9pY2VMYWJlbHMgPSBbJyAnXTtcbiAgfSBlbHNlIHtcbiAgICBjaG9pY2VMYWJlbHMgPSBjaG9pY2VzLm1hcChjID0+IGMubGFiZWwpO1xuICB9XG4gIGNvbnN0IGJvZHkgPSBbXTtcbiAgZm9yIChjb25zdCBjIG9mIGNob2ljZUxhYmVscykge1xuICAgIGJvZHkucHVzaChbdHJhbnNsYXRlKGMpXSk7XG4gIH1cbiAgbGV0IHF1ZXN0aW9uID0gdHJhbnNsYXRlKGZpZWxkLmxhYmVsKTtcbiAgLy8gSWYgdGhlIGZvcm0gaXMgZW1wdHkgKHRvIGJlIGNvbXBpbGVkKSxcbiAgLy8gaGVscCB0aGUgdXNlciBkaXN0aW5ndWlzaCBiZXR3ZWVuIHNpbmdsZS0gYW5kIG11bHRpcGxlLWNob2ljZSBxdWVzdGlvbnM6XG4gIGlmIChjb250ZXh0ID09IG51bGwgJiYgZmllbGQuZmllbGRUeXBlID09PSBBamZGaWVsZFR5cGUuU2luZ2xlQ2hvaWNlKSB7XG4gICAgcXVlc3Rpb24gKz0gYCAoJHt0cmFuc2xhdGUoJ3NpbmdsZSBjaG9pY2UnKX0pYDtcbiAgfVxuICBpZiAoY29udGV4dCA9PSBudWxsICYmIGZpZWxkLmZpZWxkVHlwZSA9PT0gQWpmRmllbGRUeXBlLk11bHRpcGxlQ2hvaWNlKSB7XG4gICAgcXVlc3Rpb24gKz0gYCAoJHt0cmFuc2xhdGUoJ211bHRpcGUgY2hvaWNlJyl9KWA7XG4gIH1cbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICBjb2x1bW5zOiBbXG4gICAgICAgIGJvcmRlcmxlc3NDZWxsKHF1ZXN0aW9uKSxcbiAgICAgICAge1xuICAgICAgICAgIHRhYmxlOiB7d2lkdGhzOiBbJyonXSwgYm9keX0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgbWFyZ2luOiBbMCwgMCwgMCwgNV0sXG4gICAgfSxcbiAgXTtcbn1cblxuZnVuY3Rpb24gdGFibGVUb1BkZihcbiAgdGFibGU6IEFqZlRhYmxlRmllbGQsXG4gIGxvb2t1cFN0cmluZzogKHM6IHN0cmluZykgPT4gc3RyaW5nLFxuICB0cmFuc2xhdGU6IChzOiBzdHJpbmcpID0+IHN0cmluZyxcbik6IENvbnRlbnRbXSB7XG4gIGNvbnN0IGJvZHk6IHN0cmluZ1tdW10gPSBbWycnLCAuLi50YWJsZS5jb2x1bW5MYWJlbHMubWFwKHRyYW5zbGF0ZSldXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWJsZS5yb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgcm93ID0gWy4uLnRhYmxlLnJvd3NbaV1dO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgcm93Lmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAodHlwZW9mIHJvd1tqXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcm93W2pdID0gKHJvd1tqXSBhcyBBamZUYWJsZUNlbGwpLmZvcm11bGE7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHZhbHNSb3cgPSAocm93IGFzIHN0cmluZ1tdKS5tYXAobG9va3VwU3RyaW5nKS5tYXAodHJhbnNsYXRlKTtcbiAgICBib2R5LnB1c2goW3RyYW5zbGF0ZSh0YWJsZS5yb3dMYWJlbHNbaV0pLCAuLi52YWxzUm93XSk7XG4gIH1cbiAgcmV0dXJuIFtcbiAgICBib3JkZXJsZXNzQ2VsbCh0cmFuc2xhdGUodGFibGUubGFiZWwpKSxcbiAgICB7dGFibGU6IHtib2R5LCB3aWR0aHM6IEFycmF5KHRhYmxlLmNvbHVtbkxhYmVscy5sZW5ndGggKyAxKS5maWxsKCcqJyl9LCBtYXJnaW46IFs1LCAwLCAwLCA1XX0sXG4gIF07XG59XG4iXX0=