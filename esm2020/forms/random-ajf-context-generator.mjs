/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { deepCopy } from '@ajf/core/utils';
import { AjfFieldType } from './interface/fields/field-type';
import { AjfFormSerializer } from './serializers/form-serializer';
import { isField } from './utils/nodes/is-field';
import { isRepeatingSlide } from './utils/nodes/is-repeating-slide';
function generateRandomInstanceFields(fields) {
    const fieldReps = [];
    fields.forEach(f => {
        for (let i = 0; i < 5; i++) {
            const newReps = deepCopy(f);
            newReps.name = `${newReps.name}__${i}`;
            fieldReps.push(newReps);
        }
    });
    return fieldReps;
}
function flattenFields(slides) {
    let flatFields = [];
    slides.forEach((slide) => {
        if (isField(slide)) {
            flatFields.push(slide);
        }
        else if (isRepeatingSlide(slide)) {
            const childs = generateRandomInstanceFields(slide.nodes);
            flatFields = flatFields.concat(flattenFields(childs));
        }
        else {
            flatFields = flatFields.concat([...slide.nodes]);
        }
    });
    return flatFields;
}
export function generateRandomCtx(formSchema) {
    const ctxMap = [];
    const allFields = flattenFields(formSchema.nodes);
    const generateRandomNumberOfContext = Math.floor(Math.random() * 100) + 1;
    for (let i = 0; i < generateRandomNumberOfContext; i++) {
        const ctx = {};
        allFields.forEach(field => {
            switch (field.fieldType) {
                default:
                    ctx[field.name] = 0;
                    break;
                case AjfFieldType.Number:
                    ctx[field.name] = Math.floor(Math.random() * 1000) + 1;
                    break;
                case AjfFieldType.Boolean:
                    ctx[field.name] = Math.random() < 0.5;
                    break;
                case AjfFieldType.SingleChoice:
                    const singleChoices = field.choicesOrigin.choices.map(c => c.value);
                    ctx[field.name] = singleChoices[Math.floor(Math.random() * singleChoices.length)];
                    break;
                case AjfFieldType.MultipleChoice:
                    const multipleChoices = field.choicesOrigin.choices.map(c => c.value);
                    ctx[field.name] = [
                        multipleChoices[Math.floor(Math.random() * multipleChoices.length)],
                        multipleChoices[Math.floor(Math.random() * multipleChoices.length)],
                    ];
                    break;
                case AjfFieldType.Range:
                    const rangeField = field;
                    const end = rangeField.end ?? 10;
                    const start = rangeField.start ?? 1;
                    const value = Math.floor(start + Math.random() * (end + 1 - start));
                    ctx[field.name] = value;
            }
        });
        ctxMap.push(ctx);
    }
    return ctxMap;
}
export function buildformDatas(formSchemas) {
    const forms = {};
    Object.keys(formSchemas).forEach(nameSchema => {
        forms[nameSchema] = generateRandomCtx(AjfFormSerializer.fromJson(formSchemas[nameSchema]));
    });
    return forms;
}
//# sourceMappingURL=data:application/json;base64,