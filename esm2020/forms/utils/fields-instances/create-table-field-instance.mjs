/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { createFieldInstance } from './create-field-instance';
/**
 * to mantain retrocompatibility with old string type convert string to AjfTableCell
 * check  node.rows: (string|AjfTableCell)[][];
 * if elem of map is string convert in to AjfTableCell object
 */
function normalizeRows(node) {
    node.rows.forEach((row, rowIdx) => {
        row.forEach((elem, elemIdx) => {
            if (typeof elem === 'string') {
                node.rows[rowIdx][elemIdx] = { formula: elem, editable: node.editable };
            }
        });
    });
}
/**
 * Create an Table Fieldinstance.
 * Extends simple field instance with context,hideEmptyRows and controls.
 * If hideEmptyRows is not defined in instance set with false.
 * Assign empty array to controls
 */
export function createTableFieldInstance(instance, context) {
    normalizeRows(instance.node);
    const fieldInstance = createFieldInstance(instance, context);
    return {
        ...fieldInstance,
        node: instance.node,
        context,
        hideEmptyRows: instance.hideEmptyRows || false,
        controls: [],
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXRhYmxlLWZpZWxkLWluc3RhbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvcmUvZm9ybXMvdXRpbHMvZmllbGRzLWluc3RhbmNlcy9jcmVhdGUtdGFibGUtZmllbGQtaW5zdGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBT0gsT0FBTyxFQUF5QixtQkFBbUIsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBR3BGOzs7O0dBSUc7QUFDSCxTQUFTLGFBQWEsQ0FBQyxJQUFtQjtJQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNoQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQzVCLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO2dCQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBaUIsQ0FBQzthQUN2RjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsd0JBQXdCLENBQ3RDLFFBQXFDLEVBQ3JDLE9BQW1CO0lBRW5CLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBcUIsQ0FBQyxDQUFDO0lBQzlDLE1BQU0sYUFBYSxHQUFHLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3RCxPQUFPO1FBQ0wsR0FBRyxhQUFhO1FBQ2hCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtRQUNuQixPQUFPO1FBQ1AsYUFBYSxFQUFFLFFBQVEsQ0FBQyxhQUFhLElBQUksS0FBSztRQUM5QyxRQUFRLEVBQUUsRUFBRTtLQUNiLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChDKSBHbnVjb29wIHNvYy4gY29vcC5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzXG4gKiBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSxcbiAqIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlUgQWZmZXJvXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKiBJZiBub3QsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvLlxuICpcbiAqL1xuXG5pbXBvcnQge0FqZkNvbnRleHR9IGZyb20gJ0BhamYvY29yZS9tb2RlbHMnO1xuXG5pbXBvcnQge0FqZlRhYmxlRmllbGRJbnN0YW5jZX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL2ZpZWxkcy1pbnN0YW5jZXMvdGFibGUtZmllbGQtaW5zdGFuY2UnO1xuaW1wb3J0IHtBamZUYWJsZUNlbGwsIEFqZlRhYmxlRmllbGR9IGZyb20gJy4uLy4uL2ludGVyZmFjZS9maWVsZHMvdGFibGUtZmllbGQnO1xuXG5pbXBvcnQge0FqZkZpZWxkSW5zdGFuY2VDcmVhdGUsIGNyZWF0ZUZpZWxkSW5zdGFuY2V9IGZyb20gJy4vY3JlYXRlLWZpZWxkLWluc3RhbmNlJztcblxuZXhwb3J0IHR5cGUgQWpmVGFibGVGaWVsZEluc3RhbmNlQ3JlYXRlID0gQWpmRmllbGRJbnN0YW5jZUNyZWF0ZSAmIFBhcnRpYWw8QWpmVGFibGVGaWVsZEluc3RhbmNlPjtcbi8qKlxuICogdG8gbWFudGFpbiByZXRyb2NvbXBhdGliaWxpdHkgd2l0aCBvbGQgc3RyaW5nIHR5cGUgY29udmVydCBzdHJpbmcgdG8gQWpmVGFibGVDZWxsXG4gKiBjaGVjayAgbm9kZS5yb3dzOiAoc3RyaW5nfEFqZlRhYmxlQ2VsbClbXVtdO1xuICogaWYgZWxlbSBvZiBtYXAgaXMgc3RyaW5nIGNvbnZlcnQgaW4gdG8gQWpmVGFibGVDZWxsIG9iamVjdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVSb3dzKG5vZGU6IEFqZlRhYmxlRmllbGQpOiB2b2lkIHtcbiAgbm9kZS5yb3dzLmZvckVhY2goKHJvdywgcm93SWR4KSA9PiB7XG4gICAgcm93LmZvckVhY2goKGVsZW0sIGVsZW1JZHgpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgZWxlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbm9kZS5yb3dzW3Jvd0lkeF1bZWxlbUlkeF0gPSB7Zm9ybXVsYTogZWxlbSwgZWRpdGFibGU6IG5vZGUuZWRpdGFibGV9IGFzIEFqZlRhYmxlQ2VsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIFRhYmxlIEZpZWxkaW5zdGFuY2UuXG4gKiBFeHRlbmRzIHNpbXBsZSBmaWVsZCBpbnN0YW5jZSB3aXRoIGNvbnRleHQsaGlkZUVtcHR5Um93cyBhbmQgY29udHJvbHMuXG4gKiBJZiBoaWRlRW1wdHlSb3dzIGlzIG5vdCBkZWZpbmVkIGluIGluc3RhbmNlIHNldCB3aXRoIGZhbHNlLlxuICogQXNzaWduIGVtcHR5IGFycmF5IHRvIGNvbnRyb2xzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYWJsZUZpZWxkSW5zdGFuY2UoXG4gIGluc3RhbmNlOiBBamZUYWJsZUZpZWxkSW5zdGFuY2VDcmVhdGUsXG4gIGNvbnRleHQ6IEFqZkNvbnRleHQsXG4pOiBBamZUYWJsZUZpZWxkSW5zdGFuY2Uge1xuICBub3JtYWxpemVSb3dzKGluc3RhbmNlLm5vZGUgYXMgQWpmVGFibGVGaWVsZCk7XG4gIGNvbnN0IGZpZWxkSW5zdGFuY2UgPSBjcmVhdGVGaWVsZEluc3RhbmNlKGluc3RhbmNlLCBjb250ZXh0KTtcbiAgcmV0dXJuIHtcbiAgICAuLi5maWVsZEluc3RhbmNlLFxuICAgIG5vZGU6IGluc3RhbmNlLm5vZGUsXG4gICAgY29udGV4dCxcbiAgICBoaWRlRW1wdHlSb3dzOiBpbnN0YW5jZS5oaWRlRW1wdHlSb3dzIHx8IGZhbHNlLFxuICAgIGNvbnRyb2xzOiBbXSxcbiAgfTtcbn1cbiJdfQ==