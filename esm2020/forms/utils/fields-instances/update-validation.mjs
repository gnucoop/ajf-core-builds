/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { evaluateExpression } from '@ajf/core/models';
import { nodeInstanceCompleteName } from '../nodes-instances/node-instance-complete-name';
import { evaluateValidationGroup } from '../validation/evaluate-validation-group';
/**
 * it updates the instance.valid attribute.
 * If validation is not defined the instance.valid is true.
 * If valdiation.forceValue is true update context.
 * Updates instance.valid with the re-evaluation of validationResults in AND.
 */
export function updateValidation(instance, context, supplementaryInformations) {
    const validation = instance.validation;
    if (validation == null) {
        instance.valid = true;
        return;
    }
    // TODO what is this??
    if (supplementaryInformations) {
        Object.keys(supplementaryInformations).forEach(key => {
            context[`__supplementary__${key}__`] = supplementaryInformations[key];
        });
    }
    const completeName = nodeInstanceCompleteName(instance);
    if (context[completeName] != null && validation && validation.forceValue) {
        instance.value = evaluateExpression(validation.forceValue.condition, context);
        context[completeName] = instance.value;
        context['$value'] = instance.value;
    }
    instance.validationResults = evaluateValidationGroup(validation, context[completeName], context);
    instance.valid = instance.validationResults.reduce((prev, x) => prev && x.result, true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXZhbGlkYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2Zvcm1zL3NyYy91dGlscy9maWVsZHMtaW5zdGFuY2VzL3VwZGF0ZS12YWxpZGF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUVILE9BQU8sRUFBYSxrQkFBa0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBSWhFLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLGdEQUFnRCxDQUFDO0FBQ3hGLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixRQUEwQixFQUMxQixPQUFtQixFQUNuQix5QkFBK0I7SUFFL0IsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztJQUN2QyxJQUFJLFVBQVUsSUFBSSxJQUFJLEVBQUU7UUFDdEIsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDdEIsT0FBTztLQUNSO0lBQ0Qsc0JBQXNCO0lBQ3RCLElBQUkseUJBQXlCLEVBQUU7UUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNuRCxPQUFPLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLEdBQUcseUJBQXlCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEUsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUVELE1BQU0sWUFBWSxHQUFHLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXhELElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLFVBQVUsRUFBRTtRQUN4RSxRQUFRLENBQUMsS0FBSyxHQUFHLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzlFLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO0tBQ3BDO0lBRUQsUUFBUSxDQUFDLGlCQUFpQixHQUFHLHVCQUF1QixDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDakcsUUFBUSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUNoRCxDQUFDLElBQWEsRUFBRSxDQUFzQixFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFDM0QsSUFBSSxDQUNMLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChDKSBHbnVjb29wIHNvYy4gY29vcC5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzXG4gKiBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSxcbiAqIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlUgQWZmZXJvXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKiBJZiBub3QsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvLlxuICpcbiAqL1xuXG5pbXBvcnQge0FqZkNvbnRleHQsIGV2YWx1YXRlRXhwcmVzc2lvbn0gZnJvbSAnQGFqZi9jb3JlL21vZGVscyc7XG5cbmltcG9ydCB7QWpmRmllbGRJbnN0YW5jZX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL2ZpZWxkcy1pbnN0YW5jZXMvZmllbGQtaW5zdGFuY2UnO1xuaW1wb3J0IHtBamZWYWxpZGF0aW9uUmVzdWx0fSBmcm9tICcuLi8uLi9pbnRlcmZhY2UvdmFsaWRhdGlvbi92YWxpZGF0aW9uLXJlc3VsdHMnO1xuaW1wb3J0IHtub2RlSW5zdGFuY2VDb21wbGV0ZU5hbWV9IGZyb20gJy4uL25vZGVzLWluc3RhbmNlcy9ub2RlLWluc3RhbmNlLWNvbXBsZXRlLW5hbWUnO1xuaW1wb3J0IHtldmFsdWF0ZVZhbGlkYXRpb25Hcm91cH0gZnJvbSAnLi4vdmFsaWRhdGlvbi9ldmFsdWF0ZS12YWxpZGF0aW9uLWdyb3VwJztcbi8qKlxuICogaXQgdXBkYXRlcyB0aGUgaW5zdGFuY2UudmFsaWQgYXR0cmlidXRlLlxuICogSWYgdmFsaWRhdGlvbiBpcyBub3QgZGVmaW5lZCB0aGUgaW5zdGFuY2UudmFsaWQgaXMgdHJ1ZS5cbiAqIElmIHZhbGRpYXRpb24uZm9yY2VWYWx1ZSBpcyB0cnVlIHVwZGF0ZSBjb250ZXh0LlxuICogVXBkYXRlcyBpbnN0YW5jZS52YWxpZCB3aXRoIHRoZSByZS1ldmFsdWF0aW9uIG9mIHZhbGlkYXRpb25SZXN1bHRzIGluIEFORC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVZhbGlkYXRpb24oXG4gIGluc3RhbmNlOiBBamZGaWVsZEluc3RhbmNlLFxuICBjb250ZXh0OiBBamZDb250ZXh0LFxuICBzdXBwbGVtZW50YXJ5SW5mb3JtYXRpb25zPzogYW55LFxuKTogdm9pZCB7XG4gIGNvbnN0IHZhbGlkYXRpb24gPSBpbnN0YW5jZS52YWxpZGF0aW9uO1xuICBpZiAodmFsaWRhdGlvbiA9PSBudWxsKSB7XG4gICAgaW5zdGFuY2UudmFsaWQgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBUT0RPIHdoYXQgaXMgdGhpcz8/XG4gIGlmIChzdXBwbGVtZW50YXJ5SW5mb3JtYXRpb25zKSB7XG4gICAgT2JqZWN0LmtleXMoc3VwcGxlbWVudGFyeUluZm9ybWF0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29udGV4dFtgX19zdXBwbGVtZW50YXJ5X18ke2tleX1fX2BdID0gc3VwcGxlbWVudGFyeUluZm9ybWF0aW9uc1trZXldO1xuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgY29tcGxldGVOYW1lID0gbm9kZUluc3RhbmNlQ29tcGxldGVOYW1lKGluc3RhbmNlKTtcblxuICBpZiAoY29udGV4dFtjb21wbGV0ZU5hbWVdICE9IG51bGwgJiYgdmFsaWRhdGlvbiAmJiB2YWxpZGF0aW9uLmZvcmNlVmFsdWUpIHtcbiAgICBpbnN0YW5jZS52YWx1ZSA9IGV2YWx1YXRlRXhwcmVzc2lvbih2YWxpZGF0aW9uLmZvcmNlVmFsdWUuY29uZGl0aW9uLCBjb250ZXh0KTtcbiAgICBjb250ZXh0W2NvbXBsZXRlTmFtZV0gPSBpbnN0YW5jZS52YWx1ZTtcbiAgICBjb250ZXh0WyckdmFsdWUnXSA9IGluc3RhbmNlLnZhbHVlO1xuICB9XG5cbiAgaW5zdGFuY2UudmFsaWRhdGlvblJlc3VsdHMgPSBldmFsdWF0ZVZhbGlkYXRpb25Hcm91cCh2YWxpZGF0aW9uLCBjb250ZXh0W2NvbXBsZXRlTmFtZV0sIGNvbnRleHQpO1xuICBpbnN0YW5jZS52YWxpZCA9IGluc3RhbmNlLnZhbGlkYXRpb25SZXN1bHRzLnJlZHVjZShcbiAgICAocHJldjogYm9vbGVhbiwgeDogQWpmVmFsaWRhdGlvblJlc3VsdCkgPT4gcHJldiAmJiB4LnJlc3VsdCxcbiAgICB0cnVlLFxuICApO1xufVxuIl19