/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { evaluateExpression } from '@ajf/core/models';
import { nodeInstanceCompleteName } from '../nodes-instances/node-instance-complete-name';
import { evaluateValidationGroup } from '../validation/evaluate-validation-group';
/**
 * it updates the instance.valid attribute.
 * If validation is not defined the instance.valid is true.
 * If valdiation.forceValue is true update context.
 * Updates instance.valid with the re-evaluation of validationResults in AND.
 */
export function updateValidation(instance, context, supplementaryInformations) {
    const validation = instance.validation;
    if (validation == null) {
        instance.valid = true;
        return;
    }
    // TODO what is this??
    if (supplementaryInformations) {
        Object.keys(supplementaryInformations).forEach(key => {
            context[`__supplementary__${key}__`] = supplementaryInformations[key];
        });
    }
    const completeName = nodeInstanceCompleteName(instance);
    if (context[completeName] != null && validation && validation.forceValue) {
        instance.value = evaluateExpression(validation.forceValue.condition, context);
        context[completeName] = instance.value;
        context.$value = instance.value;
    }
    instance.validationResults = evaluateValidationGroup(validation, context[completeName], context);
    instance.valid = instance.validationResults.reduce((prev, x) => prev && x.result, true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXZhbGlkYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29yZS9mb3Jtcy91dGlscy9maWVsZHMtaW5zdGFuY2VzL3VwZGF0ZS12YWxpZGF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUVILE9BQU8sRUFBYSxrQkFBa0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBSWhFLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLGdEQUFnRCxDQUFDO0FBQ3hGLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixRQUEwQixFQUMxQixPQUFtQixFQUNuQix5QkFBK0I7SUFFL0IsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztJQUN2QyxJQUFJLFVBQVUsSUFBSSxJQUFJLEVBQUU7UUFDdEIsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDdEIsT0FBTztLQUNSO0lBQ0Qsc0JBQXNCO0lBQ3RCLElBQUkseUJBQXlCLEVBQUU7UUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNuRCxPQUFPLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLEdBQUcseUJBQXlCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEUsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUVELE1BQU0sWUFBWSxHQUFHLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXhELElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLFVBQVUsRUFBRTtRQUN4RSxRQUFRLENBQUMsS0FBSyxHQUFHLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzlFLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztLQUNqQztJQUVELFFBQVEsQ0FBQyxpQkFBaUIsR0FBRyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pHLFFBQVEsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FDaEQsQ0FBQyxJQUFhLEVBQUUsQ0FBc0IsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQzNELElBQUksQ0FDTCxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZDb250ZXh0LCBldmFsdWF0ZUV4cHJlc3Npb259IGZyb20gJ0BhamYvY29yZS9tb2RlbHMnO1xuXG5pbXBvcnQge0FqZkZpZWxkSW5zdGFuY2V9IGZyb20gJy4uLy4uL2ludGVyZmFjZS9maWVsZHMtaW5zdGFuY2VzL2ZpZWxkLWluc3RhbmNlJztcbmltcG9ydCB7QWpmVmFsaWRhdGlvblJlc3VsdH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1yZXN1bHRzJztcbmltcG9ydCB7bm9kZUluc3RhbmNlQ29tcGxldGVOYW1lfSBmcm9tICcuLi9ub2Rlcy1pbnN0YW5jZXMvbm9kZS1pbnN0YW5jZS1jb21wbGV0ZS1uYW1lJztcbmltcG9ydCB7ZXZhbHVhdGVWYWxpZGF0aW9uR3JvdXB9IGZyb20gJy4uL3ZhbGlkYXRpb24vZXZhbHVhdGUtdmFsaWRhdGlvbi1ncm91cCc7XG4vKipcbiAqIGl0IHVwZGF0ZXMgdGhlIGluc3RhbmNlLnZhbGlkIGF0dHJpYnV0ZS5cbiAqIElmIHZhbGlkYXRpb24gaXMgbm90IGRlZmluZWQgdGhlIGluc3RhbmNlLnZhbGlkIGlzIHRydWUuXG4gKiBJZiB2YWxkaWF0aW9uLmZvcmNlVmFsdWUgaXMgdHJ1ZSB1cGRhdGUgY29udGV4dC5cbiAqIFVwZGF0ZXMgaW5zdGFuY2UudmFsaWQgd2l0aCB0aGUgcmUtZXZhbHVhdGlvbiBvZiB2YWxpZGF0aW9uUmVzdWx0cyBpbiBBTkQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVWYWxpZGF0aW9uKFxuICBpbnN0YW5jZTogQWpmRmllbGRJbnN0YW5jZSxcbiAgY29udGV4dDogQWpmQ29udGV4dCxcbiAgc3VwcGxlbWVudGFyeUluZm9ybWF0aW9ucz86IGFueSxcbik6IHZvaWQge1xuICBjb25zdCB2YWxpZGF0aW9uID0gaW5zdGFuY2UudmFsaWRhdGlvbjtcbiAgaWYgKHZhbGlkYXRpb24gPT0gbnVsbCkge1xuICAgIGluc3RhbmNlLnZhbGlkID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gVE9ETyB3aGF0IGlzIHRoaXM/P1xuICBpZiAoc3VwcGxlbWVudGFyeUluZm9ybWF0aW9ucykge1xuICAgIE9iamVjdC5rZXlzKHN1cHBsZW1lbnRhcnlJbmZvcm1hdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnRleHRbYF9fc3VwcGxlbWVudGFyeV9fJHtrZXl9X19gXSA9IHN1cHBsZW1lbnRhcnlJbmZvcm1hdGlvbnNba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGNvbXBsZXRlTmFtZSA9IG5vZGVJbnN0YW5jZUNvbXBsZXRlTmFtZShpbnN0YW5jZSk7XG5cbiAgaWYgKGNvbnRleHRbY29tcGxldGVOYW1lXSAhPSBudWxsICYmIHZhbGlkYXRpb24gJiYgdmFsaWRhdGlvbi5mb3JjZVZhbHVlKSB7XG4gICAgaW5zdGFuY2UudmFsdWUgPSBldmFsdWF0ZUV4cHJlc3Npb24odmFsaWRhdGlvbi5mb3JjZVZhbHVlLmNvbmRpdGlvbiwgY29udGV4dCk7XG4gICAgY29udGV4dFtjb21wbGV0ZU5hbWVdID0gaW5zdGFuY2UudmFsdWU7XG4gICAgY29udGV4dC4kdmFsdWUgPSBpbnN0YW5jZS52YWx1ZTtcbiAgfVxuXG4gIGluc3RhbmNlLnZhbGlkYXRpb25SZXN1bHRzID0gZXZhbHVhdGVWYWxpZGF0aW9uR3JvdXAodmFsaWRhdGlvbiwgY29udGV4dFtjb21wbGV0ZU5hbWVdLCBjb250ZXh0KTtcbiAgaW5zdGFuY2UudmFsaWQgPSBpbnN0YW5jZS52YWxpZGF0aW9uUmVzdWx0cy5yZWR1Y2UoXG4gICAgKHByZXY6IGJvb2xlYW4sIHg6IEFqZlZhbGlkYXRpb25SZXN1bHQpID0+IHByZXYgJiYgeC5yZXN1bHQsXG4gICAgdHJ1ZSxcbiAgKTtcbn1cbiJdfQ==