/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { isContainerNodeInstance } from './is-container-node-instance';
/**
 * It search recursively a nodeInstance inside a tree of nodes.
 * Base case: search it in main nodes.
 * Otherwise search it recursively inside all containerNodieInstance.
 * If found return the container of node instance and the index position inside him.
 */
export function findNodeInstanceInTree(nodes, node) {
    const index = nodes.indexOf(node);
    if (index > -1) {
        return { container: nodes, index: index };
    }
    const groups = nodes.filter(n => isContainerNodeInstance(n));
    let i = 0;
    const len = groups.length;
    while (i < len) {
        const res = findNodeInstanceInTree(groups[i].node.nodes, node);
        if (res.index > -1) {
            return res;
        }
        i++;
    }
    return { container: [], index: -1 };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC1ub2RlLWluc3RhbmNlLWluLXRyZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29yZS9mb3Jtcy91dGlscy9ub2Rlcy1pbnN0YW5jZXMvZmluZC1ub2RlLWluc3RhbmNlLWluLXRyZWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBR0gsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFFckU7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLEtBQXdCLEVBQ3hCLElBQXFCO0lBRXJCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDZCxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDLENBQUM7S0FDekM7SUFDRCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzFCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsRUFBRTtRQUNkLE1BQU0sR0FBRyxHQUFHLHNCQUFzQixDQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RFLElBQUksR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNsQixPQUFPLEdBQUcsQ0FBQztTQUNaO1FBQ0QsQ0FBQyxFQUFFLENBQUM7S0FDTDtJQUNELE9BQU8sRUFBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDO0FBQ3BDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKEMpIEdudWNvb3Agc29jLiBjb29wLlxuICpcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXNcbiAqIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLFxuICogb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVSBBZmZlcm9cbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqIElmIG5vdCwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8uXG4gKlxuICovXG5cbmltcG9ydCB7QWpmTm9kZUluc3RhbmNlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2Uvbm9kZXMtaW5zdGFuY2VzL25vZGUtaW5zdGFuY2UnO1xuaW1wb3J0IHtpc0NvbnRhaW5lck5vZGVJbnN0YW5jZX0gZnJvbSAnLi9pcy1jb250YWluZXItbm9kZS1pbnN0YW5jZSc7XG5cbi8qKlxuICogSXQgc2VhcmNoIHJlY3Vyc2l2ZWx5IGEgbm9kZUluc3RhbmNlIGluc2lkZSBhIHRyZWUgb2Ygbm9kZXMuXG4gKiBCYXNlIGNhc2U6IHNlYXJjaCBpdCBpbiBtYWluIG5vZGVzLlxuICogT3RoZXJ3aXNlIHNlYXJjaCBpdCByZWN1cnNpdmVseSBpbnNpZGUgYWxsIGNvbnRhaW5lck5vZGllSW5zdGFuY2UuXG4gKiBJZiBmb3VuZCByZXR1cm4gdGhlIGNvbnRhaW5lciBvZiBub2RlIGluc3RhbmNlIGFuZCB0aGUgaW5kZXggcG9zaXRpb24gaW5zaWRlIGhpbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmROb2RlSW5zdGFuY2VJblRyZWUoXG4gIG5vZGVzOiBBamZOb2RlSW5zdGFuY2VbXSxcbiAgbm9kZTogQWpmTm9kZUluc3RhbmNlLFxuKToge2NvbnRhaW5lcjogQWpmTm9kZUluc3RhbmNlW107IGluZGV4OiBudW1iZXJ9IHtcbiAgY29uc3QgaW5kZXggPSBub2Rlcy5pbmRleE9mKG5vZGUpO1xuICBpZiAoaW5kZXggPiAtMSkge1xuICAgIHJldHVybiB7Y29udGFpbmVyOiBub2RlcywgaW5kZXg6IGluZGV4fTtcbiAgfVxuICBjb25zdCBncm91cHMgPSBub2Rlcy5maWx0ZXIobiA9PiBpc0NvbnRhaW5lck5vZGVJbnN0YW5jZShuKSk7XG4gIGxldCBpID0gMDtcbiAgY29uc3QgbGVuID0gZ3JvdXBzLmxlbmd0aDtcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBjb25zdCByZXMgPSBmaW5kTm9kZUluc3RhbmNlSW5UcmVlKCg8YW55Pmdyb3Vwc1tpXSkubm9kZS5ub2Rlcywgbm9kZSk7XG4gICAgaWYgKHJlcy5pbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBpKys7XG4gIH1cbiAgcmV0dXJuIHtjb250YWluZXI6IFtdLCBpbmRleDogLTF9O1xufVxuIl19