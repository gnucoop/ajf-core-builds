/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { isContainerNodeInstance } from './is-container-node-instance';
import { isFieldInstance } from './is-field-instance';
/**
 * It creates a one dimensional array of AjfNodeInstance.
 * If the node is a containerNode(has the nodes attribute)
 * recursively  concat their nodes.
 * If includeGroups is true the result also contains the containerNodeInstance.
 */
export function flattenNodesInstances(nodes, includeGroups = false) {
    let flatNodes = [];
    nodes.forEach((nodeInstance) => {
        if (isFieldInstance(nodeInstance)) {
            flatNodes.push(nodeInstance);
        }
        if (isContainerNodeInstance(nodeInstance)) {
            if (includeGroups) {
                flatNodes.push(nodeInstance);
            }
            flatNodes = flatNodes.concat(flattenNodesInstances(nodeInstance.nodes, includeGroups));
        }
    });
    return flatNodes;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdHRlbi1ub2Rlcy1pbnN0YW5jZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29yZS9mb3Jtcy91dGlscy9ub2Rlcy1pbnN0YW5jZXMvZmxhdHRlbi1ub2Rlcy1pbnN0YW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBS0gsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDckUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBRXBEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLHFCQUFxQixDQUNqQyxLQUF3QixFQUFFLGFBQWEsR0FBRyxLQUFLO0lBQ2pELElBQUksU0FBUyxHQUFzQixFQUFFLENBQUM7SUFDdEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQTZCLEVBQUUsRUFBRTtRQUM5QyxJQUFJLGVBQWUsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNqQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzlCO1FBQ0QsSUFBSSx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUN6QyxJQUFJLGFBQWEsRUFBRTtnQkFDakIsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUM5QjtZQUNELFNBQVMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUN4QixxQkFBcUIsQ0FBRSxZQUF5QyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1NBQzdGO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChDKSBHbnVjb29wIHNvYy4gY29vcC5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzXG4gKiBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSxcbiAqIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlUgQWZmZXJvXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKiBJZiBub3QsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvLlxuICpcbiAqL1xuXG5pbXBvcnQge0FqZkNvbnRhaW5lck5vZGVJbnN0YW5jZX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL25vZGVzLWluc3RhbmNlcy9jb250YWluZXItbm9kZS1pbnN0YW5jZSc7XG5pbXBvcnQge0FqZk5vZGVJbnN0YW5jZX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL25vZGVzLWluc3RhbmNlcy9ub2RlLWluc3RhbmNlJztcblxuaW1wb3J0IHtpc0NvbnRhaW5lck5vZGVJbnN0YW5jZX0gZnJvbSAnLi9pcy1jb250YWluZXItbm9kZS1pbnN0YW5jZSc7XG5pbXBvcnQge2lzRmllbGRJbnN0YW5jZX0gZnJvbSAnLi9pcy1maWVsZC1pbnN0YW5jZSc7XG5cbi8qKlxuICogSXQgY3JlYXRlcyBhIG9uZSBkaW1lbnNpb25hbCBhcnJheSBvZiBBamZOb2RlSW5zdGFuY2UuXG4gKiBJZiB0aGUgbm9kZSBpcyBhIGNvbnRhaW5lck5vZGUoaGFzIHRoZSBub2RlcyBhdHRyaWJ1dGUpXG4gKiByZWN1cnNpdmVseSAgY29uY2F0IHRoZWlyIG5vZGVzLlxuICogSWYgaW5jbHVkZUdyb3VwcyBpcyB0cnVlIHRoZSByZXN1bHQgYWxzbyBjb250YWlucyB0aGUgY29udGFpbmVyTm9kZUluc3RhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbk5vZGVzSW5zdGFuY2VzKFxuICAgIG5vZGVzOiBBamZOb2RlSW5zdGFuY2VbXSwgaW5jbHVkZUdyb3VwcyA9IGZhbHNlKTogQWpmTm9kZUluc3RhbmNlW10ge1xuICBsZXQgZmxhdE5vZGVzOiBBamZOb2RlSW5zdGFuY2VbXSA9IFtdO1xuICBub2Rlcy5mb3JFYWNoKChub2RlSW5zdGFuY2U6IEFqZk5vZGVJbnN0YW5jZSkgPT4ge1xuICAgIGlmIChpc0ZpZWxkSW5zdGFuY2Uobm9kZUluc3RhbmNlKSkge1xuICAgICAgZmxhdE5vZGVzLnB1c2gobm9kZUluc3RhbmNlKTtcbiAgICB9XG4gICAgaWYgKGlzQ29udGFpbmVyTm9kZUluc3RhbmNlKG5vZGVJbnN0YW5jZSkpIHtcbiAgICAgIGlmIChpbmNsdWRlR3JvdXBzKSB7XG4gICAgICAgIGZsYXROb2Rlcy5wdXNoKG5vZGVJbnN0YW5jZSk7XG4gICAgICB9XG4gICAgICBmbGF0Tm9kZXMgPSBmbGF0Tm9kZXMuY29uY2F0KFxuICAgICAgICAgIGZsYXR0ZW5Ob2Rlc0luc3RhbmNlcygobm9kZUluc3RhbmNlIGFzIEFqZkNvbnRhaW5lck5vZGVJbnN0YW5jZSkubm9kZXMsIGluY2x1ZGVHcm91cHMpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZmxhdE5vZGVzO1xufVxuIl19