/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { isField } from '../nodes/is-field';
import { getAncestorRepeatingNodes } from './get-ancestor-repeating-nodes';
/**
 * Returns all childs node.name of the node's ancestor (includes itself).
 * It is a key-value dictionary, key is the name of the node and
 * value is the position inside ancestorRepeatingNodes.
 */
export function getAncestorRepeatingNodesNames(allNodes, node) {
    let names = {};
    const nodeGroups = getAncestorRepeatingNodes(allNodes, node);
    nodeGroups.forEach((n, idx) => (n.nodes || []).forEach((sn) => {
        if (isField(sn)) {
            names[sn.name] = idx;
        }
    }));
    return names;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWFuY2VzdG9yLXJlcGVhdGluZy1ub2Rlcy1uYW1lcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb3JlL2Zvcm1zL3V0aWxzL25vZGVzLWluc3RhbmNlcy9nZXQtYW5jZXN0b3ItcmVwZWF0aW5nLW5vZGVzLW5hbWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUtILE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUUxQyxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUV6RTs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLDhCQUE4QixDQUMxQyxRQUFxQyxFQUFFLElBQWE7SUFDdEQsSUFBSSxLQUFLLEdBQTZCLEVBQUUsQ0FBQztJQUN6QyxNQUFNLFVBQVUsR0FBRyx5QkFBeUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFtQixDQUFDO0lBQy9FLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU7UUFDNUQsSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDZixLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztTQUN0QjtJQUNILENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDSixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKEMpIEdudWNvb3Agc29jLiBjb29wLlxuICpcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXNcbiAqIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLFxuICogb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVSBBZmZlcm9cbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqIElmIG5vdCwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8uXG4gKlxuICovXG5cbmltcG9ydCB7QWpmTm9kZUluc3RhbmNlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2Uvbm9kZXMtaW5zdGFuY2VzL25vZGUtaW5zdGFuY2UnO1xuaW1wb3J0IHtBamZOb2RlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2Uvbm9kZXMvbm9kZSc7XG5pbXBvcnQge0FqZk5vZGVHcm91cH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL25vZGVzL25vZGUtZ3JvdXAnO1xuaW1wb3J0IHtpc0ZpZWxkfSBmcm9tICcuLi9ub2Rlcy9pcy1maWVsZCc7XG5cbmltcG9ydCB7Z2V0QW5jZXN0b3JSZXBlYXRpbmdOb2Rlc30gZnJvbSAnLi9nZXQtYW5jZXN0b3ItcmVwZWF0aW5nLW5vZGVzJztcblxuLyoqXG4gKiBSZXR1cm5zIGFsbCBjaGlsZHMgbm9kZS5uYW1lIG9mIHRoZSBub2RlJ3MgYW5jZXN0b3IgKGluY2x1ZGVzIGl0c2VsZikuXG4gKiBJdCBpcyBhIGtleS12YWx1ZSBkaWN0aW9uYXJ5LCBrZXkgaXMgdGhlIG5hbWUgb2YgdGhlIG5vZGUgYW5kXG4gKiB2YWx1ZSBpcyB0aGUgcG9zaXRpb24gaW5zaWRlIGFuY2VzdG9yUmVwZWF0aW5nTm9kZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbmNlc3RvclJlcGVhdGluZ05vZGVzTmFtZXMoXG4gICAgYWxsTm9kZXM6IChBamZOb2RlfEFqZk5vZGVJbnN0YW5jZSlbXSwgbm9kZTogQWpmTm9kZSk6IHtbcHJvcDogc3RyaW5nXTogbnVtYmVyfSB7XG4gIGxldCBuYW1lczoge1twcm9wOiBzdHJpbmddOiBudW1iZXJ9ID0ge307XG4gIGNvbnN0IG5vZGVHcm91cHMgPSBnZXRBbmNlc3RvclJlcGVhdGluZ05vZGVzKGFsbE5vZGVzLCBub2RlKSBhcyBBamZOb2RlR3JvdXBbXTtcbiAgbm9kZUdyb3Vwcy5mb3JFYWNoKChuLCBpZHgpID0+IChuLm5vZGVzIHx8IFtdKS5mb3JFYWNoKChzbikgPT4ge1xuICAgIGlmIChpc0ZpZWxkKHNuKSkge1xuICAgICAgbmFtZXNbc24ubmFtZV0gPSBpZHg7XG4gICAgfVxuICB9KSk7XG4gIHJldHVybiBuYW1lcztcbn1cbiJdfQ==