/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { isRepeatingContainerNode } from '../nodes/is-repeating-container-node';
/**
 * It returns all ancestor repeatingContainerNodes of the node.
 */
export function getAncestorRepeatingNodes(allNodes, node) {
    let nodeGroups = [];
    let curParent = node.parent;
    while (curParent != null) {
        const curNode = allNodes.map((n) => n.node || n)
            .find(n => n.id == curParent);
        if (curNode) {
            if (isRepeatingContainerNode(curNode)) {
                nodeGroups.push(curNode);
            }
        }
        curParent = curNode != null ? curNode.parent : null;
    }
    return nodeGroups;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWFuY2VzdG9yLXJlcGVhdGluZy1ub2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb3JlL2Zvcm1zL3V0aWxzL25vZGVzLWluc3RhbmNlcy9nZXQtYW5jZXN0b3ItcmVwZWF0aW5nLW5vZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUlILE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBRTlFOztHQUVHO0FBQ0gsTUFBTSxVQUFVLHlCQUF5QixDQUNyQyxRQUFxQyxFQUFFLElBQWE7SUFDdEQsSUFBSSxVQUFVLEdBQWMsRUFBRSxDQUFDO0lBQy9CLElBQUksU0FBUyxHQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3pDLE9BQU8sU0FBUyxJQUFJLElBQUksRUFBRTtRQUN4QixNQUFNLE9BQU8sR0FDVCxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBMEIsRUFBRSxFQUFFLENBQUUsQ0FBcUIsQ0FBQyxJQUFJLElBQUksQ0FBWSxDQUFDO2FBQ3BGLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLENBQUM7UUFDdEMsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNyQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzFCO1NBQ0Y7UUFDRCxTQUFTLEdBQUcsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0tBQ3JEO0lBQ0QsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZOb2RlSW5zdGFuY2V9IGZyb20gJy4uLy4uL2ludGVyZmFjZS9ub2Rlcy1pbnN0YW5jZXMvbm9kZS1pbnN0YW5jZSc7XG5pbXBvcnQge0FqZk5vZGV9IGZyb20gJy4uLy4uL2ludGVyZmFjZS9ub2Rlcy9ub2RlJztcbmltcG9ydCB7aXNSZXBlYXRpbmdDb250YWluZXJOb2RlfSBmcm9tICcuLi9ub2Rlcy9pcy1yZXBlYXRpbmctY29udGFpbmVyLW5vZGUnO1xuXG4vKipcbiAqIEl0IHJldHVybnMgYWxsIGFuY2VzdG9yIHJlcGVhdGluZ0NvbnRhaW5lck5vZGVzIG9mIHRoZSBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW5jZXN0b3JSZXBlYXRpbmdOb2RlcyhcbiAgICBhbGxOb2RlczogKEFqZk5vZGV8QWpmTm9kZUluc3RhbmNlKVtdLCBub2RlOiBBamZOb2RlKTogQWpmTm9kZVtdIHtcbiAgbGV0IG5vZGVHcm91cHM6IEFqZk5vZGVbXSA9IFtdO1xuICBsZXQgY3VyUGFyZW50OiBudW1iZXJ8bnVsbCA9IG5vZGUucGFyZW50O1xuICB3aGlsZSAoY3VyUGFyZW50ICE9IG51bGwpIHtcbiAgICBjb25zdCBjdXJOb2RlID1cbiAgICAgICAgYWxsTm9kZXMubWFwKChuOiBBamZOb2RlfEFqZk5vZGVJbnN0YW5jZSkgPT4gKG4gYXMgQWpmTm9kZUluc3RhbmNlKS5ub2RlIHx8IG4gYXMgQWpmTm9kZSlcbiAgICAgICAgICAgIC5maW5kKG4gPT4gbi5pZCA9PSBjdXJQYXJlbnQpO1xuICAgIGlmIChjdXJOb2RlKSB7XG4gICAgICBpZiAoaXNSZXBlYXRpbmdDb250YWluZXJOb2RlKGN1ck5vZGUpKSB7XG4gICAgICAgIG5vZGVHcm91cHMucHVzaChjdXJOb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY3VyUGFyZW50ID0gY3VyTm9kZSAhPSBudWxsID8gY3VyTm9kZS5wYXJlbnQgOiBudWxsO1xuICB9XG4gIHJldHVybiBub2RlR3JvdXBzO1xufVxuIl19