/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { evaluateExpression } from '@ajf/core/models';
/**
 * It updates instance.visible with the result of evaluating instance.visibility.condition.
 * If instance.visibility is null instance.visible is false and it returns false.
 * If instance.visible changes return true.
 */
export function updateVisibility(instance, context, branchVisibility = true) {
    if (instance.visibility == null) {
        instance.visible = false;
        return false;
    }
    const visibility = instance.visibility;
    const oldVisibility = instance.visible;
    let newVisibility = branchVisibility && evaluateExpression(visibility.condition, context);
    if (newVisibility !== instance.visible) {
        instance.visible = newVisibility;
    }
    return oldVisibility !== newVisibility;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXZpc2liaWxpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2Zvcm1zL3NyYy91dGlscy9ub2Rlcy1pbnN0YW5jZXMvdXBkYXRlLXZpc2liaWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBRUgsT0FBTyxFQUEyQixrQkFBa0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBSTlFOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLFFBQXlCLEVBQ3pCLE9BQW1CLEVBQ25CLGdCQUFnQixHQUFHLElBQUk7SUFFdkIsSUFBSSxRQUFRLENBQUMsVUFBVSxJQUFJLElBQUksRUFBRTtRQUMvQixRQUFRLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUN6QixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsTUFBTSxVQUFVLEdBQWlCLFFBQVEsQ0FBQyxVQUFVLENBQUM7SUFFckQsTUFBTSxhQUFhLEdBQVksUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUNoRCxJQUFJLGFBQWEsR0FDZixnQkFBZ0IsSUFBSSxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hFLElBQUksYUFBYSxLQUFLLFFBQVEsQ0FBQyxPQUFPLEVBQUU7UUFDdEMsUUFBUSxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUM7S0FDbEM7SUFFRCxPQUFPLGFBQWEsS0FBSyxhQUFhLENBQUM7QUFDekMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZDb25kaXRpb24sIEFqZkNvbnRleHQsIGV2YWx1YXRlRXhwcmVzc2lvbn0gZnJvbSAnQGFqZi9jb3JlL21vZGVscyc7XG5cbmltcG9ydCB7QWpmTm9kZUluc3RhbmNlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2Uvbm9kZXMtaW5zdGFuY2VzL25vZGUtaW5zdGFuY2UnO1xuXG4vKipcbiAqIEl0IHVwZGF0ZXMgaW5zdGFuY2UudmlzaWJsZSB3aXRoIHRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyBpbnN0YW5jZS52aXNpYmlsaXR5LmNvbmRpdGlvbi5cbiAqIElmIGluc3RhbmNlLnZpc2liaWxpdHkgaXMgbnVsbCBpbnN0YW5jZS52aXNpYmxlIGlzIGZhbHNlIGFuZCBpdCByZXR1cm5zIGZhbHNlLlxuICogSWYgaW5zdGFuY2UudmlzaWJsZSBjaGFuZ2VzIHJldHVybiB0cnVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVmlzaWJpbGl0eShcbiAgaW5zdGFuY2U6IEFqZk5vZGVJbnN0YW5jZSxcbiAgY29udGV4dDogQWpmQ29udGV4dCxcbiAgYnJhbmNoVmlzaWJpbGl0eSA9IHRydWUsXG4pOiBib29sZWFuIHtcbiAgaWYgKGluc3RhbmNlLnZpc2liaWxpdHkgPT0gbnVsbCkge1xuICAgIGluc3RhbmNlLnZpc2libGUgPSBmYWxzZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgdmlzaWJpbGl0eTogQWpmQ29uZGl0aW9uID0gaW5zdGFuY2UudmlzaWJpbGl0eTtcblxuICBjb25zdCBvbGRWaXNpYmlsaXR5OiBib29sZWFuID0gaW5zdGFuY2UudmlzaWJsZTtcbiAgbGV0IG5ld1Zpc2liaWxpdHk6IGJvb2xlYW4gPVxuICAgIGJyYW5jaFZpc2liaWxpdHkgJiYgZXZhbHVhdGVFeHByZXNzaW9uKHZpc2liaWxpdHkuY29uZGl0aW9uLCBjb250ZXh0KTtcbiAgaWYgKG5ld1Zpc2liaWxpdHkgIT09IGluc3RhbmNlLnZpc2libGUpIHtcbiAgICBpbnN0YW5jZS52aXNpYmxlID0gbmV3VmlzaWJpbGl0eTtcbiAgfVxuXG4gIHJldHVybiBvbGRWaXNpYmlsaXR5ICE9PSBuZXdWaXNpYmlsaXR5O1xufVxuIl19