/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
/**
 * It is return a new orderered nodes.
 * The newNodes are ordered recursively by parentNode.
 * The sorting begins by parent
 */
export function orderedNodes(nodes, parent) {
    let newNodes = [];
    nodes
        .filter((n) => parent != null ? n.parent == parent : n.parent == null || n.parent === 0)
        .sort((n1, n2) => n1.parentNode - n2.parentNode)
        .forEach((n) => {
        newNodes.push(n);
        newNodes = newNodes.concat(orderedNodes(nodes, n.id));
    });
    return newNodes;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXJlZC1ub2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvZm9ybXMvc3JjL3V0aWxzL25vZGVzL29yZGVyZWQtbm9kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBSUg7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsS0FBZ0IsRUFBRSxNQUFxQjtJQUNsRSxJQUFJLFFBQVEsR0FBYyxFQUFFLENBQUM7SUFDN0IsS0FBSztTQUNGLE1BQU0sQ0FBQyxDQUFDLENBQVUsRUFBRSxFQUFFLENBQ3JCLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FDekU7U0FDQSxJQUFJLENBQUMsQ0FBQyxFQUFXLEVBQUUsRUFBVyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUM7U0FDakUsT0FBTyxDQUFDLENBQUMsQ0FBVSxFQUFFLEVBQUU7UUFDdEIsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FBQyxDQUFDO0lBQ0wsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZOb2RlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2Uvbm9kZXMvbm9kZSc7XG5cbi8qKlxuICogSXQgaXMgcmV0dXJuIGEgbmV3IG9yZGVyZXJlZCBub2Rlcy5cbiAqIFRoZSBuZXdOb2RlcyBhcmUgb3JkZXJlZCByZWN1cnNpdmVseSBieSBwYXJlbnROb2RlLlxuICogVGhlIHNvcnRpbmcgYmVnaW5zIGJ5IHBhcmVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gb3JkZXJlZE5vZGVzKG5vZGVzOiBBamZOb2RlW10sIHBhcmVudDogbnVtYmVyIHwgbnVsbCk6IEFqZk5vZGVbXSB7XG4gIGxldCBuZXdOb2RlczogQWpmTm9kZVtdID0gW107XG4gIG5vZGVzXG4gICAgLmZpbHRlcigobjogQWpmTm9kZSkgPT5cbiAgICAgIHBhcmVudCAhPSBudWxsID8gbi5wYXJlbnQgPT0gcGFyZW50IDogbi5wYXJlbnQgPT0gbnVsbCB8fCBuLnBhcmVudCA9PT0gMCxcbiAgICApXG4gICAgLnNvcnQoKG4xOiBBamZOb2RlLCBuMjogQWpmTm9kZSkgPT4gbjEucGFyZW50Tm9kZSAtIG4yLnBhcmVudE5vZGUpXG4gICAgLmZvckVhY2goKG46IEFqZk5vZGUpID0+IHtcbiAgICAgIG5ld05vZGVzLnB1c2gobik7XG4gICAgICBuZXdOb2RlcyA9IG5ld05vZGVzLmNvbmNhdChvcmRlcmVkTm9kZXMobm9kZXMsIG4uaWQpKTtcbiAgICB9KTtcbiAgcmV0dXJuIG5ld05vZGVzO1xufVxuIl19