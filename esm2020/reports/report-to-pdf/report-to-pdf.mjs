/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { AjfImageType } from '@ajf/core/image';
import { deepCopy } from '@ajf/core/utils';
import { vfsFonts, vfsFontsMap } from '@ajf/core/vfs-fonts';
import * as pdfMakeModule from 'pdfmake/build/pdfmake';
import { AjfWidgetType } from '../interface/widgets/widget-type';
import { loadReportImages } from './load-report-images';
const { createPdf } = (pdfMakeModule.default || pdfMakeModule);
const pageWidth = 800;
const pageHeight = pageWidth * 1.4142; // A4 proportions
const pageMargins = [40, 60];
export function openReportPdf(report, orientation = 'portrait', icons = {}) {
    createReportPdf(report, orientation, icons).then(pdf => {
        pdf.open();
    });
}
export function createReportPdf(report, orientation = 'portrait', icons = {}) {
    return new Promise(resolve => {
        loadReportImages(report).then(images => {
            let width = pageWidth - pageMargins[0] * 2;
            if (orientation === 'landscape') {
                width = pageHeight - pageMargins[1] * 2;
            }
            const pdfDef = reportToPdf(report, { ...images, ...icons }, width);
            pdfDef.pageSize = { width: pageWidth, height: pageHeight };
            pdfDef.pageMargins = pageMargins;
            pdfDef.pageOrientation = orientation;
            resolve(createPdf(pdfDef, undefined, vfsFontsMap, vfsFonts));
        });
    });
}
function reportToPdf(report, images, width) {
    const stack = [];
    if (report.header != null) {
        stack.push(containerToPdf(report.header, images, width));
    }
    if (report.content != null) {
        stack.push(containerToPdf(report.content, images, width));
    }
    if (report.footer != null) {
        stack.push(containerToPdf(report.footer, images, width));
    }
    return { content: { stack } };
}
function containerToPdf(container, images, width) {
    return { stack: container.content.map(w => widgetToPdf(w, images, width)) };
}
const marginBetweenWidgets = 10;
function widgetToPdf(widget, images, width) {
    switch (widget.widget.widgetType) {
        case AjfWidgetType.Layout:
            return layoutToPdf(widget, images, width);
        case AjfWidgetType.PageBreak:
            return { text: '', pageBreak: 'after' };
        case AjfWidgetType.Image:
            return imageToPdf(widget, images, width);
        case AjfWidgetType.Text:
            return textToPdf(widget, images);
        case AjfWidgetType.Chart:
            const chart = widget;
            const dataUrl = chart.canvasDataUrl == null ? '' : chart.canvasDataUrl();
            if (dataUrl === '') {
                return { text: '[chart with no attached canvas]' };
            }
            return { image: dataUrl, width, margin: [0, 0, 0, marginBetweenWidgets] };
        case AjfWidgetType.Table:
        case AjfWidgetType.DynamicTable:
            return tableToPdf(widget, images);
        case AjfWidgetType.Column:
            const cw = widget;
            return { stack: cw.content.map(w => widgetToPdf(w, images, width)) };
        case AjfWidgetType.Formula:
            const fw = widget;
            return { text: fw.formula, margin: [0, 0, 0, marginBetweenWidgets] };
        default:
            return { text: '' };
    }
}
function layoutToPdf(lw, images, width) {
    const columns = [...lw.widget.columns];
    while (columns.length < lw.content.length) {
        columns.push(1);
    }
    const childWidth = width / (columns.length || 1);
    const children = [];
    for (let i = 0; i < lw.content.length; i++) {
        let child = widgetToPdf(lw.content[i], images, childWidth);
        // Children of Layout widgets are supposed to be Columns. If they aren't,
        // we must wrap them to avoid problems like images having an 'auto' width.
        if (child.stack == null) {
            child = { stack: [child] };
        }
        child.width = columns[i] === -1 ? 'auto' : '*';
        children.push(child);
    }
    return { columns: children };
}
function imageToPdf(image, images, width) {
    if (image.widget.imageType !== AjfImageType.Image) {
        // Can't get icons to work, pdfs with multiple fonts don't seem to be working
        return { text: '' };
    }
    const dataUrl = images[image.url];
    if (dataUrl == null) {
        return { text: '' };
    }
    const w = image.styles.width;
    if (typeof w === 'string' && w.endsWith('px')) {
        width = Number(w.slice(0, -2));
    }
    return { image: dataUrl, width, margin: [0, 0, 0, marginBetweenWidgets] };
}
function htmlTextToPdfText(htmlText, images) {
    const iconText = images[htmlText];
    if (typeof iconText === 'string') {
        return iconText;
    }
    return stripHTML(htmlText);
}
function textToPdf(tw, images) {
    const text = {
        text: htmlTextToPdfText(tw.htmlText, images),
        margin: [0, 0, 0, marginBetweenWidgets],
    };
    if (tw.htmlText.startsWith('<h1>')) {
        text.fontSize = 20;
        text.margin = [0, 10, 0, marginBetweenWidgets];
    }
    else if (tw.htmlText.startsWith('<h2>')) {
        text.fontSize = 15;
        text.margin = [0, 5, 0, marginBetweenWidgets];
    }
    return text;
}
function tableToPdf(table, images) {
    if (table.data == null || table.data.length === 0) {
        return { text: '' };
    }
    const body = [];
    for (const dataRow of expandColAndRowSpan(table.data)) {
        const bodyRow = [];
        for (const cell of dataRow) {
            let text = '';
            switch (typeof cell.value) {
                case 'number':
                    text = String(cell.value);
                    break;
                case 'string':
                    text = htmlTextToPdfText(cell.value, images);
                    break;
                case 'object':
                    let val = cell.value.changingThisBreaksApplicationSecurity;
                    if (typeof val === 'number') {
                        val = String(val);
                    }
                    text = htmlTextToPdfText(val || '', images);
                    break;
            }
            bodyRow.push({ text, colSpan: cell.colspan, rowSpan: cell.rowspan });
        }
        body.push(bodyRow);
    }
    return { table: { headerRows: 0, body }, margin: [0, 0, 0, marginBetweenWidgets] };
}
// pdfmake wants placeholder cells after cells with col/rowspan > 1
function expandColAndRowSpan(data) {
    data = deepCopy(data);
    // expand colspan:
    for (const row of data) {
        for (let j = 0; j < row.length; j++) {
            const cell = row[j];
            for (let k = 1; k < (cell.colspan || 1); k++) {
                row.splice(j + k, 0, { rowspan: cell.rowspan, value: '', style: {} });
            }
        }
    }
    // expand rowspan:
    for (let i = 0; i < data.length; i++) {
        const row = data[i];
        for (let j = 0; j < row.length; j++) {
            const cell = row[j];
            for (let k = 1; k < (cell.rowspan || 1); k++) {
                data[i + k].splice(j, 0, { value: '', style: {} });
            }
        }
    }
    return data;
}
function stripHTML(s) {
    return s.replace(/<\/?[^>]+(>|$)/g, '');
}
//# sourceMappingURL=data:application/json;base64,