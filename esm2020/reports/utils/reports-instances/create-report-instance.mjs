/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { evaluateExpression } from '@ajf/core/models';
import { createReportContainerInstance } from './create-report-container-instance';
export function createReportInstance(report, context, ts) {
    (report.variables || []).forEach(variable => {
        context[variable.name] = evaluateExpression(variable.formula.formula, context);
    });
    return {
        report,
        header: report.header
            ? createReportContainerInstance(report.header, context, ts, report.variables)
            : undefined,
        content: report.content
            ? createReportContainerInstance(report.content, context, ts, report.variables)
            : undefined,
        footer: report.footer
            ? createReportContainerInstance(report.footer, context, ts, report.variables)
            : undefined,
        styles: report.styles || {},
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXJlcG9ydC1pbnN0YW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvcmVwb3J0cy9zcmMvdXRpbHMvcmVwb3J0cy1pbnN0YW5jZXMvY3JlYXRlLXJlcG9ydC1pbnN0YW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFFSCxPQUFPLEVBQWEsa0JBQWtCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQU1oRSxPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUVqRixNQUFNLFVBQVUsb0JBQW9CLENBQ2xDLE1BQWlCLEVBQ2pCLE9BQW1CLEVBQ25CLEVBQW9CO0lBRXBCLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDMUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRixDQUFDLENBQUMsQ0FBQztJQUNILE9BQU87UUFDTCxNQUFNO1FBQ04sTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNO1lBQ25CLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUM3RSxDQUFDLENBQUMsU0FBUztRQUNiLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTztZQUNyQixDQUFDLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDOUUsQ0FBQyxDQUFDLFNBQVM7UUFDYixNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU07WUFDbkIsQ0FBQyxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQzdFLENBQUMsQ0FBQyxTQUFTO1FBQ2IsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLElBQUksRUFBRTtLQUM1QixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZDb250ZXh0LCBldmFsdWF0ZUV4cHJlc3Npb259IGZyb20gJ0BhamYvY29yZS9tb2RlbHMnO1xuaW1wb3J0IHtUcmFuc2xvY29TZXJ2aWNlfSBmcm9tICdAYWpmL2NvcmUvdHJhbnNsb2NvJztcblxuaW1wb3J0IHtBamZSZXBvcnRJbnN0YW5jZX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL3JlcG9ydHMtaW5zdGFuY2VzL3JlcG9ydC1pbnN0YW5jZSc7XG5pbXBvcnQge0FqZlJlcG9ydH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL3JlcG9ydHMvcmVwb3J0JztcblxuaW1wb3J0IHtjcmVhdGVSZXBvcnRDb250YWluZXJJbnN0YW5jZX0gZnJvbSAnLi9jcmVhdGUtcmVwb3J0LWNvbnRhaW5lci1pbnN0YW5jZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXBvcnRJbnN0YW5jZShcbiAgcmVwb3J0OiBBamZSZXBvcnQsXG4gIGNvbnRleHQ6IEFqZkNvbnRleHQsXG4gIHRzOiBUcmFuc2xvY29TZXJ2aWNlLFxuKTogQWpmUmVwb3J0SW5zdGFuY2Uge1xuICAocmVwb3J0LnZhcmlhYmxlcyB8fCBbXSkuZm9yRWFjaCh2YXJpYWJsZSA9PiB7XG4gICAgY29udGV4dFt2YXJpYWJsZS5uYW1lXSA9IGV2YWx1YXRlRXhwcmVzc2lvbih2YXJpYWJsZS5mb3JtdWxhLmZvcm11bGEsIGNvbnRleHQpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICByZXBvcnQsXG4gICAgaGVhZGVyOiByZXBvcnQuaGVhZGVyXG4gICAgICA/IGNyZWF0ZVJlcG9ydENvbnRhaW5lckluc3RhbmNlKHJlcG9ydC5oZWFkZXIsIGNvbnRleHQsIHRzLCByZXBvcnQudmFyaWFibGVzKVxuICAgICAgOiB1bmRlZmluZWQsXG4gICAgY29udGVudDogcmVwb3J0LmNvbnRlbnRcbiAgICAgID8gY3JlYXRlUmVwb3J0Q29udGFpbmVySW5zdGFuY2UocmVwb3J0LmNvbnRlbnQsIGNvbnRleHQsIHRzLCByZXBvcnQudmFyaWFibGVzKVxuICAgICAgOiB1bmRlZmluZWQsXG4gICAgZm9vdGVyOiByZXBvcnQuZm9vdGVyXG4gICAgICA/IGNyZWF0ZVJlcG9ydENvbnRhaW5lckluc3RhbmNlKHJlcG9ydC5mb290ZXIsIGNvbnRleHQsIHRzLCByZXBvcnQudmFyaWFibGVzKVxuICAgICAgOiB1bmRlZmluZWQsXG4gICAgc3R5bGVzOiByZXBvcnQuc3R5bGVzIHx8IHt9LFxuICB9O1xufVxuIl19