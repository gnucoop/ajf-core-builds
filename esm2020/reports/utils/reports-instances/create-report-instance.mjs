/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { evaluateExpression } from '@ajf/core/models';
import { createReportContainerInstance } from './create-report-container-instance';
export function createReportInstance(report, context, ts) {
    console.log(context);
    (report.variables || []).forEach(variable => {
        context[variable.name] = evaluateExpression(variable.formula.formula, context);
    });
    return {
        report,
        header: report.header
            ? createReportContainerInstance(report.header, context, ts, report.variables)
            : undefined,
        content: report.content
            ? createReportContainerInstance(report.content, context, ts, report.variables)
            : undefined,
        footer: report.footer
            ? createReportContainerInstance(report.footer, context, ts, report.variables)
            : undefined,
        styles: report.styles || {},
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXJlcG9ydC1pbnN0YW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jb3JlL3JlcG9ydHMvdXRpbHMvcmVwb3J0cy1pbnN0YW5jZXMvY3JlYXRlLXJlcG9ydC1pbnN0YW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFFSCxPQUFPLEVBQWEsa0JBQWtCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQU1oRSxPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUVqRixNQUFNLFVBQVUsb0JBQW9CLENBQ2xDLE1BQWlCLEVBQ2pCLE9BQW1CLEVBQ25CLEVBQW9CO0lBRXBCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckIsQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUMxQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pGLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTztRQUNMLE1BQU07UUFDTixNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU07WUFDbkIsQ0FBQyxDQUFDLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQzdFLENBQUMsQ0FBQyxTQUFTO1FBQ2IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO1lBQ3JCLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUM5RSxDQUFDLENBQUMsU0FBUztRQUNiLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTTtZQUNuQixDQUFDLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDN0UsQ0FBQyxDQUFDLFNBQVM7UUFDYixNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sSUFBSSxFQUFFO0tBQzVCLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChDKSBHbnVjb29wIHNvYy4gY29vcC5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzXG4gKiBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSxcbiAqIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlUgQWZmZXJvXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKiBJZiBub3QsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvLlxuICpcbiAqL1xuXG5pbXBvcnQge0FqZkNvbnRleHQsIGV2YWx1YXRlRXhwcmVzc2lvbn0gZnJvbSAnQGFqZi9jb3JlL21vZGVscyc7XG5pbXBvcnQge1RyYW5zbG9jb1NlcnZpY2V9IGZyb20gJ0BhamYvY29yZS90cmFuc2xvY28nO1xuXG5pbXBvcnQge0FqZlJlcG9ydEluc3RhbmNlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2UvcmVwb3J0cy1pbnN0YW5jZXMvcmVwb3J0LWluc3RhbmNlJztcbmltcG9ydCB7QWpmUmVwb3J0fSBmcm9tICcuLi8uLi9pbnRlcmZhY2UvcmVwb3J0cy9yZXBvcnQnO1xuXG5pbXBvcnQge2NyZWF0ZVJlcG9ydENvbnRhaW5lckluc3RhbmNlfSBmcm9tICcuL2NyZWF0ZS1yZXBvcnQtY29udGFpbmVyLWluc3RhbmNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlcG9ydEluc3RhbmNlKFxuICByZXBvcnQ6IEFqZlJlcG9ydCxcbiAgY29udGV4dDogQWpmQ29udGV4dCxcbiAgdHM6IFRyYW5zbG9jb1NlcnZpY2UsXG4pOiBBamZSZXBvcnRJbnN0YW5jZSB7XG4gIGNvbnNvbGUubG9nKGNvbnRleHQpO1xuICAocmVwb3J0LnZhcmlhYmxlcyB8fCBbXSkuZm9yRWFjaCh2YXJpYWJsZSA9PiB7XG4gICAgY29udGV4dFt2YXJpYWJsZS5uYW1lXSA9IGV2YWx1YXRlRXhwcmVzc2lvbih2YXJpYWJsZS5mb3JtdWxhLmZvcm11bGEsIGNvbnRleHQpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICByZXBvcnQsXG4gICAgaGVhZGVyOiByZXBvcnQuaGVhZGVyXG4gICAgICA/IGNyZWF0ZVJlcG9ydENvbnRhaW5lckluc3RhbmNlKHJlcG9ydC5oZWFkZXIsIGNvbnRleHQsIHRzLCByZXBvcnQudmFyaWFibGVzKVxuICAgICAgOiB1bmRlZmluZWQsXG4gICAgY29udGVudDogcmVwb3J0LmNvbnRlbnRcbiAgICAgID8gY3JlYXRlUmVwb3J0Q29udGFpbmVySW5zdGFuY2UocmVwb3J0LmNvbnRlbnQsIGNvbnRleHQsIHRzLCByZXBvcnQudmFyaWFibGVzKVxuICAgICAgOiB1bmRlZmluZWQsXG4gICAgZm9vdGVyOiByZXBvcnQuZm9vdGVyXG4gICAgICA/IGNyZWF0ZVJlcG9ydENvbnRhaW5lckluc3RhbmNlKHJlcG9ydC5mb290ZXIsIGNvbnRleHQsIHRzLCByZXBvcnQudmFyaWFibGVzKVxuICAgICAgOiB1bmRlZmluZWQsXG4gICAgc3R5bGVzOiByZXBvcnQuc3R5bGVzIHx8IHt9LFxuICB9O1xufVxuIl19