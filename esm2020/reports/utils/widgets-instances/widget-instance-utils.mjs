/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { createFormula, evaluateExpression } from '@ajf/core/models';
export function trFormula(f, context, ts) {
    let formula = f.formula;
    if (formula.substring(0, 1) === '"' || formula.substring(0, 1) === "'") {
        const ft = formula.slice(1, -1);
        const transFt = ft != null && typeof ft === 'string' && ft.trim().length > 0 ? ts.translate(ft) : ft;
        if (ft.length > 0) {
            formula = `"${transFt}"`;
        }
    }
    else {
        formula =
            formula != null && typeof formula === 'string' && formula.trim().length > 0
                ? ts.translate(formula)
                : formula;
    }
    let res;
    try {
        res = evaluateExpression(formula, context);
    }
    catch (_) {
        res = formula;
    }
    return res;
}
/**
 * Evaluate a string with expression inside, identified by double square brackets
 * Example: "Number of positive identified: [[n_positive_campaign]]"
 */
export function evaluateProperty(expression, context, ts) {
    const formulaRegEx = /\[{2}(.+?)\]{2}/g;
    const matches = [];
    let match;
    let htmlText = expression;
    while ((match = formulaRegEx.exec(htmlText))) {
        const idx = match.index;
        const len = match[0].length;
        const formula = createFormula({ formula: match[1] });
        matches.push({ idx, len, formula });
    }
    matches.reverse().forEach(m => {
        let calcValue;
        try {
            calcValue = evaluateExpression(m.formula.formula, context);
        }
        catch (e) {
            calcValue = '';
        }
        htmlText = `${htmlText.substring(0, m.idx)}${calcValue}${htmlText.substring(m.idx + m.len)}`;
    });
    htmlText = htmlText === '[[]]' ? 'false' : htmlText;
    return htmlText != null && htmlText.length > 0 ? ts.translate(htmlText) : htmlText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LWluc3RhbmNlLXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9yZXBvcnRzL3NyYy91dGlscy93aWRnZXRzLWluc3RhbmNlcy93aWRnZXQtaW5zdGFuY2UtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBRUgsT0FBTyxFQUF5QixhQUFhLEVBQUUsa0JBQWtCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUczRixNQUFNLFVBQVUsU0FBUyxDQUFDLENBQWEsRUFBRSxPQUFtQixFQUFFLEVBQW9CO0lBQ2hGLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDeEIsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO1FBQ3RFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsTUFBTSxPQUFPLEdBQ1gsRUFBRSxJQUFJLElBQUksSUFBSSxPQUFPLEVBQUUsS0FBSyxRQUFRLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN2RixJQUFJLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2pCLE9BQU8sR0FBRyxJQUFJLE9BQU8sR0FBRyxDQUFDO1NBQzFCO0tBQ0Y7U0FBTTtRQUNMLE9BQU87WUFDTCxPQUFPLElBQUksSUFBSSxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQ3pFLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztnQkFDdkIsQ0FBQyxDQUFDLE9BQU8sQ0FBQztLQUNmO0lBQ0QsSUFBSSxHQUFHLENBQUM7SUFDUixJQUFJO1FBQ0YsR0FBRyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUM1QztJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsR0FBRyxHQUFHLE9BQU8sQ0FBQztLQUNmO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixVQUFrQixFQUNsQixPQUFtQixFQUNuQixFQUFvQjtJQUVwQixNQUFNLFlBQVksR0FBVyxrQkFBa0IsQ0FBQztJQUNoRCxNQUFNLE9BQU8sR0FBc0QsRUFBRSxDQUFDO0lBQ3RFLElBQUksS0FBNkIsQ0FBQztJQUNsQyxJQUFJLFFBQVEsR0FBRyxVQUFVLENBQUM7SUFDMUIsT0FBTyxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUU7UUFDNUMsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN4QixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQzVCLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxFQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7S0FDbkM7SUFDRCxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQzVCLElBQUksU0FBUyxDQUFDO1FBQ2QsSUFBSTtZQUNGLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM1RDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsU0FBUyxHQUFHLEVBQUUsQ0FBQztTQUNoQjtRQUNELFFBQVEsR0FBRyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO0lBQy9GLENBQUMsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxHQUFHLFFBQVEsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQ3BELE9BQU8sUUFBUSxJQUFJLElBQUksSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3JGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKEMpIEdudWNvb3Agc29jLiBjb29wLlxuICpcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXNcbiAqIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLFxuICogb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVSBBZmZlcm9cbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqIElmIG5vdCwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8uXG4gKlxuICovXG5cbmltcG9ydCB7QWpmQ29udGV4dCwgQWpmRm9ybXVsYSwgY3JlYXRlRm9ybXVsYSwgZXZhbHVhdGVFeHByZXNzaW9ufSBmcm9tICdAYWpmL2NvcmUvbW9kZWxzJztcbmltcG9ydCB7VHJhbnNsb2NvU2VydmljZX0gZnJvbSAnQGFqZi9jb3JlL3RyYW5zbG9jbyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0ckZvcm11bGEoZjogQWpmRm9ybXVsYSwgY29udGV4dDogQWpmQ29udGV4dCwgdHM6IFRyYW5zbG9jb1NlcnZpY2UpOiBhbnkge1xuICBsZXQgZm9ybXVsYSA9IGYuZm9ybXVsYTtcbiAgaWYgKGZvcm11bGEuc3Vic3RyaW5nKDAsIDEpID09PSAnXCInIHx8IGZvcm11bGEuc3Vic3RyaW5nKDAsIDEpID09PSBcIidcIikge1xuICAgIGNvbnN0IGZ0ID0gZm9ybXVsYS5zbGljZSgxLCAtMSk7XG4gICAgY29uc3QgdHJhbnNGdCA9XG4gICAgICBmdCAhPSBudWxsICYmIHR5cGVvZiBmdCA9PT0gJ3N0cmluZycgJiYgZnQudHJpbSgpLmxlbmd0aCA+IDAgPyB0cy50cmFuc2xhdGUoZnQpIDogZnQ7XG4gICAgaWYgKGZ0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGZvcm11bGEgPSBgXCIke3RyYW5zRnR9XCJgO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3JtdWxhID1cbiAgICAgIGZvcm11bGEgIT0gbnVsbCAmJiB0eXBlb2YgZm9ybXVsYSA9PT0gJ3N0cmluZycgJiYgZm9ybXVsYS50cmltKCkubGVuZ3RoID4gMFxuICAgICAgICA/IHRzLnRyYW5zbGF0ZShmb3JtdWxhKVxuICAgICAgICA6IGZvcm11bGE7XG4gIH1cbiAgbGV0IHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBldmFsdWF0ZUV4cHJlc3Npb24oZm9ybXVsYSwgY29udGV4dCk7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXMgPSBmb3JtdWxhO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogRXZhbHVhdGUgYSBzdHJpbmcgd2l0aCBleHByZXNzaW9uIGluc2lkZSwgaWRlbnRpZmllZCBieSBkb3VibGUgc3F1YXJlIGJyYWNrZXRzXG4gKiBFeGFtcGxlOiBcIk51bWJlciBvZiBwb3NpdGl2ZSBpZGVudGlmaWVkOiBbW25fcG9zaXRpdmVfY2FtcGFpZ25dXVwiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmFsdWF0ZVByb3BlcnR5KFxuICBleHByZXNzaW9uOiBzdHJpbmcsXG4gIGNvbnRleHQ6IEFqZkNvbnRleHQsXG4gIHRzOiBUcmFuc2xvY29TZXJ2aWNlLFxuKTogc3RyaW5nIHtcbiAgY29uc3QgZm9ybXVsYVJlZ0V4OiBSZWdFeHAgPSAvXFxbezJ9KC4rPylcXF17Mn0vZztcbiAgY29uc3QgbWF0Y2hlczoge2lkeDogbnVtYmVyOyBsZW46IG51bWJlcjsgZm9ybXVsYTogQWpmRm9ybXVsYX1bXSA9IFtdO1xuICBsZXQgbWF0Y2g6IFJlZ0V4cEV4ZWNBcnJheSB8IG51bGw7XG4gIGxldCBodG1sVGV4dCA9IGV4cHJlc3Npb247XG4gIHdoaWxlICgobWF0Y2ggPSBmb3JtdWxhUmVnRXguZXhlYyhodG1sVGV4dCkpKSB7XG4gICAgY29uc3QgaWR4ID0gbWF0Y2guaW5kZXg7XG4gICAgY29uc3QgbGVuID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIGNvbnN0IGZvcm11bGEgPSBjcmVhdGVGb3JtdWxhKHtmb3JtdWxhOiBtYXRjaFsxXX0pO1xuICAgIG1hdGNoZXMucHVzaCh7aWR4LCBsZW4sIGZvcm11bGF9KTtcbiAgfVxuICBtYXRjaGVzLnJldmVyc2UoKS5mb3JFYWNoKG0gPT4ge1xuICAgIGxldCBjYWxjVmFsdWU7XG4gICAgdHJ5IHtcbiAgICAgIGNhbGNWYWx1ZSA9IGV2YWx1YXRlRXhwcmVzc2lvbihtLmZvcm11bGEuZm9ybXVsYSwgY29udGV4dCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY2FsY1ZhbHVlID0gJyc7XG4gICAgfVxuICAgIGh0bWxUZXh0ID0gYCR7aHRtbFRleHQuc3Vic3RyaW5nKDAsIG0uaWR4KX0ke2NhbGNWYWx1ZX0ke2h0bWxUZXh0LnN1YnN0cmluZyhtLmlkeCArIG0ubGVuKX1gO1xuICB9KTtcbiAgaHRtbFRleHQgPSBodG1sVGV4dCA9PT0gJ1tbXV0nID8gJ2ZhbHNlJyA6IGh0bWxUZXh0O1xuICByZXR1cm4gaHRtbFRleHQgIT0gbnVsbCAmJiBodG1sVGV4dC5sZW5ndGggPiAwID8gdHMudHJhbnNsYXRlKGh0bWxUZXh0KSA6IGh0bWxUZXh0O1xufVxuIl19