/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { createFormula, evaluateExpression } from '@ajf/core/models';
import { deepCopy } from '@ajf/core/utils';
import { chartToChartJsType } from '../../chart-utils';
import { AjfWidgetType } from '../../interface/widgets/widget-type';
import { evaluateAggregation } from '../aggregation/evaluate-aggregation';
import { componentsMap } from '../widgets/widgets-map';
import { createWidgetInstance } from './create-widget-instance';
import { trFormula } from './widget-instance-utils';
export function widgetToWidgetInstance(widget, context, ts, variables = []) {
    const wi = createWidgetInstance(widget, context, ts, variables);
    if (widget.widgetType === AjfWidgetType.Column || widget.widgetType === AjfWidgetType.Layout) {
        const wwc = widget;
        const wwci = wi;
        let content = [];
        wwc.content.forEach(c => {
            if (wwc.repetitions != null) {
                wwci.repetitions = evaluateExpression(wwc.repetitions.formula, context);
                if (typeof wwci.repetitions === 'number' && wwci.repetitions > 0) {
                    for (let i = 0; i < wwci.repetitions; i++) {
                        content.push(widgetToWidgetInstance(c, { ...context, '$repetition': i }, ts, variables));
                    }
                }
            }
            else {
                content.push(widgetToWidgetInstance(c, context, ts, variables));
            }
            wwci.content = content;
        });
    }
    else if (widget.widgetType === AjfWidgetType.Chart) {
        const cw = { ...{ option: {} }, ...widget };
        const cwi = wi;
        const labels = cw.labels instanceof Array ? cw.labels : [cw.labels];
        const evLabels = labels.map(l => {
            let evf = evaluateExpression(l.formula, context);
            try {
                if (evf instanceof Array) {
                    evf = evf.map(v => v != null && typeof v === 'string' && v.trim().length > 0 ? ts.translate(v) : v);
                }
                else {
                    evf =
                        evf != null && typeof evf === 'string' && evf.trim().length > 0
                            ? ts.translate(evf)
                            : evf;
                }
            }
            catch (_e) { }
            return evf;
        });
        cwi.labels = cw.labels instanceof Array ? evLabels : evLabels[0];
        cwi.datasets = cw.dataset.map(d => {
            let ds = {
                ...(d.options || {}),
                data: evaluateAggregation(d.aggregation, d.formula, context),
            };
            if (d.chartType != null) {
                const ct = chartToChartJsType(d.chartType);
                ds = { ...ds, chartType: ct, type: ct };
            }
            if (d.options != null) {
                ds = { ...ds, options: d.options };
            }
            if (d.label != null) {
                ds = { ...ds, label: d.label.trim().length > 0 ? ts.translate(d.label) : d.label };
            }
            if (d.datalabels != null) {
                ds.datalabels = deepCopy(d.datalabels);
            }
            return ds;
        });
        cwi.data = { labels: cwi.labels, datasets: cwi.datasets };
        cwi.chartType = chartToChartJsType(cw.type || cw.chartType);
        cwi.exportable =
            cw.exportable && (cw.exportable === true || cw.exportable === 'true') ? true : false;
        if (cw.options != null && cw.options.plugins != null) {
            const plugins = cw.options.plugins;
            const pluginNames = Object.keys(plugins);
            pluginNames.forEach(pluginName => {
                const plugin = plugins[pluginName];
                const pluginOptions = Object.keys(plugin);
                pluginOptions.forEach((pluginOptionName) => {
                    const pluginOption = plugin[pluginOptionName];
                    if (typeof pluginOption !== 'string' &&
                        pluginOption != null &&
                        pluginOption.formula != null) {
                        plugin[pluginOptionName] = evaluateExpression(pluginOption.formula, context);
                    }
                });
            });
        }
    }
    else if (widget.widgetType === AjfWidgetType.Table) {
        const tw = widget;
        const twi = wi;
        twi.dataset = tw.dataset.map(row => row.map(cell => {
            return cell.formula instanceof Array
                ? cell.formula.map(f => trFormula(f, context, ts))
                : trFormula(cell.formula, context, ts);
        }));
        twi.exportable =
            tw.exportable && (tw.exportable === true || tw.exportable === 'true') ? true : false;
        twi.data = (tw.dataset || []).map(row => row.map(cell => {
            let evf = '';
            try {
                evf =
                    cell.formula instanceof Array
                        ? cell.formula.map(f => trFormula(f, context, ts))
                        : trFormula(cell.formula, context, ts);
            }
            catch (_e) { }
            return {
                value: evf,
                style: { ...tw.cellStyles, ...cell.style },
                rowspan: cell.rowspan,
                colspan: cell.colspan,
            };
        }));
    }
    else if (widget.widgetType === AjfWidgetType.DynamicTable) {
        const tdw = widget;
        const tdwi = wi;
        tdwi.dataset = tdw.dataset.map((cell) => {
            return cell.formula instanceof Array
                ? cell.formula.map(f => trFormula(f, context, ts))
                : trFormula(cell.formula, context, ts);
        });
        tdwi.exportable =
            tdw.exportable && (tdw.exportable === true || tdw.exportable === 'true') ? true : false;
        let dataset = evaluateExpression(tdw.rowDefinition.formula, context) || [];
        dataset = (dataset || []).map((row) => row.map(cell => {
            let trf = cell.value;
            try {
                if (trf instanceof Array) {
                    trf = trf.map(v => v != null && typeof v === 'string' && v.trim().length > 0 ? ts.translate(v) : v);
                }
                else {
                    trf =
                        trf != null && typeof trf === 'string' && trf.trim().length > 0
                            ? ts.translate(trf)
                            : trf;
                }
            }
            catch (_e) { }
            return { ...cell, value: trf };
        }));
        const header = (tdw.dataset || []).map(cell => {
            let evf = '';
            try {
                evf =
                    cell.formula instanceof Array
                        ? cell.formula.map(f => trFormula(f, context, ts))
                        : trFormula(cell.formula, context, ts);
            }
            catch (_e) { }
            return {
                value: evf,
                style: { ...tdw.cellStyles, ...cell.style },
                rowspan: cell.rowspan,
                colspan: cell.colspan,
            };
        });
        tdwi.data = header.length === 0 ? [...dataset] : [[...header], ...dataset];
    }
    else if (widget.widgetType === AjfWidgetType.Image) {
        const iw = widget;
        const iwi = wi;
        if (iw.flag) {
            iwi.flag = evaluateExpression(iw.flag.formula, context);
        }
        if (iw.icon) {
            iwi.icon = evaluateExpression(iw.icon.formula, context);
        }
        if (iw.url) {
            iwi.url = evaluateExpression(iw.url.formula, context);
        }
    }
    else if (widget.widgetType === AjfWidgetType.ImageContainer) {
        const icw = widget;
        const icwi = wi;
        if (icw.flags) {
            icwi.flags =
                icw.flags instanceof Array
                    ? icw.flags.map(f => evaluateExpression(f.formula, context))
                    : evaluateExpression(icw.flags.formula, context);
        }
        if (icw.icons) {
            icwi.icons =
                icw.icons instanceof Array
                    ? icw.icons.map(f => evaluateExpression(f.formula, context))
                    : evaluateExpression(icw.icons.formula, context);
        }
        if (icw.urls) {
            icwi.urls =
                icw.urls instanceof Array
                    ? icw.urls.map(f => evaluateExpression(f.formula, context))
                    : evaluateExpression(icw.urls.formula, context);
        }
    }
    else if (widget.widgetType === AjfWidgetType.Text) {
        const tew = widget;
        const tewi = wi;
        const formulaRegEx = /\[{2}(.+?)\]{2}/g;
        const matches = [];
        let match;
        let htmlText = tew.htmlText;
        while ((match = formulaRegEx.exec(htmlText))) {
            const idx = match.index;
            const len = match[0].length;
            const formula = createFormula({ formula: match[1] });
            matches.push({ idx, len, formula });
        }
        matches.reverse().forEach(m => {
            let calcValue;
            try {
                calcValue = evaluateExpression(m.formula.formula, context);
            }
            catch (e) {
                calcValue = '';
            }
            htmlText = `${htmlText.substr(0, m.idx)}${calcValue}${htmlText.substr(m.idx + m.len)}`;
        });
        tewi.htmlText = htmlText != null && htmlText.length > 0 ? ts.translate(htmlText) : htmlText;
    }
    else if (widget.widgetType === AjfWidgetType.Formula) {
        const fw = widget;
        const fwi = wi;
        fwi.formula = evaluateExpression(fw.formula.formula, context);
    }
    else if (widget.widgetType === AjfWidgetType.Map) {
        const mw = widget;
        const mwi = wi;
        mwi.coordinate = evaluateExpression(mw.coordinate.formula, context);
    }
    else if (widget.widgetType > 100) {
        const iiFn = componentsMap[widget.widgetType] != null
            ? componentsMap[widget.widgetType].initInstance
            : null;
        if (iiFn != null) {
            return iiFn(wi, context, ts);
        }
    }
    return wi;
}
//# sourceMappingURL=data:application/json;base64,