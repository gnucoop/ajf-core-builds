/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { evaluateExpression } from '@ajf/core/models';
import { deepCopy } from '@ajf/core/utils';
import { chartToChartJsType } from '../../chart-utils';
import { evaluateAggregation } from '../aggregation/evaluate-aggregation';
import { isChartWidget } from '../widgets/is-chart-widget';
import { isDynamicTableWidget } from '../widgets/is-dynamic-table-widget';
import { isFormulaWidget } from '../widgets/is-formula-widget';
import { isGraphWidget } from '../widgets/is-graph-widget';
import { isImageContainerWidget } from '../widgets/is-image-container-widget';
import { isImageWidget } from '../widgets/is-image-widget';
import { isMapWidget } from '../widgets/is-map-widget';
import { isWidgetWithContent } from '../widgets/is-widget-with-content';
import { isTableWidget } from '../widgets/is-table-widget';
import { isTextWidget } from '../widgets/is-text-widget';
import { componentsMap } from '../widgets/widgets-map';
import { isChartWidgetInstance } from '../widgets-instances/is-chart-widget-instance';
import { isDynamicTableWidgetInstance } from '../widgets-instances/is-dynamic-table-widget-instance';
import { isFormulaWidgetInstance } from '../widgets-instances/is-formula-widget-instance';
import { isGraphWidgetInstance } from '../widgets-instances/is-graph-widget-instance';
import { isImageContainerWidgetInstance } from '../widgets-instances/is-image-container-widget-instance';
import { isImageWidgetInstance } from '../widgets-instances/is-image-widget-instance';
import { isMapWidgetInstance } from '../widgets-instances/is-map-widget-instance';
import { isTableWidgetInstance } from '../widgets-instances/is-table-widget-instance';
import { isTextWidgetInstance } from '../widgets-instances/is-text-widget-instance';
import { isWidgetWithContentInstance } from '../widgets-instances/is-widget-with-content-instance';
import { createWidgetInstance } from './create-widget-instance';
import { evaluateProperty, trFormula } from './widget-instance-utils';
export function widgetToWidgetInstance(widget, context, ts, variables = []) {
    const wi = createWidgetInstance(widget, context, ts, variables);
    if (isWidgetWithContent(widget) && isWidgetWithContentInstance(wi)) {
        let content = [];
        widget.content.forEach(c => {
            if (widget.repetitions != null) {
                wi.repetitions = evaluateExpression(widget.repetitions.formula, context);
                if (typeof wi.repetitions === 'number' && wi.repetitions > 0) {
                    for (let i = 0; i < wi.repetitions; i++) {
                        content.push(widgetToWidgetInstance(c, { ...context, '$repetition': i }, ts, variables));
                    }
                }
            }
            else {
                content.push(widgetToWidgetInstance(c, context, ts, variables));
            }
            wi.content = content;
        });
    }
    else if (isChartWidget(widget) && isChartWidgetInstance(wi)) {
        if (widget.options == null) {
            widget.options = {};
        }
        const labels = widget.labels instanceof Array ? widget.labels : [widget.labels];
        const evLabels = labels.map(l => {
            let evf = evaluateExpression(l.formula, context);
            try {
                if (evf instanceof Array) {
                    evf = evf.map(v => v != null && typeof v === 'string' && v.trim().length > 0 ? ts.translate(v) : v);
                }
                else {
                    evf =
                        evf != null && typeof evf === 'string' && evf.trim().length > 0
                            ? ts.translate(evf)
                            : evf;
                }
            }
            catch (_e) { }
            return evf;
        });
        wi.labels = widget.labels instanceof Array ? evLabels : evLabels[0];
        wi.datasets = widget.dataset.map(d => {
            let ds = {
                ...(d.options || {}),
                data: evaluateAggregation(d.aggregation, d.formula, context),
            };
            if (d.chartType != null) {
                const ct = chartToChartJsType(d.chartType);
                ds = { ...ds, chartType: ct, type: ct };
            }
            if (d.options != null) {
                ds = { ...ds, options: d.options };
            }
            if (d.label != null) {
                ds = { ...ds, label: d.label.trim().length > 0 ? ts.translate(d.label) : d.label };
            }
            if (d.datalabels != null) {
                ds.datalabels = deepCopy(d.datalabels);
            }
            return ds;
        });
        wi.data = { labels: wi.labels, datasets: wi.datasets };
        wi.chartType = chartToChartJsType(widget.type || widget.chartType);
        wi.exportable =
            widget.exportable && (widget.exportable === true || widget.exportable === 'true')
                ? true
                : false;
        if (widget.options != null && widget.options.plugins != null) {
            const plugins = widget.options.plugins;
            const pluginNames = Object.keys(plugins);
            pluginNames.forEach(pluginName => {
                const plugin = plugins[pluginName];
                const pluginOptions = Object.keys(plugin);
                pluginOptions.forEach((pluginOptionName) => {
                    const pluginOption = plugin[pluginOptionName];
                    if (typeof pluginOption !== 'string' &&
                        pluginOption != null &&
                        pluginOption.formula != null) {
                        plugin[pluginOptionName] = evaluateExpression(pluginOption.formula, context);
                    }
                });
            });
        }
    }
    else if (isTableWidget(widget) && isTableWidgetInstance(wi)) {
        wi.dataset = widget.dataset.map(row => row.map(cell => {
            return cell.formula instanceof Array
                ? cell.formula.map(f => trFormula(f, context, ts))
                : trFormula(cell.formula, context, ts);
        }));
        wi.exportable =
            widget.exportable && (widget.exportable === true || widget.exportable === 'true')
                ? true
                : false;
        wi.data = (widget.dataset || []).map(row => row.map(cell => {
            let evf = '';
            try {
                evf =
                    cell.formula instanceof Array
                        ? cell.formula.map(f => trFormula(f, context, ts))
                        : trFormula(cell.formula, context, ts);
            }
            catch (_e) { }
            return {
                value: evf,
                style: { ...widget.cellStyles, ...cell.style },
                rowspan: cell.rowspan,
                colspan: cell.colspan,
            };
        }));
    }
    else if (isDynamicTableWidget(widget) && isDynamicTableWidgetInstance(wi)) {
        wi.dataset = widget.dataset.map((cell) => {
            return cell.formula instanceof Array
                ? cell.formula.map(f => trFormula(f, context, ts))
                : trFormula(cell.formula, context, ts);
        });
        wi.exportable =
            widget.exportable && (widget.exportable === true || widget.exportable === 'true')
                ? true
                : false;
        let dataset = evaluateExpression(widget.rowDefinition.formula, context) || [];
        dataset = (dataset || []).map((row) => row.map(cell => {
            let trf = cell.value;
            try {
                if (trf instanceof Array) {
                    trf = trf.map(v => v != null && typeof v === 'string' && v.trim().length > 0 ? ts.translate(v) : v);
                }
                else {
                    trf =
                        trf != null && typeof trf === 'string' && trf.trim().length > 0
                            ? ts.translate(trf)
                            : trf;
                }
            }
            catch (_e) { }
            return { ...cell, value: trf };
        }));
        const header = (widget.dataset || []).map(cell => {
            let evf = '';
            try {
                evf =
                    cell.formula instanceof Array
                        ? cell.formula.map(f => trFormula(f, context, ts))
                        : trFormula(cell.formula, context, ts);
            }
            catch (_e) { }
            return {
                value: evf,
                style: { ...widget.cellStyles, ...cell.style },
                rowspan: cell.rowspan,
                colspan: cell.colspan,
            };
        });
        wi.data = header.length === 0 ? [...dataset] : [[...header], ...dataset];
    }
    else if (isImageWidget(widget) && isImageWidgetInstance(wi)) {
        if (widget.flag) {
            wi.flag = evaluateExpression(widget.flag.formula, context);
        }
        if (widget.icon) {
            wi.icon = evaluateExpression(widget.icon.formula, context);
        }
        if (widget.url) {
            wi.url = evaluateExpression(widget.url.formula, context);
        }
    }
    else if (isImageContainerWidget(widget) && isImageContainerWidgetInstance(wi)) {
        if (widget.flags) {
            wi.flags =
                widget.flags instanceof Array
                    ? widget.flags.map(f => evaluateExpression(f.formula, context))
                    : evaluateExpression(widget.flags.formula, context);
        }
        if (widget.icons) {
            wi.icons =
                widget.icons instanceof Array
                    ? widget.icons.map(f => evaluateExpression(f.formula, context))
                    : evaluateExpression(widget.icons.formula, context);
        }
        if (widget.urls) {
            wi.urls =
                widget.urls instanceof Array
                    ? widget.urls.map(f => evaluateExpression(f.formula, context))
                    : evaluateExpression(widget.urls.formula, context);
        }
    }
    else if (isTextWidget(widget) && isTextWidgetInstance(wi)) {
        wi.htmlText = evaluateProperty(widget.htmlText, context, ts);
    }
    else if (isFormulaWidget(widget) && isFormulaWidgetInstance(wi)) {
        wi.formula = evaluateExpression(widget.formula.formula, context);
    }
    else if (isMapWidget(widget) && isMapWidgetInstance(wi)) {
        wi.coordinate = evaluateExpression(widget.coordinate.formula, context);
    }
    else if (isGraphWidget(widget) && isGraphWidgetInstance(wi)) {
        if (widget.nodes != null) {
            wi.nodes = widget.nodes.map(ds => {
                let node = {
                    ...ds,
                };
                node.label = ds.label != null ? evaluateProperty(ds.label, context, ts) : ds.id;
                node.red = evaluateExpression(ds.red, context);
                node.yellow = evaluateExpression(ds.yellow, context);
                node.green = evaluateExpression(ds.green, context);
                node.color = ds.color ? evaluateExpression(ds.color, context) : undefined;
                return node;
            });
        }
    }
    else if (widget.widgetType > 100) {
        const iiFn = componentsMap[widget.widgetType] != null
            ? componentsMap[widget.widgetType].initInstance
            : null;
        if (iiFn != null) {
            return iiFn(wi, context, ts);
        }
    }
    return wi;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LXRvLXdpZGdldC1pbnN0YW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvcmVwb3J0cy9zcmMvdXRpbHMvd2lkZ2V0cy1pbnN0YW5jZXMvd2lkZ2V0LXRvLXdpZGdldC1pbnN0YW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFFSCxPQUFPLEVBQWEsa0JBQWtCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUdoRSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFFekMsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFLckQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFDeEUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ3pELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQ3hFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUM3RCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDekQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFDNUUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ3pELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUN0RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDekQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVB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Q0FBQyxNQUFNLEdBQUcsa0JBQWtCLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDckQsSUFBSSxDQUFDLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUNuRCxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztnQkFDMUUsT0FBTyxJQUFvQixDQUFDO1lBQzlCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7S0FDRjtTQUFNLElBQUksTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLEVBQUU7UUFDbEMsTUFBTSxJQUFJLEdBQ1IsYUFBYSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJO1lBQ3RDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFlBQVk7WUFDL0MsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNYLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtZQUNoQixPQUFPLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQzlCO0tBQ0Y7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKEMpIEdudWNvb3Agc29jLiBjb29wLlxuICpcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXNcbiAqIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLFxuICogb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVSBBZmZlcm9cbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqIElmIG5vdCwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8uXG4gKlxuICovXG5cbmltcG9ydCB7QWpmQ29udGV4dCwgZXZhbHVhdGVFeHByZXNzaW9ufSBmcm9tICdAYWpmL2NvcmUvbW9kZWxzJztcbmltcG9ydCB7QWpmVGFibGVDZWxsfSBmcm9tICdAYWpmL2NvcmUvdGFibGUnO1xuaW1wb3J0IHtUcmFuc2xvY29TZXJ2aWNlfSBmcm9tICdAYWpmL2NvcmUvdHJhbnNsb2NvJztcbmltcG9ydCB7ZGVlcENvcHl9IGZyb20gJ0BhamYvY29yZS91dGlscyc7XG5cbmltcG9ydCB7Y2hhcnRUb0NoYXJ0SnNUeXBlfSBmcm9tICcuLi8uLi9jaGFydC11dGlscyc7XG5pbXBvcnQge0FqZlRhYmxlRGF0YXNldH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL2RhdGFzZXQvdGFibGUtZGF0YXNldCc7XG5pbXBvcnQge0FqZlJlcG9ydFZhcmlhYmxlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2UvcmVwb3J0cy9yZXBvcnQtdmFyaWFibGUnO1xuaW1wb3J0IHtBamZXaWRnZXRJbnN0YW5jZX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL3dpZGdldHMtaW5zdGFuY2VzL3dpZGdldC1pbnN0YW5jZSc7XG5pbXBvcnQge0FqZldpZGdldH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL3dpZGdldHMvd2lkZ2V0JztcbmltcG9ydCB7ZXZhbHVhdGVBZ2dyZWdhdGlvbn0gZnJvbSAnLi4vYWdncmVnYXRpb24vZXZhbHVhdGUtYWdncmVnYXRpb24nO1xuaW1wb3J0IHtpc0NoYXJ0V2lkZ2V0fSBmcm9tICcuLi93aWRnZXRzL2lzLWNoYXJ0LXdpZGdldCc7XG5pbXBvcnQge2lzRHluYW1pY1RhYmxlV2lkZ2V0fSBmcm9tICcuLi93aWRnZXRzL2lzLWR5bmFtaWMtdGFibGUtd2lkZ2V0JztcbmltcG9ydCB7aXNGb3JtdWxhV2lkZ2V0fSBmcm9tICcuLi93aWRnZXRzL2lzLWZvcm11bGEtd2lkZ2V0JztcbmltcG9ydCB7aXNHcmFwaFdpZGdldH0gZnJvbSAnLi4vd2lkZ2V0cy9pcy1ncmFwaC13aWRnZXQnO1xuaW1wb3J0IHtpc0ltYWdlQ29udGFpbmVyV2lkZ2V0fSBmcm9tICcuLi93aWRnZXRzL2lzLWltYWdlLWNvbnRhaW5lci13aWRnZXQnO1xuaW1wb3J0IHtpc0ltYWdlV2lkZ2V0fSBmcm9tICcuLi93aWRnZXRzL2lzLWltYWdlLXdpZGdldCc7XG5pbXBvcnQge2lzTWFwV2lkZ2V0fSBmcm9tICcuLi93aWRnZXRzL2lzLW1hcC13aWRnZXQnO1xuaW1wb3J0IHtpc1dpZGdldFdpdGhDb250ZW50fSBmcm9tICcuLi93aWRnZXRzL2lzLXdpZGdldC13aXRoLWNvbnRlbnQnO1xuaW1wb3J0IHtpc1RhYmxlV2lkZ2V0fSBmcm9tICcuLi93aWRnZXRzL2lzLXRhYmxlLXdpZGdldCc7XG5pbXBvcnQge2lzVGV4dFdpZGdldH0gZnJvbSAnLi4vd2lkZ2V0cy9pcy10ZXh0LXdpZGdldCc7XG5pbXBvcnQge2NvbXBvbmVudHNNYXB9IGZyb20gJy4uL3dpZGdldHMvd2lkZ2V0cy1tYXAnO1xuaW1wb3J0IHtpc0NoYXJ0V2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4uL3dpZGdldHMtaW5zdGFuY2VzL2lzLWNoYXJ0LXdpZGdldC1pbnN0YW5jZSc7XG5pbXBvcnQge2lzRHluYW1pY1RhYmxlV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4uL3dpZGdldHMtaW5zdGFuY2VzL2lzLWR5bmFtaWMtdGFibGUtd2lkZ2V0LWluc3RhbmNlJztcbmltcG9ydCB7aXNGb3JtdWxhV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4uL3dpZGdldHMtaW5zdGFuY2VzL2lzLWZvcm11bGEtd2lkZ2V0LWluc3RhbmNlJztcbmltcG9ydCB7aXNHcmFwaFdpZGdldEluc3RhbmNlfSBmcm9tICcuLi93aWRnZXRzLWluc3RhbmNlcy9pcy1ncmFwaC13aWRnZXQtaW5zdGFuY2UnO1xuaW1wb3J0IHtpc0ltYWdlQ29udGFpbmVyV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4uL3dpZGdldHMtaW5zdGFuY2VzL2lzLWltYWdlLWNvbnRhaW5lci13aWRnZXQtaW5zdGFuY2UnO1xuaW1wb3J0IHtpc0ltYWdlV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4uL3dpZGdldHMtaW5zdGFuY2VzL2lzLWltYWdlLXdpZGdldC1pbnN0YW5jZSc7XG5pbXBvcnQge2lzTWFwV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4uL3dpZGdldHMtaW5zdGFuY2VzL2lzLW1hcC13aWRnZXQtaW5zdGFuY2UnO1xuaW1wb3J0IHtpc1RhYmxlV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4uL3dpZGdldHMtaW5zdGFuY2VzL2lzLXRhYmxlLXdpZGdldC1pbnN0YW5jZSc7XG5pbXBvcnQge2lzVGV4dFdpZGdldEluc3RhbmNlfSBmcm9tICcuLi93aWRnZXRzLWluc3RhbmNlcy9pcy10ZXh0LXdpZGdldC1pbnN0YW5jZSc7XG5pbXBvcnQge2lzV2lkZ2V0V2l0aENvbnRlbnRJbnN0YW5jZX0gZnJvbSAnLi4vd2lkZ2V0cy1pbnN0YW5jZXMvaXMtd2lkZ2V0LXdpdGgtY29udGVudC1pbnN0YW5jZSc7XG5cbmltcG9ydCB7Y3JlYXRlV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4vY3JlYXRlLXdpZGdldC1pbnN0YW5jZSc7XG5pbXBvcnQge2V2YWx1YXRlUHJvcGVydHksIHRyRm9ybXVsYX0gZnJvbSAnLi93aWRnZXQtaW5zdGFuY2UtdXRpbHMnO1xuaW1wb3J0IHtBamZHcmFwaE5vZGV9IGZyb20gJ0BhamYvY29yZS9ncmFwaCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aWRnZXRUb1dpZGdldEluc3RhbmNlKFxuICB3aWRnZXQ6IEFqZldpZGdldCxcbiAgY29udGV4dDogQWpmQ29udGV4dCxcbiAgdHM6IFRyYW5zbG9jb1NlcnZpY2UsXG4gIHZhcmlhYmxlczogQWpmUmVwb3J0VmFyaWFibGVbXSA9IFtdLFxuKTogQWpmV2lkZ2V0SW5zdGFuY2Uge1xuICBjb25zdCB3aSA9IGNyZWF0ZVdpZGdldEluc3RhbmNlKHdpZGdldCwgY29udGV4dCwgdHMsIHZhcmlhYmxlcyk7XG5cbiAgaWYgKGlzV2lkZ2V0V2l0aENvbnRlbnQod2lkZ2V0KSAmJiBpc1dpZGdldFdpdGhDb250ZW50SW5zdGFuY2Uod2kpKSB7XG4gICAgbGV0IGNvbnRlbnQ6IEFqZldpZGdldEluc3RhbmNlW10gPSBbXTtcbiAgICB3aWRnZXQuY29udGVudC5mb3JFYWNoKGMgPT4ge1xuICAgICAgaWYgKHdpZGdldC5yZXBldGl0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgIHdpLnJlcGV0aXRpb25zID0gZXZhbHVhdGVFeHByZXNzaW9uKHdpZGdldC5yZXBldGl0aW9ucy5mb3JtdWxhLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aS5yZXBldGl0aW9ucyA9PT0gJ251bWJlcicgJiYgd2kucmVwZXRpdGlvbnMgPiAwKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3aS5yZXBldGl0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICBjb250ZW50LnB1c2god2lkZ2V0VG9XaWRnZXRJbnN0YW5jZShjLCB7Li4uY29udGV4dCwgJyRyZXBldGl0aW9uJzogaX0sIHRzLCB2YXJpYWJsZXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnQucHVzaCh3aWRnZXRUb1dpZGdldEluc3RhbmNlKGMsIGNvbnRleHQsIHRzLCB2YXJpYWJsZXMpKTtcbiAgICAgIH1cbiAgICAgIHdpLmNvbnRlbnQgPSBjb250ZW50O1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzQ2hhcnRXaWRnZXQod2lkZ2V0KSAmJiBpc0NoYXJ0V2lkZ2V0SW5zdGFuY2Uod2kpKSB7XG4gICAgaWYgKHdpZGdldC5vcHRpb25zID09IG51bGwpIHtcbiAgICAgIHdpZGdldC5vcHRpb25zID0ge307XG4gICAgfVxuICAgIGNvbnN0IGxhYmVscyA9IHdpZGdldC5sYWJlbHMgaW5zdGFuY2VvZiBBcnJheSA/IHdpZGdldC5sYWJlbHMgOiBbd2lkZ2V0LmxhYmVsc107XG4gICAgY29uc3QgZXZMYWJlbHMgPSBsYWJlbHMubWFwKGwgPT4ge1xuICAgICAgbGV0IGV2ZiA9IGV2YWx1YXRlRXhwcmVzc2lvbihsLmZvcm11bGEsIGNvbnRleHQpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGV2ZiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgZXZmID0gZXZmLm1hcCh2ID0+XG4gICAgICAgICAgICB2ICE9IG51bGwgJiYgdHlwZW9mIHYgPT09ICdzdHJpbmcnICYmIHYudHJpbSgpLmxlbmd0aCA+IDAgPyB0cy50cmFuc2xhdGUodikgOiB2LFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXZmID1cbiAgICAgICAgICAgIGV2ZiAhPSBudWxsICYmIHR5cGVvZiBldmYgPT09ICdzdHJpbmcnICYmIGV2Zi50cmltKCkubGVuZ3RoID4gMFxuICAgICAgICAgICAgICA/IHRzLnRyYW5zbGF0ZShldmYpXG4gICAgICAgICAgICAgIDogZXZmO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChfZSkge31cbiAgICAgIHJldHVybiBldmY7XG4gICAgfSk7XG4gICAgd2kubGFiZWxzID0gd2lkZ2V0LmxhYmVscyBpbnN0YW5jZW9mIEFycmF5ID8gZXZMYWJlbHMgOiBldkxhYmVsc1swXTtcbiAgICB3aS5kYXRhc2V0cyA9IHdpZGdldC5kYXRhc2V0Lm1hcChkID0+IHtcbiAgICAgIGxldCBkczogYW55ID0ge1xuICAgICAgICAuLi4oZC5vcHRpb25zIHx8IHt9KSxcbiAgICAgICAgZGF0YTogZXZhbHVhdGVBZ2dyZWdhdGlvbihkLmFnZ3JlZ2F0aW9uLCBkLmZvcm11bGEsIGNvbnRleHQpLFxuICAgICAgfTtcbiAgICAgIGlmIChkLmNoYXJ0VHlwZSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGN0ID0gY2hhcnRUb0NoYXJ0SnNUeXBlKGQuY2hhcnRUeXBlKTtcbiAgICAgICAgZHMgPSB7Li4uZHMsIGNoYXJ0VHlwZTogY3QsIHR5cGU6IGN0fTtcbiAgICAgIH1cbiAgICAgIGlmIChkLm9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgICBkcyA9IHsuLi5kcywgb3B0aW9uczogZC5vcHRpb25zfTtcbiAgICAgIH1cbiAgICAgIGlmIChkLmxhYmVsICE9IG51bGwpIHtcbiAgICAgICAgZHMgPSB7Li4uZHMsIGxhYmVsOiBkLmxhYmVsLnRyaW0oKS5sZW5ndGggPiAwID8gdHMudHJhbnNsYXRlKGQubGFiZWwpIDogZC5sYWJlbH07XG4gICAgICB9XG4gICAgICBpZiAoZC5kYXRhbGFiZWxzICE9IG51bGwpIHtcbiAgICAgICAgZHMuZGF0YWxhYmVscyA9IGRlZXBDb3B5KGQuZGF0YWxhYmVscyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZHM7XG4gICAgfSk7XG4gICAgd2kuZGF0YSA9IHtsYWJlbHM6IHdpLmxhYmVscywgZGF0YXNldHM6IHdpLmRhdGFzZXRzfTtcbiAgICB3aS5jaGFydFR5cGUgPSBjaGFydFRvQ2hhcnRKc1R5cGUod2lkZ2V0LnR5cGUgfHwgd2lkZ2V0LmNoYXJ0VHlwZSk7XG4gICAgd2kuZXhwb3J0YWJsZSA9XG4gICAgICB3aWRnZXQuZXhwb3J0YWJsZSAmJiAod2lkZ2V0LmV4cG9ydGFibGUgPT09IHRydWUgfHwgd2lkZ2V0LmV4cG9ydGFibGUgPT09ICd0cnVlJylcbiAgICAgICAgPyB0cnVlXG4gICAgICAgIDogZmFsc2U7XG4gICAgaWYgKHdpZGdldC5vcHRpb25zICE9IG51bGwgJiYgd2lkZ2V0Lm9wdGlvbnMucGx1Z2lucyAhPSBudWxsKSB7XG4gICAgICBjb25zdCBwbHVnaW5zID0gd2lkZ2V0Lm9wdGlvbnMucGx1Z2lucztcbiAgICAgIGNvbnN0IHBsdWdpbk5hbWVzID0gT2JqZWN0LmtleXMocGx1Z2lucyk7XG4gICAgICBwbHVnaW5OYW1lcy5mb3JFYWNoKHBsdWdpbk5hbWUgPT4ge1xuICAgICAgICBjb25zdCBwbHVnaW4gPSBwbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgICAgICBjb25zdCBwbHVnaW5PcHRpb25zID0gT2JqZWN0LmtleXMocGx1Z2luKTtcbiAgICAgICAgcGx1Z2luT3B0aW9ucy5mb3JFYWNoKChwbHVnaW5PcHRpb25OYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBjb25zdCBwbHVnaW5PcHRpb24gPSBwbHVnaW5bcGx1Z2luT3B0aW9uTmFtZV07XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdHlwZW9mIHBsdWdpbk9wdGlvbiAhPT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIHBsdWdpbk9wdGlvbiAhPSBudWxsICYmXG4gICAgICAgICAgICBwbHVnaW5PcHRpb24uZm9ybXVsYSAhPSBudWxsXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBwbHVnaW5bcGx1Z2luT3B0aW9uTmFtZV0gPSBldmFsdWF0ZUV4cHJlc3Npb24ocGx1Z2luT3B0aW9uLmZvcm11bGEsIGNvbnRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNUYWJsZVdpZGdldCh3aWRnZXQpICYmIGlzVGFibGVXaWRnZXRJbnN0YW5jZSh3aSkpIHtcbiAgICB3aS5kYXRhc2V0ID0gd2lkZ2V0LmRhdGFzZXQubWFwKHJvdyA9PlxuICAgICAgcm93Lm1hcChjZWxsID0+IHtcbiAgICAgICAgcmV0dXJuIGNlbGwuZm9ybXVsYSBpbnN0YW5jZW9mIEFycmF5XG4gICAgICAgICAgPyBjZWxsLmZvcm11bGEubWFwKGYgPT4gdHJGb3JtdWxhKGYsIGNvbnRleHQsIHRzKSlcbiAgICAgICAgICA6IHRyRm9ybXVsYShjZWxsLmZvcm11bGEhLCBjb250ZXh0LCB0cyk7XG4gICAgICB9KSxcbiAgICApO1xuICAgIHdpLmV4cG9ydGFibGUgPVxuICAgICAgd2lkZ2V0LmV4cG9ydGFibGUgJiYgKHdpZGdldC5leHBvcnRhYmxlID09PSB0cnVlIHx8IHdpZGdldC5leHBvcnRhYmxlID09PSAndHJ1ZScpXG4gICAgICAgID8gdHJ1ZVxuICAgICAgICA6IGZhbHNlO1xuICAgIHdpLmRhdGEgPSAod2lkZ2V0LmRhdGFzZXQgfHwgW10pLm1hcChyb3cgPT5cbiAgICAgIHJvdy5tYXAoY2VsbCA9PiB7XG4gICAgICAgIGxldCBldmYgPSAnJztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBldmYgPVxuICAgICAgICAgICAgY2VsbC5mb3JtdWxhIGluc3RhbmNlb2YgQXJyYXlcbiAgICAgICAgICAgICAgPyBjZWxsLmZvcm11bGEubWFwKGYgPT4gdHJGb3JtdWxhKGYsIGNvbnRleHQsIHRzKSlcbiAgICAgICAgICAgICAgOiB0ckZvcm11bGEoY2VsbC5mb3JtdWxhISwgY29udGV4dCwgdHMpO1xuICAgICAgICB9IGNhdGNoIChfZSkge31cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogZXZmLFxuICAgICAgICAgIHN0eWxlOiB7Li4ud2lkZ2V0LmNlbGxTdHlsZXMsIC4uLmNlbGwuc3R5bGV9LFxuICAgICAgICAgIHJvd3NwYW46IGNlbGwucm93c3BhbixcbiAgICAgICAgICBjb2xzcGFuOiBjZWxsLmNvbHNwYW4sXG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzRHluYW1pY1RhYmxlV2lkZ2V0KHdpZGdldCkgJiYgaXNEeW5hbWljVGFibGVXaWRnZXRJbnN0YW5jZSh3aSkpIHtcbiAgICB3aS5kYXRhc2V0ID0gd2lkZ2V0LmRhdGFzZXQubWFwKChjZWxsOiBBamZUYWJsZURhdGFzZXQpID0+IHtcbiAgICAgIHJldHVybiBjZWxsLmZvcm11bGEgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICA/IGNlbGwuZm9ybXVsYS5tYXAoZiA9PiB0ckZvcm11bGEoZiwgY29udGV4dCwgdHMpKVxuICAgICAgICA6IHRyRm9ybXVsYShjZWxsLmZvcm11bGEhLCBjb250ZXh0LCB0cyk7XG4gICAgfSk7XG4gICAgd2kuZXhwb3J0YWJsZSA9XG4gICAgICB3aWRnZXQuZXhwb3J0YWJsZSAmJiAod2lkZ2V0LmV4cG9ydGFibGUgPT09IHRydWUgfHwgd2lkZ2V0LmV4cG9ydGFibGUgPT09ICd0cnVlJylcbiAgICAgICAgPyB0cnVlXG4gICAgICAgIDogZmFsc2U7XG5cbiAgICBsZXQgZGF0YXNldDogQWpmVGFibGVDZWxsW11bXSA9IGV2YWx1YXRlRXhwcmVzc2lvbih3aWRnZXQucm93RGVmaW5pdGlvbi5mb3JtdWxhLCBjb250ZXh0KSB8fCBbXTtcbiAgICBkYXRhc2V0ID0gKGRhdGFzZXQgfHwgW10pLm1hcCgocm93OiBBamZUYWJsZUNlbGxbXSkgPT5cbiAgICAgIHJvdy5tYXAoY2VsbCA9PiB7XG4gICAgICAgIGxldCB0cmYgPSBjZWxsLnZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICh0cmYgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgdHJmID0gdHJmLm1hcCh2ID0+XG4gICAgICAgICAgICAgIHYgIT0gbnVsbCAmJiB0eXBlb2YgdiA9PT0gJ3N0cmluZycgJiYgdi50cmltKCkubGVuZ3RoID4gMCA/IHRzLnRyYW5zbGF0ZSh2KSA6IHYsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmYgPVxuICAgICAgICAgICAgICB0cmYgIT0gbnVsbCAmJiB0eXBlb2YgdHJmID09PSAnc3RyaW5nJyAmJiB0cmYudHJpbSgpLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IHRzLnRyYW5zbGF0ZSh0cmYpXG4gICAgICAgICAgICAgICAgOiB0cmY7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChfZSkge31cbiAgICAgICAgcmV0dXJuIHsuLi5jZWxsLCB2YWx1ZTogdHJmfTtcbiAgICAgIH0pLFxuICAgICk7XG5cbiAgICBjb25zdCBoZWFkZXIgPSAod2lkZ2V0LmRhdGFzZXQgfHwgW10pLm1hcChjZWxsID0+IHtcbiAgICAgIGxldCBldmYgPSAnJztcbiAgICAgIHRyeSB7XG4gICAgICAgIGV2ZiA9XG4gICAgICAgICAgY2VsbC5mb3JtdWxhIGluc3RhbmNlb2YgQXJyYXlcbiAgICAgICAgICAgID8gY2VsbC5mb3JtdWxhLm1hcChmID0+IHRyRm9ybXVsYShmLCBjb250ZXh0LCB0cykpXG4gICAgICAgICAgICA6IHRyRm9ybXVsYShjZWxsLmZvcm11bGEsIGNvbnRleHQsIHRzKTtcbiAgICAgIH0gY2F0Y2ggKF9lKSB7fVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IGV2ZixcbiAgICAgICAgc3R5bGU6IHsuLi53aWRnZXQuY2VsbFN0eWxlcywgLi4uY2VsbC5zdHlsZX0sXG4gICAgICAgIHJvd3NwYW46IGNlbGwucm93c3BhbixcbiAgICAgICAgY29sc3BhbjogY2VsbC5jb2xzcGFuLFxuICAgICAgfTtcbiAgICB9KTtcbiAgICB3aS5kYXRhID0gaGVhZGVyLmxlbmd0aCA9PT0gMCA/IFsuLi5kYXRhc2V0XSA6IFtbLi4uaGVhZGVyXSwgLi4uZGF0YXNldF07XG4gIH0gZWxzZSBpZiAoaXNJbWFnZVdpZGdldCh3aWRnZXQpICYmIGlzSW1hZ2VXaWRnZXRJbnN0YW5jZSh3aSkpIHtcbiAgICBpZiAod2lkZ2V0LmZsYWcpIHtcbiAgICAgIHdpLmZsYWcgPSBldmFsdWF0ZUV4cHJlc3Npb24od2lkZ2V0LmZsYWcuZm9ybXVsYSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmICh3aWRnZXQuaWNvbikge1xuICAgICAgd2kuaWNvbiA9IGV2YWx1YXRlRXhwcmVzc2lvbih3aWRnZXQuaWNvbi5mb3JtdWxhLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKHdpZGdldC51cmwpIHtcbiAgICAgIHdpLnVybCA9IGV2YWx1YXRlRXhwcmVzc2lvbih3aWRnZXQudXJsLmZvcm11bGEsIGNvbnRleHQpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0ltYWdlQ29udGFpbmVyV2lkZ2V0KHdpZGdldCkgJiYgaXNJbWFnZUNvbnRhaW5lcldpZGdldEluc3RhbmNlKHdpKSkge1xuICAgIGlmICh3aWRnZXQuZmxhZ3MpIHtcbiAgICAgIHdpLmZsYWdzID1cbiAgICAgICAgd2lkZ2V0LmZsYWdzIGluc3RhbmNlb2YgQXJyYXlcbiAgICAgICAgICA/IHdpZGdldC5mbGFncy5tYXAoZiA9PiBldmFsdWF0ZUV4cHJlc3Npb24oZi5mb3JtdWxhLCBjb250ZXh0KSlcbiAgICAgICAgICA6IGV2YWx1YXRlRXhwcmVzc2lvbih3aWRnZXQuZmxhZ3MuZm9ybXVsYSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmICh3aWRnZXQuaWNvbnMpIHtcbiAgICAgIHdpLmljb25zID1cbiAgICAgICAgd2lkZ2V0Lmljb25zIGluc3RhbmNlb2YgQXJyYXlcbiAgICAgICAgICA/IHdpZGdldC5pY29ucy5tYXAoZiA9PiBldmFsdWF0ZUV4cHJlc3Npb24oZi5mb3JtdWxhLCBjb250ZXh0KSlcbiAgICAgICAgICA6IGV2YWx1YXRlRXhwcmVzc2lvbih3aWRnZXQuaWNvbnMuZm9ybXVsYSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmICh3aWRnZXQudXJscykge1xuICAgICAgd2kudXJscyA9XG4gICAgICAgIHdpZGdldC51cmxzIGluc3RhbmNlb2YgQXJyYXlcbiAgICAgICAgICA/IHdpZGdldC51cmxzLm1hcChmID0+IGV2YWx1YXRlRXhwcmVzc2lvbihmLmZvcm11bGEsIGNvbnRleHQpKVxuICAgICAgICAgIDogZXZhbHVhdGVFeHByZXNzaW9uKHdpZGdldC51cmxzLmZvcm11bGEsIGNvbnRleHQpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1RleHRXaWRnZXQod2lkZ2V0KSAmJiBpc1RleHRXaWRnZXRJbnN0YW5jZSh3aSkpIHtcbiAgICB3aS5odG1sVGV4dCA9IGV2YWx1YXRlUHJvcGVydHkod2lkZ2V0Lmh0bWxUZXh0LCBjb250ZXh0LCB0cyk7XG4gIH0gZWxzZSBpZiAoaXNGb3JtdWxhV2lkZ2V0KHdpZGdldCkgJiYgaXNGb3JtdWxhV2lkZ2V0SW5zdGFuY2Uod2kpKSB7XG4gICAgd2kuZm9ybXVsYSA9IGV2YWx1YXRlRXhwcmVzc2lvbih3aWRnZXQuZm9ybXVsYS5mb3JtdWxhLCBjb250ZXh0KTtcbiAgfSBlbHNlIGlmIChpc01hcFdpZGdldCh3aWRnZXQpICYmIGlzTWFwV2lkZ2V0SW5zdGFuY2Uod2kpKSB7XG4gICAgd2kuY29vcmRpbmF0ZSA9IGV2YWx1YXRlRXhwcmVzc2lvbih3aWRnZXQuY29vcmRpbmF0ZS5mb3JtdWxhLCBjb250ZXh0KTtcbiAgfSBlbHNlIGlmIChpc0dyYXBoV2lkZ2V0KHdpZGdldCkgJiYgaXNHcmFwaFdpZGdldEluc3RhbmNlKHdpKSkge1xuICAgIGlmICh3aWRnZXQubm9kZXMgIT0gbnVsbCkge1xuICAgICAgd2kubm9kZXMgPSB3aWRnZXQubm9kZXMubWFwKGRzID0+IHtcbiAgICAgICAgbGV0IG5vZGU6IGFueSA9IHtcbiAgICAgICAgICAuLi5kcyxcbiAgICAgICAgfTtcbiAgICAgICAgbm9kZS5sYWJlbCA9IGRzLmxhYmVsICE9IG51bGwgPyBldmFsdWF0ZVByb3BlcnR5KGRzLmxhYmVsLCBjb250ZXh0LCB0cykgOiBkcy5pZDtcbiAgICAgICAgbm9kZS5yZWQgPSBldmFsdWF0ZUV4cHJlc3Npb24oZHMucmVkLCBjb250ZXh0KTtcbiAgICAgICAgbm9kZS55ZWxsb3cgPSBldmFsdWF0ZUV4cHJlc3Npb24oZHMueWVsbG93LCBjb250ZXh0KTtcbiAgICAgICAgbm9kZS5ncmVlbiA9IGV2YWx1YXRlRXhwcmVzc2lvbihkcy5ncmVlbiwgY29udGV4dCk7XG4gICAgICAgIG5vZGUuY29sb3IgPSBkcy5jb2xvciA/IGV2YWx1YXRlRXhwcmVzc2lvbihkcy5jb2xvciwgY29udGV4dCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBub2RlIGFzIEFqZkdyYXBoTm9kZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIGlmICh3aWRnZXQud2lkZ2V0VHlwZSA+IDEwMCkge1xuICAgIGNvbnN0IGlpRm4gPVxuICAgICAgY29tcG9uZW50c01hcFt3aWRnZXQud2lkZ2V0VHlwZV0gIT0gbnVsbFxuICAgICAgICA/IGNvbXBvbmVudHNNYXBbd2lkZ2V0LndpZGdldFR5cGVdLmluaXRJbnN0YW5jZVxuICAgICAgICA6IG51bGw7XG4gICAgaWYgKGlpRm4gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGlpRm4od2ksIGNvbnRleHQsIHRzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHdpO1xufVxuIl19