/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { createFormula, evaluateExpression } from '@ajf/core/models';
import { deepCopy } from '@ajf/core/utils';
import { chartToChartJsType } from '../../chart-utils';
import { evaluateAggregation } from '../aggregation/evaluate-aggregation';
import { isChartWidget } from '../widgets/is-chart-widget';
import { isDynamicTableWidget } from '../widgets/is-dynamic-table-widget';
import { isFormulaWidget } from '../widgets/is-formula-widget';
import { isImageContainerWidget } from '../widgets/is-image-container-widget';
import { isImageWidget } from '../widgets/is-image-widget';
import { isMapWidget } from '../widgets/is-map-widget';
import { isWidgetWithContent } from '../widgets/is-widget-with-content';
import { isTableWidget } from '../widgets/is-table-widget';
import { isTextWidget } from '../widgets/is-text-widget';
import { componentsMap } from '../widgets/widgets-map';
import { isChartWidgetInstance } from '../widgets-instances/is-chart-widget-instance';
import { isDynamicTableWidgetInstance } from '../widgets-instances/is-dynamic-table-widget-instance';
import { isFormulaWidgetInstance } from '../widgets-instances/is-formula-widget-instance';
import { isImageContainerWidgetInstance } from '../widgets-instances/is-image-container-widget-instance';
import { isImageWidgetInstance } from '../widgets-instances/is-image-widget-instance';
import { isMapWidgetInstance } from '../widgets-instances/is-map-widget-instance';
import { isTableWidgetInstance } from '../widgets-instances/is-table-widget-instance';
import { isTextWidgetInstance } from '../widgets-instances/is-text-widget-instance';
import { isWidgetWithContentInstance } from '../widgets-instances/is-widget-with-content-instance';
import { createWidgetInstance } from './create-widget-instance';
import { trFormula } from './widget-instance-utils';
export function widgetToWidgetInstance(widget, context, ts, variables = []) {
    const wi = createWidgetInstance(widget, context, ts, variables);
    if (isWidgetWithContent(widget) && isWidgetWithContentInstance(wi)) {
        let content = [];
        widget.content.forEach(c => {
            if (widget.repetitions != null) {
                wi.repetitions = evaluateExpression(widget.repetitions.formula, context);
                if (typeof wi.repetitions === 'number' && wi.repetitions > 0) {
                    for (let i = 0; i < wi.repetitions; i++) {
                        content.push(widgetToWidgetInstance(c, { ...context, '$repetition': i }, ts, variables));
                    }
                }
            }
            else {
                content.push(widgetToWidgetInstance(c, context, ts, variables));
            }
            wi.content = content;
        });
    }
    else if (isChartWidget(widget) && isChartWidgetInstance(wi)) {
        if (widget.option == null) {
            widget.option = {};
        }
        const labels = widget.labels instanceof Array ? widget.labels : [widget.labels];
        const evLabels = labels.map(l => {
            let evf = evaluateExpression(l.formula, context);
            try {
                if (evf instanceof Array) {
                    evf = evf.map(v => v != null && typeof v === 'string' && v.trim().length > 0 ? ts.translate(v) : v);
                }
                else {
                    evf =
                        evf != null && typeof evf === 'string' && evf.trim().length > 0
                            ? ts.translate(evf)
                            : evf;
                }
            }
            catch (_e) { }
            return evf;
        });
        wi.labels = widget.labels instanceof Array ? evLabels : evLabels[0];
        wi.datasets = widget.dataset.map(d => {
            let ds = {
                ...(d.options || {}),
                data: evaluateAggregation(d.aggregation, d.formula, context),
            };
            if (d.chartType != null) {
                const ct = chartToChartJsType(d.chartType);
                ds = { ...ds, chartType: ct, type: ct };
            }
            if (d.options != null) {
                ds = { ...ds, options: d.options };
            }
            if (d.label != null) {
                ds = { ...ds, label: d.label.trim().length > 0 ? ts.translate(d.label) : d.label };
            }
            if (d.datalabels != null) {
                ds.datalabels = deepCopy(d.datalabels);
            }
            return ds;
        });
        wi.data = { labels: wi.labels, datasets: wi.datasets };
        wi.chartType = chartToChartJsType(widget.type || widget.chartType);
        wi.exportable =
            widget.exportable && (widget.exportable === true || widget.exportable === 'true')
                ? true
                : false;
        if (widget.options != null && widget.options.plugins != null) {
            const plugins = widget.options.plugins;
            const pluginNames = Object.keys(plugins);
            pluginNames.forEach(pluginName => {
                const plugin = plugins[pluginName];
                const pluginOptions = Object.keys(plugin);
                pluginOptions.forEach((pluginOptionName) => {
                    const pluginOption = plugin[pluginOptionName];
                    if (typeof pluginOption !== 'string' &&
                        pluginOption != null &&
                        pluginOption.formula != null) {
                        plugin[pluginOptionName] = evaluateExpression(pluginOption.formula, context);
                    }
                });
            });
        }
    }
    else if (isTableWidget(widget) && isTableWidgetInstance(wi)) {
        wi.dataset = widget.dataset.map(row => row.map(cell => {
            return cell.formula instanceof Array
                ? cell.formula.map(f => trFormula(f, context, ts))
                : trFormula(cell.formula, context, ts);
        }));
        wi.exportable =
            widget.exportable && (widget.exportable === true || widget.exportable === 'true')
                ? true
                : false;
        wi.data = (widget.dataset || []).map(row => row.map(cell => {
            let evf = '';
            try {
                evf =
                    cell.formula instanceof Array
                        ? cell.formula.map(f => trFormula(f, context, ts))
                        : trFormula(cell.formula, context, ts);
            }
            catch (_e) { }
            return {
                value: evf,
                style: { ...widget.cellStyles, ...cell.style },
                rowspan: cell.rowspan,
                colspan: cell.colspan,
            };
        }));
    }
    else if (isDynamicTableWidget(widget) && isDynamicTableWidgetInstance(wi)) {
        wi.dataset = widget.dataset.map((cell) => {
            return cell.formula instanceof Array
                ? cell.formula.map(f => trFormula(f, context, ts))
                : trFormula(cell.formula, context, ts);
        });
        wi.exportable =
            widget.exportable && (widget.exportable === true || widget.exportable === 'true')
                ? true
                : false;
        let dataset = evaluateExpression(widget.rowDefinition.formula, context) || [];
        dataset = (dataset || []).map((row) => row.map(cell => {
            let trf = cell.value;
            try {
                if (trf instanceof Array) {
                    trf = trf.map(v => v != null && typeof v === 'string' && v.trim().length > 0 ? ts.translate(v) : v);
                }
                else {
                    trf =
                        trf != null && typeof trf === 'string' && trf.trim().length > 0
                            ? ts.translate(trf)
                            : trf;
                }
            }
            catch (_e) { }
            return { ...cell, value: trf };
        }));
        const header = (widget.dataset || []).map(cell => {
            let evf = '';
            try {
                evf =
                    cell.formula instanceof Array
                        ? cell.formula.map(f => trFormula(f, context, ts))
                        : trFormula(cell.formula, context, ts);
            }
            catch (_e) { }
            return {
                value: evf,
                style: { ...widget.cellStyles, ...cell.style },
                rowspan: cell.rowspan,
                colspan: cell.colspan,
            };
        });
        wi.data = header.length === 0 ? [...dataset] : [[...header], ...dataset];
    }
    else if (isImageWidget(widget) && isImageWidgetInstance(wi)) {
        if (widget.flag) {
            wi.flag = evaluateExpression(widget.flag.formula, context);
        }
        if (widget.icon) {
            wi.icon = evaluateExpression(widget.icon.formula, context);
        }
        if (widget.url) {
            wi.url = evaluateExpression(widget.url.formula, context);
        }
    }
    else if (isImageContainerWidget(widget) && isImageContainerWidgetInstance(wi)) {
        if (widget.flags) {
            wi.flags =
                widget.flags instanceof Array
                    ? widget.flags.map(f => evaluateExpression(f.formula, context))
                    : evaluateExpression(widget.flags.formula, context);
        }
        if (widget.icons) {
            wi.icons =
                widget.icons instanceof Array
                    ? widget.icons.map(f => evaluateExpression(f.formula, context))
                    : evaluateExpression(widget.icons.formula, context);
        }
        if (widget.urls) {
            wi.urls =
                widget.urls instanceof Array
                    ? widget.urls.map(f => evaluateExpression(f.formula, context))
                    : evaluateExpression(widget.urls.formula, context);
        }
    }
    else if (isTextWidget(widget) && isTextWidgetInstance(wi)) {
        const formulaRegEx = /\[{2}(.+?)\]{2}/g;
        const matches = [];
        let match;
        let htmlText = widget.htmlText;
        while ((match = formulaRegEx.exec(htmlText))) {
            const idx = match.index;
            const len = match[0].length;
            const formula = createFormula({ formula: match[1] });
            matches.push({ idx, len, formula });
        }
        matches.reverse().forEach(m => {
            let calcValue;
            try {
                calcValue = evaluateExpression(m.formula.formula, context);
            }
            catch (e) {
                calcValue = '';
            }
            htmlText = `${htmlText.substring(0, m.idx)}${calcValue}${htmlText.substring(m.idx + m.len)}`;
        });
        wi.htmlText = htmlText != null && htmlText.length > 0 ? ts.translate(htmlText) : htmlText;
    }
    else if (isFormulaWidget(widget) && isFormulaWidgetInstance(wi)) {
        wi.formula = evaluateExpression(widget.formula.formula, context);
    }
    else if (isMapWidget(widget) && isMapWidgetInstance(wi)) {
        wi.coordinate = evaluateExpression(widget.coordinate.formula, context);
    }
    else if (widget.widgetType > 100) {
        const iiFn = componentsMap[widget.widgetType] != null
            ? componentsMap[widget.widgetType].initInstance
            : null;
        if (iiFn != null) {
            return iiFn(wi, context, ts);
        }
    }
    return wi;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LXRvLXdpZGdldC1pbnN0YW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvcmVwb3J0cy9zcmMvdXRpbHMvd2lkZ2V0cy1pbnN0YW5jZXMvd2lkZ2V0LXRvLXdpZGdldC1pbnN0YW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFFSCxPQUFPLEVBQXlCLGFBQWEsRUFBRSxrQkFBa0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRzNGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QyxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUtyRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUN4RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDekQsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQzdELE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQzVFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDdEUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ3pELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDckQsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sK0NBQStDLENBQUM7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Q0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0tBQzNGO1NBQU0sSUFBSSxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksdUJBQXVCLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDakUsRUFBRSxDQUFDLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNsRTtTQUFNLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ3pELEVBQUUsQ0FBQyxVQUFVLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDeEU7U0FBTSxJQUFJLE1BQU0sQ0FBQyxVQUFVLEdBQUcsR0FBRyxFQUFFO1FBQ2xDLE1BQU0sSUFBSSxHQUNSLGFBQWEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSTtZQUN0QyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxZQUFZO1lBQy9DLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDWCxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztTQUM5QjtLQUNGO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChDKSBHbnVjb29wIHNvYy4gY29vcC5cbiAqXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vclxuICogbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzXG4gKiBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSxcbiAqIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlUgQWZmZXJvXG4gKiBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKiBJZiBub3QsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvLlxuICpcbiAqL1xuXG5pbXBvcnQge0FqZkNvbnRleHQsIEFqZkZvcm11bGEsIGNyZWF0ZUZvcm11bGEsIGV2YWx1YXRlRXhwcmVzc2lvbn0gZnJvbSAnQGFqZi9jb3JlL21vZGVscyc7XG5pbXBvcnQge0FqZlRhYmxlQ2VsbH0gZnJvbSAnQGFqZi9jb3JlL3RhYmxlJztcbmltcG9ydCB7VHJhbnNsb2NvU2VydmljZX0gZnJvbSAnQGFqZi9jb3JlL3RyYW5zbG9jbyc7XG5pbXBvcnQge2RlZXBDb3B5fSBmcm9tICdAYWpmL2NvcmUvdXRpbHMnO1xuXG5pbXBvcnQge2NoYXJ0VG9DaGFydEpzVHlwZX0gZnJvbSAnLi4vLi4vY2hhcnQtdXRpbHMnO1xuaW1wb3J0IHtBamZUYWJsZURhdGFzZXR9IGZyb20gJy4uLy4uL2ludGVyZmFjZS9kYXRhc2V0L3RhYmxlLWRhdGFzZXQnO1xuaW1wb3J0IHtBamZSZXBvcnRWYXJpYWJsZX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL3JlcG9ydHMvcmVwb3J0LXZhcmlhYmxlJztcbmltcG9ydCB7QWpmV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4uLy4uL2ludGVyZmFjZS93aWRnZXRzLWluc3RhbmNlcy93aWRnZXQtaW5zdGFuY2UnO1xuaW1wb3J0IHtBamZXaWRnZXR9IGZyb20gJy4uLy4uL2ludGVyZmFjZS93aWRnZXRzL3dpZGdldCc7XG5pbXBvcnQge2V2YWx1YXRlQWdncmVnYXRpb259IGZyb20gJy4uL2FnZ3JlZ2F0aW9uL2V2YWx1YXRlLWFnZ3JlZ2F0aW9uJztcbmltcG9ydCB7aXNDaGFydFdpZGdldH0gZnJvbSAnLi4vd2lkZ2V0cy9pcy1jaGFydC13aWRnZXQnO1xuaW1wb3J0IHtpc0R5bmFtaWNUYWJsZVdpZGdldH0gZnJvbSAnLi4vd2lkZ2V0cy9pcy1keW5hbWljLXRhYmxlLXdpZGdldCc7XG5pbXBvcnQge2lzRm9ybXVsYVdpZGdldH0gZnJvbSAnLi4vd2lkZ2V0cy9pcy1mb3JtdWxhLXdpZGdldCc7XG5pbXBvcnQge2lzSW1hZ2VDb250YWluZXJXaWRnZXR9IGZyb20gJy4uL3dpZGdldHMvaXMtaW1hZ2UtY29udGFpbmVyLXdpZGdldCc7XG5pbXBvcnQge2lzSW1hZ2VXaWRnZXR9IGZyb20gJy4uL3dpZGdldHMvaXMtaW1hZ2Utd2lkZ2V0JztcbmltcG9ydCB7aXNNYXBXaWRnZXR9IGZyb20gJy4uL3dpZGdldHMvaXMtbWFwLXdpZGdldCc7XG5pbXBvcnQge2lzV2lkZ2V0V2l0aENvbnRlbnR9IGZyb20gJy4uL3dpZGdldHMvaXMtd2lkZ2V0LXdpdGgtY29udGVudCc7XG5pbXBvcnQge2lzVGFibGVXaWRnZXR9IGZyb20gJy4uL3dpZGdldHMvaXMtdGFibGUtd2lkZ2V0JztcbmltcG9ydCB7aXNUZXh0V2lkZ2V0fSBmcm9tICcuLi93aWRnZXRzL2lzLXRleHQtd2lkZ2V0JztcbmltcG9ydCB7Y29tcG9uZW50c01hcH0gZnJvbSAnLi4vd2lkZ2V0cy93aWRnZXRzLW1hcCc7XG5pbXBvcnQge2lzQ2hhcnRXaWRnZXRJbnN0YW5jZX0gZnJvbSAnLi4vd2lkZ2V0cy1pbnN0YW5jZXMvaXMtY2hhcnQtd2lkZ2V0LWluc3RhbmNlJztcbmltcG9ydCB7aXNEeW5hbWljVGFibGVXaWRnZXRJbnN0YW5jZX0gZnJvbSAnLi4vd2lkZ2V0cy1pbnN0YW5jZXMvaXMtZHluYW1pYy10YWJsZS13aWRnZXQtaW5zdGFuY2UnO1xuaW1wb3J0IHtpc0Zvcm11bGFXaWRnZXRJbnN0YW5jZX0gZnJvbSAnLi4vd2lkZ2V0cy1pbnN0YW5jZXMvaXMtZm9ybXVsYS13aWRnZXQtaW5zdGFuY2UnO1xuaW1wb3J0IHtpc0ltYWdlQ29udGFpbmVyV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4uL3dpZGdldHMtaW5zdGFuY2VzL2lzLWltYWdlLWNvbnRhaW5lci13aWRnZXQtaW5zdGFuY2UnO1xuaW1wb3J0IHtpc0ltYWdlV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4uL3dpZGdldHMtaW5zdGFuY2VzL2lzLWltYWdlLXdpZGdldC1pbnN0YW5jZSc7XG5pbXBvcnQge2lzTWFwV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4uL3dpZGdldHMtaW5zdGFuY2VzL2lzLW1hcC13aWRnZXQtaW5zdGFuY2UnO1xuaW1wb3J0IHtpc1RhYmxlV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4uL3dpZGdldHMtaW5zdGFuY2VzL2lzLXRhYmxlLXdpZGdldC1pbnN0YW5jZSc7XG5pbXBvcnQge2lzVGV4dFdpZGdldEluc3RhbmNlfSBmcm9tICcuLi93aWRnZXRzLWluc3RhbmNlcy9pcy10ZXh0LXdpZGdldC1pbnN0YW5jZSc7XG5pbXBvcnQge2lzV2lkZ2V0V2l0aENvbnRlbnRJbnN0YW5jZX0gZnJvbSAnLi4vd2lkZ2V0cy1pbnN0YW5jZXMvaXMtd2lkZ2V0LXdpdGgtY29udGVudC1pbnN0YW5jZSc7XG5cbmltcG9ydCB7Y3JlYXRlV2lkZ2V0SW5zdGFuY2V9IGZyb20gJy4vY3JlYXRlLXdpZGdldC1pbnN0YW5jZSc7XG5pbXBvcnQge3RyRm9ybXVsYX0gZnJvbSAnLi93aWRnZXQtaW5zdGFuY2UtdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2lkZ2V0VG9XaWRnZXRJbnN0YW5jZShcbiAgd2lkZ2V0OiBBamZXaWRnZXQsXG4gIGNvbnRleHQ6IEFqZkNvbnRleHQsXG4gIHRzOiBUcmFuc2xvY29TZXJ2aWNlLFxuICB2YXJpYWJsZXM6IEFqZlJlcG9ydFZhcmlhYmxlW10gPSBbXSxcbik6IEFqZldpZGdldEluc3RhbmNlIHtcbiAgY29uc3Qgd2kgPSBjcmVhdGVXaWRnZXRJbnN0YW5jZSh3aWRnZXQsIGNvbnRleHQsIHRzLCB2YXJpYWJsZXMpO1xuXG4gIGlmIChpc1dpZGdldFdpdGhDb250ZW50KHdpZGdldCkgJiYgaXNXaWRnZXRXaXRoQ29udGVudEluc3RhbmNlKHdpKSkge1xuICAgIGxldCBjb250ZW50OiBBamZXaWRnZXRJbnN0YW5jZVtdID0gW107XG4gICAgd2lkZ2V0LmNvbnRlbnQuZm9yRWFjaChjID0+IHtcbiAgICAgIGlmICh3aWRnZXQucmVwZXRpdGlvbnMgIT0gbnVsbCkge1xuICAgICAgICB3aS5yZXBldGl0aW9ucyA9IGV2YWx1YXRlRXhwcmVzc2lvbih3aWRnZXQucmVwZXRpdGlvbnMuZm9ybXVsYSwgY29udGV4dCk7XG4gICAgICAgIGlmICh0eXBlb2Ygd2kucmVwZXRpdGlvbnMgPT09ICdudW1iZXInICYmIHdpLnJlcGV0aXRpb25zID4gMCkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2kucmVwZXRpdGlvbnM7IGkrKykge1xuICAgICAgICAgICAgY29udGVudC5wdXNoKHdpZGdldFRvV2lkZ2V0SW5zdGFuY2UoYywgey4uLmNvbnRleHQsICckcmVwZXRpdGlvbic6IGl9LCB0cywgdmFyaWFibGVzKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50LnB1c2god2lkZ2V0VG9XaWRnZXRJbnN0YW5jZShjLCBjb250ZXh0LCB0cywgdmFyaWFibGVzKSk7XG4gICAgICB9XG4gICAgICB3aS5jb250ZW50ID0gY29udGVudDtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChpc0NoYXJ0V2lkZ2V0KHdpZGdldCkgJiYgaXNDaGFydFdpZGdldEluc3RhbmNlKHdpKSkge1xuICAgIGlmICgod2lkZ2V0IGFzIGFueSkub3B0aW9uID09IG51bGwpIHtcbiAgICAgICh3aWRnZXQgYXMgYW55KS5vcHRpb24gPSB7fTtcbiAgICB9XG4gICAgY29uc3QgbGFiZWxzID0gd2lkZ2V0LmxhYmVscyBpbnN0YW5jZW9mIEFycmF5ID8gd2lkZ2V0LmxhYmVscyA6IFt3aWRnZXQubGFiZWxzXTtcbiAgICBjb25zdCBldkxhYmVscyA9IGxhYmVscy5tYXAobCA9PiB7XG4gICAgICBsZXQgZXZmID0gZXZhbHVhdGVFeHByZXNzaW9uKGwuZm9ybXVsYSwgY29udGV4dCk7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoZXZmIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICBldmYgPSBldmYubWFwKHYgPT5cbiAgICAgICAgICAgIHYgIT0gbnVsbCAmJiB0eXBlb2YgdiA9PT0gJ3N0cmluZycgJiYgdi50cmltKCkubGVuZ3RoID4gMCA/IHRzLnRyYW5zbGF0ZSh2KSA6IHYsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmYgPVxuICAgICAgICAgICAgZXZmICE9IG51bGwgJiYgdHlwZW9mIGV2ZiA9PT0gJ3N0cmluZycgJiYgZXZmLnRyaW0oKS5sZW5ndGggPiAwXG4gICAgICAgICAgICAgID8gdHMudHJhbnNsYXRlKGV2ZilcbiAgICAgICAgICAgICAgOiBldmY7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKF9lKSB7fVxuICAgICAgcmV0dXJuIGV2ZjtcbiAgICB9KTtcbiAgICB3aS5sYWJlbHMgPSB3aWRnZXQubGFiZWxzIGluc3RhbmNlb2YgQXJyYXkgPyBldkxhYmVscyA6IGV2TGFiZWxzWzBdO1xuICAgIHdpLmRhdGFzZXRzID0gd2lkZ2V0LmRhdGFzZXQubWFwKGQgPT4ge1xuICAgICAgbGV0IGRzOiBhbnkgPSB7XG4gICAgICAgIC4uLihkLm9wdGlvbnMgfHwge30pLFxuICAgICAgICBkYXRhOiBldmFsdWF0ZUFnZ3JlZ2F0aW9uKGQuYWdncmVnYXRpb24sIGQuZm9ybXVsYSwgY29udGV4dCksXG4gICAgICB9O1xuICAgICAgaWYgKGQuY2hhcnRUeXBlICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgY3QgPSBjaGFydFRvQ2hhcnRKc1R5cGUoZC5jaGFydFR5cGUpO1xuICAgICAgICBkcyA9IHsuLi5kcywgY2hhcnRUeXBlOiBjdCwgdHlwZTogY3R9O1xuICAgICAgfVxuICAgICAgaWYgKGQub3B0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgIGRzID0gey4uLmRzLCBvcHRpb25zOiBkLm9wdGlvbnN9O1xuICAgICAgfVxuICAgICAgaWYgKGQubGFiZWwgIT0gbnVsbCkge1xuICAgICAgICBkcyA9IHsuLi5kcywgbGFiZWw6IGQubGFiZWwudHJpbSgpLmxlbmd0aCA+IDAgPyB0cy50cmFuc2xhdGUoZC5sYWJlbCkgOiBkLmxhYmVsfTtcbiAgICAgIH1cbiAgICAgIGlmIChkLmRhdGFsYWJlbHMgIT0gbnVsbCkge1xuICAgICAgICBkcy5kYXRhbGFiZWxzID0gZGVlcENvcHkoZC5kYXRhbGFiZWxzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkcztcbiAgICB9KTtcbiAgICB3aS5kYXRhID0ge2xhYmVsczogd2kubGFiZWxzLCBkYXRhc2V0czogd2kuZGF0YXNldHN9O1xuICAgIHdpLmNoYXJ0VHlwZSA9IGNoYXJ0VG9DaGFydEpzVHlwZSh3aWRnZXQudHlwZSB8fCB3aWRnZXQuY2hhcnRUeXBlKTtcbiAgICB3aS5leHBvcnRhYmxlID1cbiAgICAgIHdpZGdldC5leHBvcnRhYmxlICYmICh3aWRnZXQuZXhwb3J0YWJsZSA9PT0gdHJ1ZSB8fCB3aWRnZXQuZXhwb3J0YWJsZSA9PT0gJ3RydWUnKVxuICAgICAgICA/IHRydWVcbiAgICAgICAgOiBmYWxzZTtcbiAgICBpZiAod2lkZ2V0Lm9wdGlvbnMgIT0gbnVsbCAmJiB3aWRnZXQub3B0aW9ucy5wbHVnaW5zICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHBsdWdpbnMgPSB3aWRnZXQub3B0aW9ucy5wbHVnaW5zO1xuICAgICAgY29uc3QgcGx1Z2luTmFtZXMgPSBPYmplY3Qua2V5cyhwbHVnaW5zKTtcbiAgICAgIHBsdWdpbk5hbWVzLmZvckVhY2gocGx1Z2luTmFtZSA9PiB7XG4gICAgICAgIGNvbnN0IHBsdWdpbiA9IHBsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgICAgIGNvbnN0IHBsdWdpbk9wdGlvbnMgPSBPYmplY3Qua2V5cyhwbHVnaW4pO1xuICAgICAgICBwbHVnaW5PcHRpb25zLmZvckVhY2goKHBsdWdpbk9wdGlvbk5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgIGNvbnN0IHBsdWdpbk9wdGlvbiA9IHBsdWdpbltwbHVnaW5PcHRpb25OYW1lXTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgcGx1Z2luT3B0aW9uICE9PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgcGx1Z2luT3B0aW9uICE9IG51bGwgJiZcbiAgICAgICAgICAgIHBsdWdpbk9wdGlvbi5mb3JtdWxhICE9IG51bGxcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHBsdWdpbltwbHVnaW5PcHRpb25OYW1lXSA9IGV2YWx1YXRlRXhwcmVzc2lvbihwbHVnaW5PcHRpb24uZm9ybXVsYSwgY29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1RhYmxlV2lkZ2V0KHdpZGdldCkgJiYgaXNUYWJsZVdpZGdldEluc3RhbmNlKHdpKSkge1xuICAgIHdpLmRhdGFzZXQgPSB3aWRnZXQuZGF0YXNldC5tYXAocm93ID0+XG4gICAgICByb3cubWFwKGNlbGwgPT4ge1xuICAgICAgICByZXR1cm4gY2VsbC5mb3JtdWxhIGluc3RhbmNlb2YgQXJyYXlcbiAgICAgICAgICA/IGNlbGwuZm9ybXVsYS5tYXAoZiA9PiB0ckZvcm11bGEoZiwgY29udGV4dCwgdHMpKVxuICAgICAgICAgIDogdHJGb3JtdWxhKGNlbGwuZm9ybXVsYSEsIGNvbnRleHQsIHRzKTtcbiAgICAgIH0pLFxuICAgICk7XG4gICAgd2kuZXhwb3J0YWJsZSA9XG4gICAgICB3aWRnZXQuZXhwb3J0YWJsZSAmJiAod2lkZ2V0LmV4cG9ydGFibGUgPT09IHRydWUgfHwgd2lkZ2V0LmV4cG9ydGFibGUgPT09ICd0cnVlJylcbiAgICAgICAgPyB0cnVlXG4gICAgICAgIDogZmFsc2U7XG4gICAgd2kuZGF0YSA9ICh3aWRnZXQuZGF0YXNldCB8fCBbXSkubWFwKHJvdyA9PlxuICAgICAgcm93Lm1hcChjZWxsID0+IHtcbiAgICAgICAgbGV0IGV2ZiA9ICcnO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGV2ZiA9XG4gICAgICAgICAgICBjZWxsLmZvcm11bGEgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgICAgICA/IGNlbGwuZm9ybXVsYS5tYXAoZiA9PiB0ckZvcm11bGEoZiwgY29udGV4dCwgdHMpKVxuICAgICAgICAgICAgICA6IHRyRm9ybXVsYShjZWxsLmZvcm11bGEhLCBjb250ZXh0LCB0cyk7XG4gICAgICAgIH0gY2F0Y2ggKF9lKSB7fVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiBldmYsXG4gICAgICAgICAgc3R5bGU6IHsuLi53aWRnZXQuY2VsbFN0eWxlcywgLi4uY2VsbC5zdHlsZX0sXG4gICAgICAgICAgcm93c3BhbjogY2VsbC5yb3dzcGFuLFxuICAgICAgICAgIGNvbHNwYW46IGNlbGwuY29sc3BhbixcbiAgICAgICAgfTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNEeW5hbWljVGFibGVXaWRnZXQod2lkZ2V0KSAmJiBpc0R5bmFtaWNUYWJsZVdpZGdldEluc3RhbmNlKHdpKSkge1xuICAgIHdpLmRhdGFzZXQgPSB3aWRnZXQuZGF0YXNldC5tYXAoKGNlbGw6IEFqZlRhYmxlRGF0YXNldCkgPT4ge1xuICAgICAgcmV0dXJuIGNlbGwuZm9ybXVsYSBpbnN0YW5jZW9mIEFycmF5XG4gICAgICAgID8gY2VsbC5mb3JtdWxhLm1hcChmID0+IHRyRm9ybXVsYShmLCBjb250ZXh0LCB0cykpXG4gICAgICAgIDogdHJGb3JtdWxhKGNlbGwuZm9ybXVsYSEsIGNvbnRleHQsIHRzKTtcbiAgICB9KTtcbiAgICB3aS5leHBvcnRhYmxlID1cbiAgICAgIHdpZGdldC5leHBvcnRhYmxlICYmICh3aWRnZXQuZXhwb3J0YWJsZSA9PT0gdHJ1ZSB8fCB3aWRnZXQuZXhwb3J0YWJsZSA9PT0gJ3RydWUnKVxuICAgICAgICA/IHRydWVcbiAgICAgICAgOiBmYWxzZTtcblxuICAgIGxldCBkYXRhc2V0OiBBamZUYWJsZUNlbGxbXVtdID0gZXZhbHVhdGVFeHByZXNzaW9uKHdpZGdldC5yb3dEZWZpbml0aW9uLmZvcm11bGEsIGNvbnRleHQpIHx8IFtdO1xuICAgIGRhdGFzZXQgPSAoZGF0YXNldCB8fCBbXSkubWFwKChyb3c6IEFqZlRhYmxlQ2VsbFtdKSA9PlxuICAgICAgcm93Lm1hcChjZWxsID0+IHtcbiAgICAgICAgbGV0IHRyZiA9IGNlbGwudmFsdWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHRyZiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICB0cmYgPSB0cmYubWFwKHYgPT5cbiAgICAgICAgICAgICAgdiAhPSBudWxsICYmIHR5cGVvZiB2ID09PSAnc3RyaW5nJyAmJiB2LnRyaW0oKS5sZW5ndGggPiAwID8gdHMudHJhbnNsYXRlKHYpIDogdixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyZiA9XG4gICAgICAgICAgICAgIHRyZiAhPSBudWxsICYmIHR5cGVvZiB0cmYgPT09ICdzdHJpbmcnICYmIHRyZi50cmltKCkubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgID8gdHMudHJhbnNsYXRlKHRyZilcbiAgICAgICAgICAgICAgICA6IHRyZjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKF9lKSB7fVxuICAgICAgICByZXR1cm4gey4uLmNlbGwsIHZhbHVlOiB0cmZ9O1xuICAgICAgfSksXG4gICAgKTtcblxuICAgIGNvbnN0IGhlYWRlciA9ICh3aWRnZXQuZGF0YXNldCB8fCBbXSkubWFwKGNlbGwgPT4ge1xuICAgICAgbGV0IGV2ZiA9ICcnO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZXZmID1cbiAgICAgICAgICBjZWxsLmZvcm11bGEgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgICAgPyBjZWxsLmZvcm11bGEubWFwKGYgPT4gdHJGb3JtdWxhKGYsIGNvbnRleHQsIHRzKSlcbiAgICAgICAgICAgIDogdHJGb3JtdWxhKGNlbGwuZm9ybXVsYSwgY29udGV4dCwgdHMpO1xuICAgICAgfSBjYXRjaCAoX2UpIHt9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogZXZmLFxuICAgICAgICBzdHlsZTogey4uLndpZGdldC5jZWxsU3R5bGVzLCAuLi5jZWxsLnN0eWxlfSxcbiAgICAgICAgcm93c3BhbjogY2VsbC5yb3dzcGFuLFxuICAgICAgICBjb2xzcGFuOiBjZWxsLmNvbHNwYW4sXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHdpLmRhdGEgPSBoZWFkZXIubGVuZ3RoID09PSAwID8gWy4uLmRhdGFzZXRdIDogW1suLi5oZWFkZXJdLCAuLi5kYXRhc2V0XTtcbiAgfSBlbHNlIGlmIChpc0ltYWdlV2lkZ2V0KHdpZGdldCkgJiYgaXNJbWFnZVdpZGdldEluc3RhbmNlKHdpKSkge1xuICAgIGlmICh3aWRnZXQuZmxhZykge1xuICAgICAgd2kuZmxhZyA9IGV2YWx1YXRlRXhwcmVzc2lvbih3aWRnZXQuZmxhZy5mb3JtdWxhLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKHdpZGdldC5pY29uKSB7XG4gICAgICB3aS5pY29uID0gZXZhbHVhdGVFeHByZXNzaW9uKHdpZGdldC5pY29uLmZvcm11bGEsIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAod2lkZ2V0LnVybCkge1xuICAgICAgd2kudXJsID0gZXZhbHVhdGVFeHByZXNzaW9uKHdpZGdldC51cmwuZm9ybXVsYSwgY29udGV4dCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSW1hZ2VDb250YWluZXJXaWRnZXQod2lkZ2V0KSAmJiBpc0ltYWdlQ29udGFpbmVyV2lkZ2V0SW5zdGFuY2Uod2kpKSB7XG4gICAgaWYgKHdpZGdldC5mbGFncykge1xuICAgICAgd2kuZmxhZ3MgPVxuICAgICAgICB3aWRnZXQuZmxhZ3MgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgID8gd2lkZ2V0LmZsYWdzLm1hcChmID0+IGV2YWx1YXRlRXhwcmVzc2lvbihmLmZvcm11bGEsIGNvbnRleHQpKVxuICAgICAgICAgIDogZXZhbHVhdGVFeHByZXNzaW9uKHdpZGdldC5mbGFncy5mb3JtdWxhLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKHdpZGdldC5pY29ucykge1xuICAgICAgd2kuaWNvbnMgPVxuICAgICAgICB3aWRnZXQuaWNvbnMgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgID8gd2lkZ2V0Lmljb25zLm1hcChmID0+IGV2YWx1YXRlRXhwcmVzc2lvbihmLmZvcm11bGEsIGNvbnRleHQpKVxuICAgICAgICAgIDogZXZhbHVhdGVFeHByZXNzaW9uKHdpZGdldC5pY29ucy5mb3JtdWxhLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKHdpZGdldC51cmxzKSB7XG4gICAgICB3aS51cmxzID1cbiAgICAgICAgd2lkZ2V0LnVybHMgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgID8gd2lkZ2V0LnVybHMubWFwKGYgPT4gZXZhbHVhdGVFeHByZXNzaW9uKGYuZm9ybXVsYSwgY29udGV4dCkpXG4gICAgICAgICAgOiBldmFsdWF0ZUV4cHJlc3Npb24od2lkZ2V0LnVybHMuZm9ybXVsYSwgY29udGV4dCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzVGV4dFdpZGdldCh3aWRnZXQpICYmIGlzVGV4dFdpZGdldEluc3RhbmNlKHdpKSkge1xuICAgIGNvbnN0IGZvcm11bGFSZWdFeDogUmVnRXhwID0gL1xcW3syfSguKz8pXFxdezJ9L2c7XG4gICAgY29uc3QgbWF0Y2hlczoge2lkeDogbnVtYmVyOyBsZW46IG51bWJlcjsgZm9ybXVsYTogQWpmRm9ybXVsYX1bXSA9IFtdO1xuICAgIGxldCBtYXRjaDogUmVnRXhwRXhlY0FycmF5IHwgbnVsbDtcbiAgICBsZXQgaHRtbFRleHQgPSB3aWRnZXQuaHRtbFRleHQ7XG4gICAgd2hpbGUgKChtYXRjaCA9IGZvcm11bGFSZWdFeC5leGVjKGh0bWxUZXh0KSkpIHtcbiAgICAgIGNvbnN0IGlkeCA9IG1hdGNoLmluZGV4O1xuICAgICAgY29uc3QgbGVuID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgY29uc3QgZm9ybXVsYSA9IGNyZWF0ZUZvcm11bGEoe2Zvcm11bGE6IG1hdGNoWzFdfSk7XG4gICAgICBtYXRjaGVzLnB1c2goe2lkeCwgbGVuLCBmb3JtdWxhfSk7XG4gICAgfVxuICAgIG1hdGNoZXMucmV2ZXJzZSgpLmZvckVhY2gobSA9PiB7XG4gICAgICBsZXQgY2FsY1ZhbHVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2FsY1ZhbHVlID0gZXZhbHVhdGVFeHByZXNzaW9uKG0uZm9ybXVsYS5mb3JtdWxhLCBjb250ZXh0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FsY1ZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgICBodG1sVGV4dCA9IGAke2h0bWxUZXh0LnN1YnN0cmluZygwLCBtLmlkeCl9JHtjYWxjVmFsdWV9JHtodG1sVGV4dC5zdWJzdHJpbmcobS5pZHggKyBtLmxlbil9YDtcbiAgICB9KTtcbiAgICB3aS5odG1sVGV4dCA9IGh0bWxUZXh0ICE9IG51bGwgJiYgaHRtbFRleHQubGVuZ3RoID4gMCA/IHRzLnRyYW5zbGF0ZShodG1sVGV4dCkgOiBodG1sVGV4dDtcbiAgfSBlbHNlIGlmIChpc0Zvcm11bGFXaWRnZXQod2lkZ2V0KSAmJiBpc0Zvcm11bGFXaWRnZXRJbnN0YW5jZSh3aSkpIHtcbiAgICB3aS5mb3JtdWxhID0gZXZhbHVhdGVFeHByZXNzaW9uKHdpZGdldC5mb3JtdWxhLmZvcm11bGEsIGNvbnRleHQpO1xuICB9IGVsc2UgaWYgKGlzTWFwV2lkZ2V0KHdpZGdldCkgJiYgaXNNYXBXaWRnZXRJbnN0YW5jZSh3aSkpIHtcbiAgICB3aS5jb29yZGluYXRlID0gZXZhbHVhdGVFeHByZXNzaW9uKHdpZGdldC5jb29yZGluYXRlLmZvcm11bGEsIGNvbnRleHQpO1xuICB9IGVsc2UgaWYgKHdpZGdldC53aWRnZXRUeXBlID4gMTAwKSB7XG4gICAgY29uc3QgaWlGbiA9XG4gICAgICBjb21wb25lbnRzTWFwW3dpZGdldC53aWRnZXRUeXBlXSAhPSBudWxsXG4gICAgICAgID8gY29tcG9uZW50c01hcFt3aWRnZXQud2lkZ2V0VHlwZV0uaW5pdEluc3RhbmNlXG4gICAgICAgIDogbnVsbDtcbiAgICBpZiAoaWlGbiAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gaWlGbih3aSwgY29udGV4dCwgdHMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gd2k7XG59XG4iXX0=