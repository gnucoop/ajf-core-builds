/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import * as XLSX from 'xlsx';
import { createFormula } from '@ajf/core/models';
import { backgroundColor } from '../automatic-report/styles';
import { indicatorToJs } from './hindikit-parser';
import { htmlWidget, widgetStyle } from './styles';
import { createDataset } from '../utils/dataset/create-dataset';
import { createReportContainer } from '../utils/reports/create-report-container';
import { createWidget } from '../utils/widgets/create-widget';
import { AjfWidgetType } from '../interface/widgets/widget-type';
import { AjfChartType } from '../interface/charts/chart-type';
import { deepCopy } from '@ajf/core/utils';
import { forkJoin, of } from 'rxjs';
import { map } from 'rxjs/operators';
/**
 * This function returns a basic report for any form passed in input.
 *
 * @param form the form schema
 * @param [id] the id of the form inside the plathform.
 */
export function xlsReport(file, http) {
    const workbook = XLSX.read(file, { type: 'binary' });
    const report = {};
    const reportWidgets = [];
    const variables = [];
    const filters = {};
    // create filters
    workbook.SheetNames.forEach((sheetName, index) => {
        const sheet = workbook.Sheets[sheetName];
        if (sheetName.includes('filter') && index + 1 < workbook.SheetNames.length) {
            const nextSheet = sheetName.includes('global')
                ? 'global_filter'
                : workbook.SheetNames[index + 1];
            filters[nextSheet] = _buildFilter(workbook, sheet, http);
        }
    });
    const obsFilterValues = Object.values(filters);
    const filterNames = Object.keys(filters);
    return forkJoin(obsFilterValues.length > 0 ? obsFilterValues : of([])).pipe(map(f => {
        workbook.SheetNames.forEach(sheetName => {
            const sheet = workbook.Sheets[sheetName];
            const json = XLSX.utils.sheet_to_json(sheet);
            if (sheetName === 'variables') {
                json
                    .filter(e => e != null && e.name != null && e.value != null)
                    .forEach(elem => {
                    let indicator = elem.value;
                    try {
                        indicator = indicatorToJs(elem.value);
                    }
                    catch (e) {
                        console.log(e);
                    }
                    variables.push({ name: elem.name, formula: { formula: indicator } });
                });
            }
            else {
                const idx = filterNames.indexOf(sheetName);
                if (sheetName.includes('table')) {
                    const tableWidget = _buildTable(json);
                    reportWidgets.push(tableWidget);
                }
                else if (sheetName.includes('chart')) {
                    const chartWidget = _buildChart(sheetName, json);
                    reportWidgets.push(chartWidget);
                }
                else if (sheetName.includes('html')) {
                    const chartWidget = _buildHtml(json);
                    reportWidgets.push(chartWidget);
                }
                if (idx >= 0) {
                    reportWidgets[reportWidgets.length - 1].filter = { schema: f[idx] };
                }
            }
        });
        const globalFilterIdx = filterNames.indexOf('global_filter');
        const layoutWidget = {
            widgetType: AjfWidgetType.Layout,
            content: [
                createWidget({
                    widgetType: AjfWidgetType.Column,
                    content: [...reportWidgets],
                    filter: globalFilterIdx >= 0 ? { schema: f[globalFilterIdx] } : undefined,
                }),
            ],
            columns: [1],
            visibility: {
                condition: 'true',
            },
            styles: {},
        };
        report.variables = variables;
        report.content = createReportContainer(layoutWidget);
        return report;
    }));
}
function _buildFilter(wbook, sheet, http) {
    const data = new FormData();
    const filterBook = deepCopy(wbook);
    const filterSheet = deepCopy(sheet);
    const choicesSheet = deepCopy(wbook.Sheets['choices']);
    filterBook.SheetNames = ['survey', 'choices'];
    filterBook.Sheets = { survey: filterSheet, choices: choicesSheet };
    const filterXlsx = XLSX.write(filterBook, {
        bookType: 'xlsx',
        type: 'array',
    });
    const file = new File([filterXlsx], 'filter.xlsx');
    data.append('excelFile', file);
    return http.post('https://formconv.herokuapp.com/result.json', data);
}
function _buildChart(name, json) {
    const optionLabels = ['chartType', 'title'];
    const chartOptions = {};
    const datasetObj = {};
    const dataset = [];
    let labels = { formula: `[]` };
    if (json.length > 0) {
        const firstRow = json[0];
        optionLabels.forEach(optionLabel => {
            if (firstRow[optionLabel] != null) {
                chartOptions[optionLabel] = firstRow[optionLabel];
                delete firstRow[optionLabel];
            }
        });
    }
    json.forEach(row => {
        const rowKeys = Object.keys(row);
        rowKeys.forEach(rowKey => {
            const value = row[rowKey];
            if (datasetObj[rowKey] == null) {
                datasetObj[rowKey] = [value];
            }
            else {
                datasetObj[rowKey].push(value);
            }
        });
    });
    if (datasetObj.labels != null) {
        labels = {
            formula: `plainArray([${datasetObj.labels.map((label) => indicatorToJs(label))}])`,
        };
        delete datasetObj.labels;
    }
    Object.keys(datasetObj).forEach((datasetObjKey, index) => {
        const datasetRow = datasetObj[datasetObjKey].map((r) => indicatorToJs(`${r}`));
        const colorCondition = chartOptions.chartType === 'Pie' ||
            chartOptions.chartType === 'PolarArea' ||
            chartOptions.chartType === 'Doughnut';
        const backColor = colorCondition ? backgroundColor : backgroundColor[index];
        const formula = [
            createFormula({ formula: `plainArray([${datasetRow.toString()}])` }),
        ];
        const datasetOptions = { backgroundColor: backColor };
        dataset.push({
            ...createDataset({ aggregation: { aggregation: 0 }, formula, label: datasetObjKey }),
            options: datasetOptions,
        });
    });
    return createWidget({
        name,
        widgetType: AjfWidgetType.Chart,
        type: AjfChartType[chartOptions.chartType],
        labels,
        dataset,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            legend: { display: true, position: 'bottom' },
            title: { display: true, text: `${chartOptions.title || ''}`.replace(/"/gi, '') },
        },
        styles: { ...{ width: '100%', height: '100%', padding: '20px' }, ...widgetStyle },
        exportable: true,
    });
}
function _buildHtml(json) {
    const firstRow = json.length > 0 && json[0].html != null ? json[0] : { html: '' };
    return createWidget({
        widgetType: AjfWidgetType.Text,
        htmlText: `${firstRow.html}`,
        styles: htmlWidget,
    });
}
function _buildTable(json) {
    const rowspan = 1;
    const dataElements = [];
    const titles = Object.keys(json[0]);
    const colspans = Object.values(json[0]).map(r => +r);
    delete json[0];
    const tableHeader = titles.map((title, index) => ({
        label: '',
        formula: { formula: `\"${title}\"` },
        aggregation: { aggregation: 0 },
        colspan: colspans[index],
        rowspan,
        style: {
            textAlign: 'center',
            fontWeight: 'bold',
            color: 'white',
            backgroundColor: '#3f51b5',
        },
    }));
    json.forEach(row => {
        const elems = [];
        titles.forEach(title => {
            let elem = row[title] || `\"\"`;
            try {
                elem = indicatorToJs(elem);
            }
            catch (err) {
                console.log('erro', elem, title, row);
                console.log(err.message);
                elem = `${row[title]}`;
            }
            elems.push(elem.replace(/[\*\/\r\n]|@[\w-]+/g, ''));
        });
        dataElements.push(elems);
    });
    return createWidget({
        widgetType: AjfWidgetType.DynamicTable,
        rowDefinition: {
            formula: `buildDataset([${dataElements}],${JSON.stringify(colspans)})`,
        },
        dataset: tableHeader,
        exportable: true,
        cellStyles: {
            textAlign: 'center',
            color: 'black',
            backgroundColor: 'white',
        },
        styles: {
            borderCollapse: 'collapse',
        },
    });
}
//# sourceMappingURL=data:application/json;base64,