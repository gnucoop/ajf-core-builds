/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { Injectable } from '@angular/core';
import { addDays, addMonths, addWeeks, addYears, endOfDay, endOfMonth, endOfISOWeek, endOfWeek, endOfYear, format, getISODay, isAfter, isBefore, isSameDay, setISODay, startOfDay, startOfISOWeek, startOfMonth, startOfWeek, startOfYear, subMonths, subWeeks, subYears } from 'date-fns';
import * as i0 from "@angular/core";
function isBetween(date, rangeLeft, rangeRight) {
    return (isAfter(date, rangeLeft) || isSameDay(date, rangeLeft))
        && (isBefore(date, rangeRight) || isSameDay(date, rangeRight));
}
function periodOrder(entryType) {
    return ['day', 'week', 'month', 'year'].indexOf(entryType);
}
var AjfCalendarService = /** @class */ (function () {
    function AjfCalendarService() {
    }
    AjfCalendarService.prototype.buildView = function (params) {
        var viewMode = params.viewMode, viewDate = params.viewDate;
        switch (viewMode) {
            case 'decade':
                var curYear = viewDate.getFullYear();
                var firstYear = curYear - (curYear % 10) + 1;
                var lastYear = firstYear + 11;
                return {
                    header: firstYear + " - " + lastYear,
                    headerRow: [],
                    rows: this._decadeCalendarRows(params),
                };
            case 'year':
                return {
                    header: "" + viewDate.getFullYear(),
                    headerRow: [],
                    rows: this._yearCalendarRows(params),
                };
            case 'month':
                return {
                    header: format(viewDate, 'MMM yyyy'),
                    headerRow: this._monthHeaderRow(params),
                    rows: this._monthCalendarRows(params),
                };
        }
        return {
            header: '',
            headerRow: [],
            rows: [],
        };
    };
    AjfCalendarService.prototype.monthBounds = function (date, isoMode) {
        if (!isoMode) {
            return {
                start: startOfMonth(date),
                end: endOfMonth(date),
            };
        }
        var isoDay = getISODay(date);
        date = isoDay < 4 ? endOfISOWeek(date) : startOfISOWeek(date);
        var startDate = startOfMonth(date);
        var endDate = endOfMonth(startDate);
        var startWeekDay = startDate.getDay();
        var endWeekDay = endDate.getDay();
        if (startWeekDay == 0 || startWeekDay > 4) {
            startDate = addWeeks(startDate, 1);
        }
        if (endWeekDay > 0 && endWeekDay < 4) {
            endDate = subWeeks(endDate, 1);
        }
        startDate = startOfISOWeek(startDate);
        endDate = endOfISOWeek(endDate);
        return { start: startDate, end: endDate };
    };
    AjfCalendarService.prototype.getEntryRange = function (entry) {
        if (entry.type === 'day') {
            return { start: new Date(entry.date), end: new Date(entry.date) };
        }
        else {
            var curDate = new Date(entry.date);
            return {
                start: entry.type === 'month' ? startOfMonth(curDate) : startOfYear(curDate),
                end: entry.type === 'month' ? endOfMonth(curDate) : endOfYear(curDate)
            };
        }
    };
    AjfCalendarService.prototype.isEntrySelected = function (entry, selection) {
        if (selection != null && selection.startDate != null && selection.endDate != null) {
            var selectionStart = startOfDay(selection.startDate);
            var selectionEnd = endOfDay(selection.endDate);
            var selectionPeriodOrder = periodOrder(selection.type);
            var entryPeriodOrder = periodOrder(entry.type);
            var entryRange = this.getEntryRange(entry);
            if (entryPeriodOrder <= selectionPeriodOrder &&
                isBetween(entryRange.start, selectionStart, selectionEnd) &&
                isBetween(entryRange.end, selectionStart, selectionEnd)) {
                return 'full';
            }
            else if (entryPeriodOrder > selectionPeriodOrder &&
                isBetween(selectionStart, entryRange.start, entryRange.end) &&
                isBetween(selectionEnd, entryRange.start, entryRange.end)) {
                return 'partial';
            }
        }
        return 'none';
    };
    AjfCalendarService.prototype.entryLabel = function (entry) {
        if (entry.type === 'day') {
            return "" + entry.date.getDate();
        }
        if (entry.type === 'month') {
            return format(entry.date, 'MMM');
        }
        return "" + entry.date.getFullYear();
    };
    AjfCalendarService.prototype.nextView = function (viewDate, viewMode) {
        if (viewMode == 'month') {
            return addMonths(viewDate, 1);
        }
        else if (viewMode == 'year') {
            return addYears(viewDate, 1);
        }
        else if (viewMode == 'decade') {
            return addYears(viewDate, 10);
        }
        return viewDate;
    };
    AjfCalendarService.prototype.previousView = function (viewDate, viewMode) {
        if (viewMode == 'month') {
            return subMonths(viewDate, 1);
        }
        else if (viewMode == 'year') {
            return subYears(viewDate, 1);
        }
        else if (viewMode == 'decade') {
            return subYears(viewDate, 10);
        }
        return viewDate;
    };
    AjfCalendarService.prototype._monthHeaderRow = function (params) {
        var isoMode = params.isoMode, viewDate = params.viewDate;
        var curDate;
        if (isoMode) {
            curDate = setISODay(startOfWeek(viewDate), 1);
        }
        else {
            curDate = startOfWeek(viewDate);
        }
        var weekDayNames = [];
        for (var i = 0; i < 7; i++) {
            weekDayNames.push(format(curDate, 'EEE'));
            curDate = addDays(curDate, 1);
        }
        return weekDayNames;
    };
    AjfCalendarService.prototype._decadeCalendarRows = function (params) {
        var viewDate = params.viewDate, selection = params.selection;
        var curYear = viewDate.getFullYear();
        var firstYear = curYear - (curYear % 10) + 1;
        var curDate = startOfYear(viewDate);
        curDate.setFullYear(firstYear);
        var rows = [];
        for (var i = 0; i < 4; i++) {
            var row = [];
            for (var j = 0; j < 3; j++) {
                var date = new Date(curDate);
                var newEntry = {
                    type: 'year',
                    date: date,
                    selected: 'none'
                };
                newEntry.selected = this.isEntrySelected(newEntry, selection);
                row.push(newEntry);
                curDate = addYears(curDate, 1);
            }
            rows.push(row);
        }
        return rows;
    };
    AjfCalendarService.prototype._yearCalendarRows = function (params) {
        var viewDate = params.viewDate, selection = params.selection;
        var curDate = startOfYear(viewDate);
        var rows = [];
        for (var i = 0; i < 4; i++) {
            var row = [];
            for (var j = 0; j < 3; j++) {
                var date = new Date(curDate);
                var newEntry = {
                    type: 'month',
                    date: date,
                    selected: 'none'
                };
                newEntry.selected = this.isEntrySelected(newEntry, selection);
                row.push(newEntry);
                curDate = addMonths(curDate, 1);
            }
            rows.push(row);
        }
        return rows;
    };
    AjfCalendarService.prototype._monthCalendarRows = function (params) {
        var viewDate = params.viewDate, selection = params.selection, isoMode = params.isoMode, minDate = params.minDate, maxDate = params.maxDate;
        var monthBounds = this.monthBounds(viewDate, isoMode);
        var viewStartDate = new Date(monthBounds.start);
        var viewEndDate = new Date(monthBounds.end);
        if (!isoMode) {
            viewStartDate = startOfWeek(viewStartDate);
            viewEndDate = endOfWeek(viewEndDate);
        }
        var rows = [];
        var todayDate = new Date();
        var curDate = new Date(viewStartDate);
        while (curDate < viewEndDate) {
            var row = [];
            for (var i = 0; i < 7; i++) {
                var disabled = (minDate != null && isBefore(curDate, minDate)) ||
                    (maxDate != null && isAfter(curDate, maxDate));
                var date = new Date(curDate);
                var newEntry = {
                    type: 'day',
                    date: date,
                    selected: 'none',
                    highlight: format(todayDate, 'yyyy-MM-dd') === format(curDate, 'yyyy-MM-dd'),
                    disabled: disabled
                };
                newEntry.selected = this.isEntrySelected(newEntry, selection);
                row.push(newEntry);
                curDate = addDays(curDate, 1);
            }
            rows.push(row);
        }
        return rows;
    };
    AjfCalendarService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    AjfCalendarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AjfCalendarService_Factory() { return new AjfCalendarService(); }, token: AjfCalendarService, providedIn: "root" });
    return AjfCalendarService;
}());
export { AjfCalendarService };
//# sourceMappingURL=data:application/json;base64,