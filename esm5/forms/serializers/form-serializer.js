/**
 * @license
 * Copyright (C) 2018 Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { __assign } from "tslib";
import { deepCopy } from '@ajf/core/utils';
import { AjfAttachmentsOriginSerializer } from './attachments-origin-serializer';
import { AjfChoicesOriginSerializer } from './choices-origin-serializer';
import { AjfNodeSerializer } from './node-serializer';
var AjfFormSerializer = /** @class */ (function () {
    function AjfFormSerializer() {
    }
    AjfFormSerializer.fromJson = function (form, context) {
        var choicesOrigins = (form.choicesOrigins || []).map(function (c) { return AjfChoicesOriginSerializer.fromJson(c); });
        var attachmentsOrigins = (form.attachmentsOrigins || []).map(function (a) { return AjfAttachmentsOriginSerializer.fromJson(a); });
        var nodes = (form.nodes || [])
            .map(function (n) { return AjfNodeSerializer.fromJson(n, choicesOrigins, attachmentsOrigins); });
        return __assign(__assign({}, form), { choicesOrigins: choicesOrigins,
            attachmentsOrigins: attachmentsOrigins,
            nodes: nodes, stringIdentifier: form.stringIdentifier || [], initContext: deepCopy(context || {}) });
    };
    return AjfFormSerializer;
}());
export { AjfFormSerializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2NvcmUvZm9ybXMvc2VyaWFsaXplcnMvZm9ybS1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRzs7QUFHSCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFJekMsT0FBTyxFQUFDLDhCQUE4QixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDL0UsT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDdkUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFcEQ7SUFBQTtJQW1CQSxDQUFDO0lBbEJRLDBCQUFRLEdBQWYsVUFBZ0IsSUFBc0IsRUFBRSxPQUFvQjtRQUMxRCxJQUFNLGNBQWMsR0FDaEIsQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBdEMsQ0FBc0MsQ0FBQyxDQUFDO1FBQ2pGLElBQU0sa0JBQWtCLEdBQ3BCLENBQUMsSUFBSSxDQUFDLGtCQUFrQixJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLDhCQUE4QixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBMUMsQ0FBMEMsQ0FBQyxDQUFDO1FBQ3pGLElBQU0sS0FBSyxHQUNQLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7YUFDYixHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxFQUFqRSxDQUFpRSxDQUM1QyxDQUFDO1FBQ3hDLDZCQUNLLElBQUksS0FDUCxjQUFjLGdCQUFBO1lBQ2Qsa0JBQWtCLG9CQUFBO1lBQ2xCLEtBQUssT0FBQSxFQUNMLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxFQUFFLEVBQzdDLFdBQVcsRUFBRSxRQUFRLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxJQUNwQztJQUNKLENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUFuQkQsSUFtQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTggR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZDb250ZXh0fSBmcm9tICdAYWpmL2NvcmUvbW9kZWxzJztcbmltcG9ydCB7ZGVlcENvcHl9IGZyb20gJ0BhamYvY29yZS91dGlscyc7XG5pbXBvcnQge0FqZkZvcm19IGZyb20gJy4uL2ludGVyZmFjZS9mb3Jtcy9mb3JtJztcbmltcG9ydCB7QWpmUmVwZWF0aW5nU2xpZGV9IGZyb20gJy4uL2ludGVyZmFjZS9zbGlkZXMvcmVwZWF0aW5nLXNsaWRlJztcbmltcG9ydCB7QWpmU2xpZGV9IGZyb20gJy4uL2ludGVyZmFjZS9zbGlkZXMvc2xpZGUnO1xuaW1wb3J0IHtBamZBdHRhY2htZW50c09yaWdpblNlcmlhbGl6ZXJ9IGZyb20gJy4vYXR0YWNobWVudHMtb3JpZ2luLXNlcmlhbGl6ZXInO1xuaW1wb3J0IHtBamZDaG9pY2VzT3JpZ2luU2VyaWFsaXplcn0gZnJvbSAnLi9jaG9pY2VzLW9yaWdpbi1zZXJpYWxpemVyJztcbmltcG9ydCB7QWpmTm9kZVNlcmlhbGl6ZXJ9IGZyb20gJy4vbm9kZS1zZXJpYWxpemVyJztcblxuZXhwb3J0IGNsYXNzIEFqZkZvcm1TZXJpYWxpemVyIHtcbiAgc3RhdGljIGZyb21Kc29uKGZvcm06IFBhcnRpYWw8QWpmRm9ybT4sIGNvbnRleHQ/OiBBamZDb250ZXh0KTogQWpmRm9ybSB7XG4gICAgY29uc3QgY2hvaWNlc09yaWdpbnMgPVxuICAgICAgICAoZm9ybS5jaG9pY2VzT3JpZ2lucyB8fCBbXSkubWFwKGMgPT4gQWpmQ2hvaWNlc09yaWdpblNlcmlhbGl6ZXIuZnJvbUpzb24oYykpO1xuICAgIGNvbnN0IGF0dGFjaG1lbnRzT3JpZ2lucyA9XG4gICAgICAgIChmb3JtLmF0dGFjaG1lbnRzT3JpZ2lucyB8fCBbXSkubWFwKGEgPT4gQWpmQXR0YWNobWVudHNPcmlnaW5TZXJpYWxpemVyLmZyb21Kc29uKGEpKTtcbiAgICBjb25zdCBub2RlcyA9XG4gICAgICAgIChmb3JtLm5vZGVzIHx8IFtdKVxuICAgICAgICAgICAgLm1hcChuID0+IEFqZk5vZGVTZXJpYWxpemVyLmZyb21Kc29uKG4sIGNob2ljZXNPcmlnaW5zLCBhdHRhY2htZW50c09yaWdpbnMpKSBhcyAoXG4gICAgICAgICAgICBBamZSZXBlYXRpbmdTbGlkZSB8IEFqZlNsaWRlKVtdO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5mb3JtLFxuICAgICAgY2hvaWNlc09yaWdpbnMsXG4gICAgICBhdHRhY2htZW50c09yaWdpbnMsXG4gICAgICBub2RlcyxcbiAgICAgIHN0cmluZ0lkZW50aWZpZXI6IGZvcm0uc3RyaW5nSWRlbnRpZmllciB8fCBbXSxcbiAgICAgIGluaXRDb250ZXh0OiBkZWVwQ29weShjb250ZXh0IHx8IHt9KSxcbiAgICB9O1xuICB9XG59XG4iXX0=