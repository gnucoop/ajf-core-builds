/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { evaluateExpression } from '@ajf/core/models';
import { nodeInstanceCompleteName } from '../nodes-instances/node-instance-complete-name';
import { evaluateValidationGroup } from '../validation/evaluate-validation-group';
export function updateValidation(instance, context, supplementaryInformations) {
    var validation = instance.validation;
    if (validation == null) {
        instance.valid = true;
        return;
    }
    if (supplementaryInformations) {
        Object.keys(supplementaryInformations).forEach(function (key) {
            context["__supplementary__" + key + "__"] = supplementaryInformations[key];
        });
    }
    var completeName = nodeInstanceCompleteName(instance);
    if (context[completeName] != null && validation && validation.forceValue) {
        instance.value = evaluateExpression(validation.forceValue.condition, context);
        context[completeName] = instance.value;
        context.$value = instance.value;
    }
    instance.validationResults =
        evaluateValidationGroup(validation, context[completeName], context);
    instance.valid = instance.validationResults.reduce(function (prev, x) { return prev && x.result; }, true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXZhbGlkYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvY29yZS9mb3Jtcy91dGlscy9maWVsZHMtaW5zdGFuY2VzL3VwZGF0ZS12YWxpZGF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUVILE9BQU8sRUFBYSxrQkFBa0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBSWhFLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLGdEQUFnRCxDQUFDO0FBQ3hGLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBRWhGLE1BQU0sVUFBVSxnQkFBZ0IsQ0FDNUIsUUFBMEIsRUFBRSxPQUFtQixFQUFFLHlCQUErQjtJQUNsRixJQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO0lBQ3ZDLElBQUksVUFBVSxJQUFJLElBQUksRUFBRTtRQUN0QixRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUN0QixPQUFPO0tBQ1I7SUFFRCxJQUFJLHlCQUF5QixFQUFFO1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHO1lBQ2pELE9BQU8sQ0FBQyxzQkFBb0IsR0FBRyxPQUFJLENBQUMsR0FBRyx5QkFBeUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4RSxDQUFDLENBQUMsQ0FBQztLQUNKO0lBRUQsSUFBTSxZQUFZLEdBQUcsd0JBQXdCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFeEQsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsVUFBVSxFQUFFO1FBQ3hFLFFBQVEsQ0FBQyxLQUFLLEdBQUcsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDOUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDdkMsT0FBTyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO0tBQ2pDO0lBRUQsUUFBUSxDQUFDLGlCQUFpQjtRQUN0Qix1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hFLFFBQVEsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FDOUMsVUFBQyxJQUFhLEVBQUUsQ0FBc0IsSUFBSyxPQUFBLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFoQixDQUFnQixFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3pFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKEMpIEdudWNvb3Agc29jLiBjb29wLlxuICpcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXNcbiAqIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLFxuICogb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVSBBZmZlcm9cbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqIElmIG5vdCwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8uXG4gKlxuICovXG5cbmltcG9ydCB7QWpmQ29udGV4dCwgZXZhbHVhdGVFeHByZXNzaW9ufSBmcm9tICdAYWpmL2NvcmUvbW9kZWxzJztcblxuaW1wb3J0IHtBamZGaWVsZEluc3RhbmNlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2UvZmllbGRzLWluc3RhbmNlcy9maWVsZC1pbnN0YW5jZSc7XG5pbXBvcnQge0FqZlZhbGlkYXRpb25SZXN1bHR9IGZyb20gJy4uLy4uL2ludGVyZmFjZS92YWxpZGF0aW9uL3ZhbGlkYXRpb24tcmVzdWx0cyc7XG5pbXBvcnQge25vZGVJbnN0YW5jZUNvbXBsZXRlTmFtZX0gZnJvbSAnLi4vbm9kZXMtaW5zdGFuY2VzL25vZGUtaW5zdGFuY2UtY29tcGxldGUtbmFtZSc7XG5pbXBvcnQge2V2YWx1YXRlVmFsaWRhdGlvbkdyb3VwfSBmcm9tICcuLi92YWxpZGF0aW9uL2V2YWx1YXRlLXZhbGlkYXRpb24tZ3JvdXAnO1xuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVmFsaWRhdGlvbihcbiAgICBpbnN0YW5jZTogQWpmRmllbGRJbnN0YW5jZSwgY29udGV4dDogQWpmQ29udGV4dCwgc3VwcGxlbWVudGFyeUluZm9ybWF0aW9ucz86IGFueSk6IHZvaWQge1xuICBjb25zdCB2YWxpZGF0aW9uID0gaW5zdGFuY2UudmFsaWRhdGlvbjtcbiAgaWYgKHZhbGlkYXRpb24gPT0gbnVsbCkge1xuICAgIGluc3RhbmNlLnZhbGlkID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc3VwcGxlbWVudGFyeUluZm9ybWF0aW9ucykge1xuICAgIE9iamVjdC5rZXlzKHN1cHBsZW1lbnRhcnlJbmZvcm1hdGlvbnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY29udGV4dFtgX19zdXBwbGVtZW50YXJ5X18ke2tleX1fX2BdID0gc3VwcGxlbWVudGFyeUluZm9ybWF0aW9uc1trZXldO1xuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgY29tcGxldGVOYW1lID0gbm9kZUluc3RhbmNlQ29tcGxldGVOYW1lKGluc3RhbmNlKTtcblxuICBpZiAoY29udGV4dFtjb21wbGV0ZU5hbWVdICE9IG51bGwgJiYgdmFsaWRhdGlvbiAmJiB2YWxpZGF0aW9uLmZvcmNlVmFsdWUpIHtcbiAgICBpbnN0YW5jZS52YWx1ZSA9IGV2YWx1YXRlRXhwcmVzc2lvbih2YWxpZGF0aW9uLmZvcmNlVmFsdWUuY29uZGl0aW9uLCBjb250ZXh0KTtcbiAgICBjb250ZXh0W2NvbXBsZXRlTmFtZV0gPSBpbnN0YW5jZS52YWx1ZTtcbiAgICBjb250ZXh0LiR2YWx1ZSA9IGluc3RhbmNlLnZhbHVlO1xuICB9XG5cbiAgaW5zdGFuY2UudmFsaWRhdGlvblJlc3VsdHMgPVxuICAgICAgZXZhbHVhdGVWYWxpZGF0aW9uR3JvdXAodmFsaWRhdGlvbiwgY29udGV4dFtjb21wbGV0ZU5hbWVdLCBjb250ZXh0KTtcbiAgaW5zdGFuY2UudmFsaWQgPSBpbnN0YW5jZS52YWxpZGF0aW9uUmVzdWx0cy5yZWR1Y2UoXG4gICAgICAocHJldjogYm9vbGVhbiwgeDogQWpmVmFsaWRhdGlvblJlc3VsdCkgPT4gcHJldiAmJiB4LnJlc3VsdCwgdHJ1ZSk7XG59XG4iXX0=