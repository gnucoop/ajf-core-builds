/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { __assign } from "tslib";
import { createFormula, evaluateExpression } from '@ajf/core/models';
import { deepCopy } from '@ajf/core/utils';
import { chartToChartJsType } from '../../chart-utils';
import { AjfWidgetType } from '../../interface/widgets/widget-type';
import { evaluateAggregation } from '../aggregation/evaluate-aggregation';
import { createWidgetInstance } from './create-widget-instance';
export function widgetToWidgetInstance(widget, context, ts) {
    var wi = createWidgetInstance(widget, context, ts);
    if (widget.widgetType === AjfWidgetType.Column || widget.widgetType === AjfWidgetType.Layout) {
        var wwc_1 = widget;
        var wwci_1 = wi;
        var content_1 = [];
        wwc_1.content.forEach(function (c) {
            if (wwc_1.repetitions != null) {
                wwci_1.repetitions = evaluateExpression(wwc_1.repetitions.formula, context);
                if (typeof wwci_1.repetitions === 'number' && wwci_1.repetitions > 0) {
                    for (var i = 0; i < wwci_1.repetitions; i++) {
                        content_1.push(widgetToWidgetInstance(c, __assign(__assign({}, context), { '$repetition': i }), ts));
                    }
                }
            }
            else {
                content_1.push(widgetToWidgetInstance(c, context, ts));
            }
            wwci_1.content = content_1;
        });
    }
    else if (widget.widgetType === AjfWidgetType.Chart) {
        var cw = widget;
        var cwi = wi;
        var labels = cw.labels instanceof Array ? cw.labels : [cw.labels];
        var evLabels = labels.map(function (l) {
            var evf = evaluateExpression(l.formula, context);
            try {
                if (evf instanceof Array) {
                    evf = evf.map(function (v) { return v != null && typeof v === 'string' && v.trim().length > 0
                        ? ts.instant(v) : v; });
                }
                else {
                    evf = evf != null && typeof evf === 'string' && evf.trim().length > 0
                        ? ts.instant(evf) : evf;
                }
            }
            catch (_e) {
            }
            return evf;
        });
        cwi.labels = cw.labels instanceof Array ? evLabels : evLabels[0];
        cwi.datasets = cw.dataset.map(function (d) {
            var ds = __assign(__assign({}, d.options || {}), { data: evaluateAggregation(d.aggregation, d.formula, context) });
            if (d.chartType != null) {
                var ct = chartToChartJsType(d.chartType);
                ds = __assign(__assign({}, ds), { chartType: ct, type: ct });
            }
            if (d.options != null) {
                ds = __assign(__assign({}, ds), { options: d.options });
            }
            if (d.label != null) {
                ds = __assign(__assign({}, ds), { label: d.label });
            }
            if (d.datalabels != null) {
                ds.datalabels = deepCopy(d.datalabels);
            }
            return ds;
        });
        cwi.data = { labels: cwi.labels, datasets: cwi.datasets };
        cwi.chartType = chartToChartJsType(cw.type || cw.chartType);
        if (cw.options != null && cw.options.plugins != null) {
            var plugins_1 = cw.options.plugins;
            var pluginNames = Object.keys(plugins_1);
            pluginNames.forEach(function (pluginName) {
                var plugin = plugins_1[pluginName];
                var pluginOptions = Object.keys(plugin);
                pluginOptions.forEach(function (pluginOptionName) {
                    var pluginOption = plugin[pluginOptionName];
                    if (typeof pluginOption !== 'string' &&
                        pluginOption != null &&
                        pluginOption.formula != null) {
                        plugin[pluginOptionName] = evaluateExpression(pluginOption.formula, context);
                    }
                });
            });
        }
    }
    else if (widget.widgetType === AjfWidgetType.Table) {
        var tw_1 = widget;
        var twi = wi;
        var trFormula_1 = function (f) {
            var formula = f.formula;
            if (formula.substr(0, 1) === '"') {
                var ft = formula.slice(1, -1);
                var transFt = ft != null && typeof ft === 'string' && ft.trim().length > 0
                    ? ts.instant(ft) : ft;
                if (ft.length > 0) {
                    formula = "\"" + transFt + "\"";
                }
            }
            else {
                formula = formula != null && typeof formula === 'string' && formula.trim().length > 0
                    ? ts.instant(formula) : formula;
            }
            return evaluateExpression(formula, context);
        };
        twi.dataset = tw_1.dataset.map(function (row) { return row.map(function (cell) {
            return cell.formula instanceof Array ? cell.formula.map(function (f) { return trFormula_1(f); }) :
                trFormula_1(cell.formula);
        }); });
        twi.data = (tw_1.dataset ||
            []).map(function (row) { return row.map(function (cell) { return ({
            value: evaluateExpression(cell.formula.formula, context),
            style: __assign(__assign({}, tw_1.cellStyles), cell.style),
            rowspan: cell.rowspan,
            colspan: cell.colspan,
        }); }); });
    }
    else if (widget.widgetType === AjfWidgetType.Image) {
        var iw = widget;
        var iwi = wi;
        if (iw.flag) {
            iwi.flag = evaluateExpression(iw.flag.formula, context);
        }
        if (iw.icon) {
            iwi.icon = evaluateExpression(iw.icon.formula, context);
        }
        if (iw.url) {
            iwi.url = evaluateExpression(iw.url.formula, context);
        }
    }
    else if (widget.widgetType === AjfWidgetType.ImageContainer) {
        var icw = widget;
        var icwi = wi;
        if (icw.flags) {
            icwi.flags = icw.flags instanceof Array
                ? icw.flags.map(function (f) { return evaluateExpression(f.formula, context); })
                : evaluateExpression(icw.flags.formula, context);
        }
        if (icw.icons) {
            icwi.icons = icw.icons instanceof Array
                ? icw.icons.map(function (f) { return evaluateExpression(f.formula, context); })
                : evaluateExpression(icw.icons.formula, context);
        }
        if (icw.urls) {
            icwi.urls = icw.urls instanceof Array
                ? icw.urls.map(function (f) { return evaluateExpression(f.formula, context); })
                : evaluateExpression(icw.urls.formula, context);
        }
    }
    else if (widget.widgetType === AjfWidgetType.Text) {
        var tew = widget;
        var tewi = wi;
        var formulaRegEx = /\[{2}(.+?)\]{2}/g;
        var matches = [];
        var match = void 0;
        var htmlText_1 = tew.htmlText;
        while (match = formulaRegEx.exec(htmlText_1)) {
            var idx = match.index;
            var len = match[0].length;
            var formula = createFormula({ formula: match[1] });
            matches.push({ idx: idx, len: len, formula: formula });
        }
        matches.reverse().forEach(function (m) {
            var calcValue;
            try {
                calcValue = evaluateExpression(m.formula.formula, context);
            }
            catch (e) {
                calcValue = '';
            }
            htmlText_1 = "" + htmlText_1.substr(0, m.idx) + calcValue + htmlText_1.substr(m.idx + m.len);
        });
        tewi.htmlText = htmlText_1 != null && htmlText_1.length > 0 ? ts.instant(htmlText_1) : htmlText_1;
    }
    else if (widget.widgetType === AjfWidgetType.Formula) {
        var fw = widget;
        var fwi = wi;
        fwi.formula = evaluateExpression(fw.formula.formula, context);
    }
    else if (widget.widgetType === AjfWidgetType.Map) {
        var mw = widget;
        var mwi = wi;
        mwi.coordinate = evaluateExpression(mw.coordinate.formula, context);
    }
    return wi;
}
//# sourceMappingURL=data:application/json;base64,