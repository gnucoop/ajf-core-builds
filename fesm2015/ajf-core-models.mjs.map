{"version":3,"file":"ajf-core-models.mjs","sources":["../../../projects/core/models/src/error.ts","../../../projects/core/models/src/utils/create-condition.ts","../../../projects/core/models/src/serializers/condition-serializer.ts","../../../projects/core/models/src/utils/create-formula.ts","../../../projects/core/models/src/serializers/formula-serializer.ts","../../../projects/core/models/src/utils/always-condition.ts","../../../projects/core/models/src/utils/expression-utils.ts","../../../projects/core/models/src/utils/get-context-string.ts","../../../projects/core/models/src/utils/never-condition.ts","../../../projects/core/models/src/utils/normalize-expression.ts","../../../projects/core/models/src/utils/validate-expression.ts","../../../projects/core/models/src/public_api.ts","../../../projects/core/models/src/ajf-core-models.ts"],"sourcesContent":["/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nexport class AjfError extends Error {\n  override stack: string = '';\n  override get name(): string {\n    return 'AjfError';\n  }\n  override get message(): string {\n    return this._message;\n  }\n  // this private string is the error message\n  private _message: string;\n  /**\n   * this constructor will init the message error\n   */\n  constructor(message?: string) {\n    super(message);\n\n    // Set the prototype explicitly. Workaround needed in TS >= 2.1 when extending built-ins\n    // See: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md\n    Object.setPrototypeOf(this, AjfError.prototype);\n\n    this._message = message || '';\n  }\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCondition} from '../interface/condition';\n\n/**\n * It Creates an AjfCondition by conditio.\n * If condition.condition is not defined will be assigned ''.\n */\nexport function createCondition(condition: Partial<AjfCondition> = {}): AjfCondition {\n  return {condition: condition.condition || ''};\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCondition} from '../interface/condition';\nimport {createCondition} from '../utils/create-condition';\n\nexport class AjfConditionSerializer {\n  static fromJson(json: Partial<AjfCondition>): AjfCondition {\n    return createCondition(json);\n  }\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfFormula} from '../interface/formula';\n\n/**\n * It Creates an AjfFormula.\n * If formula.formula is not defined will be assigned ''.\n */\nexport function createFormula(formula: Partial<AjfFormula> = {}): AjfFormula {\n  return {formula: formula.formula || ''};\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfFormula} from '../interface/formula';\nimport {createFormula} from '../utils/create-formula';\n\nexport class AjfFormulaSerializer {\n  static fromJson(json: Partial<AjfFormula>): AjfFormula {\n    return createFormula(json);\n  }\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCondition} from '../interface/condition';\nimport {createCondition} from './create-condition';\n/**\n * It creates a true AjfCondidion.\n */\nexport function alwaysCondition(): AjfCondition {\n  return createCondition({condition: 'true'});\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfContext} from '@ajf/core/common';\nimport * as dateFns from 'date-fns';\nimport {parseScript} from 'meriyah';\nimport * as numbroMod from 'numbro';\nimport {AjfTableCell} from '@ajf/core/table';\nimport {AjfValidationFn} from '../interface/validation-function';\n\nlet execContext: any = {};\n\nconst numbro = numbroMod.default || numbroMod;\nexport interface Form {\n  [key: string]: string | number | null;\n}\nexport interface Instances {\n  [instance: string]: Form[];\n}\nexport interface MainForm {\n  [key: string]: string | number | boolean | null | Instances | undefined | null;\n  reps?: Instances;\n}\n\nfunction allReps(form: MainForm): Form[] {\n  if (form.reps == null) {\n    return [];\n  }\n  const reps: Form[] = [];\n  for (const key in form.reps) {\n    const r = form.reps[key];\n    reps.push(...r);\n  }\n  return reps;\n}\n\nconst MAX_REPS = 30;\n\nexport const getCodeIdentifiers = (\n  source: string,\n  includeDollarValue: boolean = false,\n): string[] => {\n  const identifiers = [] as string[];\n  try {\n    parseScript(source.toString(), {\n      onToken: (token, start, end) => {\n        if (token == 'Identifier') {\n          const identifier = source.toString().substring(start, end);\n          if (includeDollarValue || identifier !== '$value') {\n            identifiers.push(identifier);\n          }\n        }\n      },\n    });\n  } catch (e) {\n    console.log(source);\n    console.log(e);\n  }\n  return identifiers.sort((i1, i2) => i2.localeCompare(i1));\n};\n\nexport const dateUtils = {\n  addDays: dateFns.addDays,\n  addMonths: dateFns.addMonths,\n  addYears: dateFns.addYears,\n  endOfISOWeek: dateFns.endOfISOWeek,\n  format: dateFns.format,\n  getDay: dateFns.getDay,\n  parse: dateFns.parseISO,\n  startOfMonth: dateFns.startOfMonth,\n  startOfISOWeek: dateFns.startOfISOWeek,\n  isBefore: dateFns.isBefore,\n};\n\nexport class AjfExpressionUtils {\n  // TODO what is it for\n  static UTIL_FUNCTIONS = '';\n  /**\n   * It is a key-value dictionary, that mapping all Ajf validation functions.\n   */\n  static utils: {[name: string]: AjfValidationFn} = {\n    digitCount: {fn: digitCount},\n    decimalCount: {fn: decimalCount},\n    isInt: {fn: isInt},\n    notEmpty: {fn: notEmpty},\n    valueInChoice: {fn: valueInChoice},\n    scanGroupField: {fn: scanGroupField},\n    sum: {fn: sum},\n    dateOperations: {fn: dateOperations},\n    round: {fn: round},\n    extractArray: {fn: extractArray},\n    extractSum: {fn: extractSum},\n    extractArraySum: {fn: extractArraySum},\n    drawThreshold: {fn: drawThreshold},\n    extractDates: {fn: extractDates},\n    lastProperty: {fn: lastProperty},\n    sumLastProperties: {fn: sumLastProperties},\n    calculateTrendProperty: {fn: calculateTrendProperty},\n    calculateTrendByProperties: {fn: calculateTrendByProperties},\n    calculateAvgProperty: {fn: calculateAvgProperty},\n    calculateAvgPropertyArray: {fn: calculateAvgPropertyArray},\n    alert: {fn: alert},\n    formatNumber: {fn: formatNumber},\n    formatDate: {fn: formatDate},\n    isoMonth: {fn: isoMonth},\n    getCoordinate: {fn: getCoordinate},\n    Math: {fn: Math},\n    parseInt: {fn: parseInt},\n    parseFloat: {fn: parseFloat},\n    parseDate: {fn: dateUtils.parse},\n    Date: {fn: Date},\n    plainArray: {fn: plainArray},\n    COUNT_FORMS: {fn: COUNT_FORMS},\n    COUNT_FORMS_UNIQUE: {fn: COUNT_FORMS_UNIQUE},\n    COUNT_REPS: {fn: COUNT_REPS},\n    SUM: {fn: SUM},\n    MEAN: {fn: MEAN},\n    PERCENT: {fn: PERCENT},\n    LAST: {fn: LAST},\n    FIRST: {fn: FIRST},\n    MAX: {fn: MAX},\n    MEDIAN: {fn: MEDIAN},\n    MODE: {fn: MODE},\n    ALL_VALUES_OF: {fn: ALL_VALUES_OF},\n    REPEAT: {fn: REPEAT},\n    EVALUATE: {fn: EVALUATE},\n    INCLUDES: {fn: INCLUDES},\n    buildDataset: {fn: buildDataset},\n    buildAlignedDataset: {fn: buildAlignedDataset},\n    buildFormDataset: {fn: buildFormDataset},\n    buildAlignedFormDataset: {fn: buildAlignedFormDataset},\n    buildWidgetDataset: {fn: buildWidgetDataset},\n    buildWidgetDatasetWithDialog: {fn: buildWidgetDatasetWithDialog},\n    FILTER_BY_VARS: {fn: FILTER_BY_VARS},\n    FILTER_BY: {fn: FILTER_BY},\n    IS_BEFORE: {fn: IS_BEFORE},\n    IS_AFTER: {fn: IS_AFTER},\n    IS_WITHIN_INTERVAL: {fn: IS_WITHIN_INTERVAL},\n    COMPARE_DATE: {fn: COMPARE_DATE},\n    APPLY: {fn: APPLY},\n    TODAY: {fn: TODAY},\n    GET_AGE: {fn: GET_AGE},\n    BUILD_DATASET: {fn: BUILD_DATASET},\n    JOIN_FORMS: {fn: JOIN_FORMS},\n    LEN: {fn: LEN},\n    CONCAT: {fn: CONCAT},\n    REMOVE_DUPLICATES: {fn: REMOVE_DUPLICATES},\n    JOIN_REPEATING_SLIDES: {fn: JOIN_REPEATING_SLIDES},\n    FROM_REPS: {fn: FROM_REPS},\n    ISIN: {fn: ISIN},\n    OP: {fn: OP},\n    GET_LABELS: {fn: GET_LABELS},\n    APPLY_LABELS: {fn: APPLY_LABELS},\n    ROUND: {fn: ROUND},\n    CONSOLE_LOG: {fn: CONSOLE_LOG},\n  };\n}\n\n/**\n * UTILITY FUNCION\n * This function provide a deep copy builder of array of main forms.\n * That's a custom function related to mainforms that can be able to increase copy performance.\n *\n * @param {MainForm[]} forms\n * @return {*}  {MainForm[]}\n */\nfunction cloneMainForms(forms: MainForm[]): MainForm[] {\n  let res: MainForm[] = [];\n  for (const form of forms) {\n    if (form == null) {\n      res.push(form);\n      continue;\n    }\n    let reps: Instances = {};\n    if (form.reps != null) {\n      for (const key in form.reps) {\n        reps[key] = [...form.reps[key]];\n      }\n    }\n    res.push({...form, reps});\n  }\n  return res;\n}\n\nexport function evaluateExpression(\n  expression: string,\n  context?: AjfContext,\n  forceFormula?: string,\n): any {\n  return createFunction(forceFormula || expression)(context);\n}\n\ntype Func = (c?: AjfContext) => any;\n\nexport function createFunction(expression: string): Func {\n  if (!expression) {\n    return _ => '';\n  }\n  if (expression === 'true') {\n    return _ => true;\n  }\n  if (expression === 'false') {\n    return _ => false;\n  }\n  if (/^[a-zA-Z_$][\\w$]*$/.test(expression)) { // expression is an identifier\n    return c => c == null || c[expression] === undefined ? null : c[expression];\n  }\n  if (/^\"[^\"]*\"$/.test(expression) || /^'[^']*'$/.test(expression)) {\n    let str = expression.slice(1, -1);\n    return _ => str;\n  }\n\n  const argNames = [...new Set(getCodeIdentifiers(expression, true)).add('execContext')];\n  let func: Function;\n  try {\n    func = new Function(...argNames, 'return ' + expression);\n  } catch {\n    return _ => false;\n  }\n  return context => {\n    const argValues = argNames.map(name => {\n      if (context != null && context[name] !== undefined) {\n        return context[name];\n      }\n      if (AjfExpressionUtils.utils[name] !== undefined) {\n        return AjfExpressionUtils.utils[name].fn;\n      }\n      if (name === 'execContext') {\n        return execContext;\n      }\n      return null;\n    });\n    try {\n      return func(...argValues);\n    } catch {\n      return false;\n    }\n  };\n}\n\n/**\n * It returns the count of digit inside x.\n */\nexport function digitCount(x: number): number {\n  if (isNaN(x) || typeof x !== 'number') {\n    return 0;\n  }\n  if (!isFinite(x)) {\n    return Infinity;\n  }\n  return x.toString().replace(/[^0-9]/g, '').length;\n}\n/**\n * It is count the count of decimal digit inside s.\n */\nexport function decimalCount(x: string | number): number {\n  if (typeof x === 'string') {\n    x = parseFloat(x);\n  }\n  if (typeof x !== 'number' || isNaN(x)) {\n    return 0;\n  }\n  const parts = x.toString().split('.');\n  return parts.length > 1 ? parts[1].length : 0;\n}\n/**\n * It is true if x is an integer.\n */\nexport function isInt(x: string | number): boolean {\n  if (typeof x === 'string') {\n    return /^-?\\d+$/.test(x);\n  }\n  if (typeof x === 'number') {\n    return Math.round(x) === x;\n  }\n  return false;\n}\n/**\n * It is true if x is not empty.\n */\nexport function notEmpty(x: any): boolean {\n  return typeof x !== 'undefined' && x !== null ? x.toString().length > 0 : false;\n}\n/**\n * It is true if array contains x or array is equal to x.\n */\nexport function valueInChoice(array: any[], x: any): boolean {\n  return (array || []).indexOf(x) > -1 || array === x;\n}\n/**\n * It applies callback for reps times and accumulate the result in acc.\n */\nexport function scanGroupField(reps: number, acc: any, callback: any): any {\n  for (let i = 0; i < reps; i++) {\n    acc = callback(acc, i);\n  }\n  return acc;\n}\n/**\n * It returns the sum of the array values.\n */\nexport function sum(array: any[]): any {\n  return array.reduce((a, b) => a + b, 0);\n}\n/**\n * It applies add/remove(operation) v (day/month/year)period to dstring and return new format date.\n */\n// TODO check if deprecated instead refacotoring parameter type\n// TODO (dString: string|null, period:'day'|'month'|'year',\n// TODO operation: 'add/remove' = 'add', v:number)\nexport function dateOperations(dString: string, period: string, operation: string, v: any): string {\n  const fmt = 'mm/dd/yyyy';\n  let d = typeof dString !== 'undefined' ? dateUtils.parse(dString) : new Date();\n  if (operation == 'remove') {\n    v = -v;\n  }\n  let dateOp;\n  switch (period) {\n    case 'day':\n      dateOp = dateUtils.addDays;\n      break;\n    case 'month':\n      dateOp = dateUtils.addMonths;\n      break;\n    case 'year':\n      dateOp = dateUtils.addYears;\n      break;\n    default:\n      return '';\n  }\n  return dateUtils.format(dateOp(d, v), fmt);\n}\n\n/**\n * Fixed decimals for floating number\n * Resolve float sum problems like this: 0.1 + 0.2 = 0.30000000000000004\n * @param num\n * @returns\n */\nfunction truncate10(num: number) {\n  return parseFloat(num.toFixed(10));\n}\n\n/**\n * It rounds the num with the value of digits\n */\nexport function round(num: number | string, digits?: number): number {\n  digits = digits || 0;\n  let f;\n  if (typeof num !== 'number') {\n    try {\n      f = parseFloat(num);\n    } catch (e) {}\n  } else {\n    f = num;\n  }\n  if (f == null || isNaN(f)) {\n    f = 0;\n  }\n  const m = Math.pow(10, digits);\n  return Math.round(f * m) / m;\n}\n/**\n * It extracts property from source.\n * for every element of source if property and property2 are defined return the sum\n * else if only property is defined return him.\n */\nexport function extractArray(source: any[], property: string, property2?: string): any[] {\n  source = (source || []).filter((f: any) => f != null);\n  const res: any[] = [];\n  for (const s of source) {\n    if (s[property] != null && property2 != null && s[property2] != null) {\n      res.push(Number(s[property]) + Number(s[property2]));\n    } else if (s[property] != null) {\n      res.push(s[property]);\n    }\n  }\n  return res;\n}\n/**\n * It returns the sum of all defined properties of each element of source.\n */\nexport function extractSum(source: any[], properties: string[]): number {\n  properties = [...(properties || [])];\n\n  let sumVal = 0;\n  for (const prop of properties) {\n    const array = extractArray(source, prop);\n    for (const a of array) {\n      if (!isNaN(Number(a))) {\n        sumVal += Number(a);\n      }\n    }\n  }\n  return sumVal;\n}\n/**\n * It returns a number array that contains the sum of properties value inside the source.\n * extractArraySum([{a: 5}, {b: 1}, {a: 5, b: 1}], ['a', 'b']); =&gt; [6,6]\n */\nexport function extractArraySum(source: any[], properties: string[]): any[] {\n  const arrays: any[] = [];\n  properties = [...(properties || [])];\n\n  for (let i = 0; i < properties.length; i++) {\n    const array = extractArray(source, properties[i]);\n    arrays.push(array);\n  }\n\n  const res: any[] = [];\n  if (arrays.length > 0) {\n    for (let weekI = 0; weekI < arrays[0].length; weekI++) {\n      let sumVal = 0;\n      for (let propI = 0; propI < properties.length; propI++) {\n        sumVal = sumVal + Number(arrays[propI][weekI]);\n      }\n      res.push(sumVal);\n    }\n  }\n  return res;\n}\n/**\n * Draw a threshold line on chart related to the property.\n */\nexport function drawThreshold(source: any[], property: string, threshold: any[]): any[] {\n  source = (source || []).filter((f: any) => f != null);\n  threshold = threshold || [0];\n  if (!(threshold instanceof Array)) {\n    threshold = [threshold];\n  }\n  const l = source.length;\n  const res: any[] = [];\n  let count = 0;\n  for (let i = 0; i < l; i++) {\n    if (source[i][property] != null) {\n      if (threshold.length > count) {\n        res.push(threshold[count]);\n      } else {\n        res.push(threshold[0]);\n      }\n      count++;\n    }\n  }\n  return res;\n}\n/**\n * Extract the dates of the source object with property != null\n */\nexport function extractDates(source: any[], property: string, fmt: string): string[] {\n  source = (source || []).filter((f: any) => f != null);\n  const l = source.length;\n  const res: any = [];\n  let prefix = '';\n  for (let i = 0; i < l; i++) {\n    if (source[i][property] != null) {\n      switch (fmt) {\n        case 'WW':\n        case 'ww':\n          prefix = 'W';\n          res.push(prefix + formatDate(source[i]['date_start'], fmt));\n          break;\n        case 'MM':\n        case 'mm':\n          prefix = 'M';\n          res.push(prefix + isoMonth(source[i]['date_start'], fmt));\n          break;\n        default:\n          prefix = '';\n          res.push(prefix + formatDate(source[i]['date_start'], fmt));\n      }\n    }\n  }\n  return res;\n}\n/**\n * Extract the last property contains in source != null\n */\nexport function lastProperty(source: any, property: string): any {\n  source = (source || []).filter((f: any) => f != null);\n  let l = source.length - 1;\n\n  while (l >= 0 && source[l][property] == null) {\n    l--;\n    if (l < 0) {\n      return '';\n    }\n  }\n  return l >= 0 ? source[l][property] : '';\n}\n/**\n * It sum the LAst properties of source.\n */\nexport function sumLastProperties(source: any[], properties: string[]): number {\n  source = (source || []).filter((f: any) => f != null);\n  let sumVal = 0;\n  let val = 0;\n  for (let i = 0; i < properties.length; i++) {\n    val = Number(lastProperty(source, properties[i]));\n    if (!isNaN(val)) {\n      sumVal += val;\n    }\n  }\n  return sumVal;\n}\n/**\n * Compute the trend of the property contained on the source.\n */\nexport function calculateTrendProperty(source: any[], property: string): string {\n  source = (source || []).filter((f: any) => f != null);\n  let last = source.length - 1;\n  while (source[last][property] == null) {\n    if (last == 0) {\n      break;\n    }\n    last--;\n  }\n  let lastLast = last - 1;\n  if (last == 0) {\n    lastLast = last;\n  } else {\n    while (source[lastLast][property] == null) {\n      if (lastLast == 0) {\n        lastLast = last;\n        break;\n      }\n      lastLast--;\n    }\n  }\n\n  const lastProp = source[last] ? source[last][property] || 0 : 0;\n  const lastLastProp = source[lastLast] ? source[lastLast][property] || 0 : 0;\n\n  if (lastProp == lastLastProp) {\n    return '<p><i class=\"material-icons\" style=\"color:blue\">trending_flat</i></p>';\n  } else if (lastProp > lastLastProp) {\n    return '<p><i class=\"material-icons\" style=\"color:green\">trending_up</i></p>';\n  } else {\n    return '<p><i class=\"material-icons\" style=\"color:red\">trending_down</i></p>';\n  }\n}\n/**\n * Compute the average value of the property contained on the source.\n */\nexport function calculateTrendByProperties(source: any[], properties: string[]): string {\n  const arraysum = extractArraySum(source, properties);\n\n  const lastProp = arraysum.length > 0 ? arraysum[arraysum.length - 1] || 0 : 0;\n  const lastLastProp = arraysum.length > 1 ? arraysum[arraysum.length - 2] || 0 : lastProp;\n\n  if (lastProp == lastLastProp) {\n    return '<p><i class=\"material-icons\" style=\"color:blue\">trending_flat</i></p>';\n  } else if (lastProp > lastLastProp) {\n    return '<p><i class=\"material-icons\" style=\"color:green\">trending_up</i></p>';\n  } else {\n    return '<p><i class=\"material-icons\" style=\"color:red\">trending_down</i></p>';\n  }\n}\n/**\n *\n */\nexport function calculateAvgProperty(\n  source: any[],\n  property: string,\n  range: number,\n  coefficient: number,\n): number {\n  source = (source || []).filter((f: any) => f != null);\n\n  coefficient = coefficient || 1;\n  range = range || 12;\n\n  let l = source.length;\n  let res = 0;\n  let counter = 0;\n  let noZero = 0;\n\n  if (l < range) {\n    range = l;\n  }\n\n  while (range != 0) {\n    if (source[l - 1][property] != null) {\n      counter++;\n      res += Number(source[l - 1][property]);\n\n      if (source[l - 1][property] > 0) {\n        noZero++;\n      }\n    }\n    l--;\n    range--;\n  }\n\n  if (coefficient == 0) {\n    return noZero;\n  } else {\n    return round((res / counter) * coefficient, 2) || 0;\n  }\n}\n\nexport function calculateAvgPropertyArray(\n  source: any[],\n  properties: string[],\n  range: number,\n  coefficient: number,\n): number[] {\n  source = (source || []).filter((f: any) => f != null);\n  const resArr: any[] = [];\n\n  if (properties && properties.length > 0) {\n    let avg = 0;\n\n    coefficient = coefficient || 1;\n    range = range || 12;\n\n    const sourceArr =\n      properties.length > 1\n        ? extractArraySum(source, properties)\n        : extractArray(source, properties[0]);\n\n    let l = sourceArr.length;\n\n    for (let len = l; len > 0; len--) {\n      let res = 0;\n      let counter = 0;\n      let noZero = 0;\n\n      if (len < range) {\n        range = len;\n      }\n\n      for (let r = 1; r <= range; r++) {\n        let val = sourceArr[len - r];\n        if (val != null) {\n          counter++;\n          res += Number(val);\n          if (val > 0) {\n            noZero++;\n          }\n        }\n      }\n\n      if (counter > 0) {\n        if (coefficient == 0) {\n          avg = noZero;\n        } else {\n          avg = (res / counter) * coefficient || 0;\n        }\n        resArr.push(round(avg, 2));\n      }\n    }\n  }\n  return resArr.reverse();\n}\n\nexport function alert(source: any[], property: string, threshold: number): string {\n  source = [...(source || [])];\n\n  if (lastProperty(source, property) > threshold) {\n    return '<p><i class=\"material-icons\" style=\"color:red\">warning</i></p>';\n  } else {\n    return '<p></p>';\n  }\n}\n\nexport function formatNumber(num: number, fmt?: string): string {\n  fmt = fmt || '0,0[.]0';\n  return numbro(num).format(fmt);\n}\n\nexport function formatDate(date: Date | string, fmt?: string): string {\n  fmt = fmt || 'mm-DD-yyyy';\n  return dateUtils.format(typeof date === 'string' ? dateUtils.parse(date) : date, fmt);\n}\n\nexport function isoMonth(date: Date, fmt?: string): string {\n  fmt = fmt || 'mm';\n  const du = dateUtils;\n  return du.format(du.addDays(du.startOfISOWeek(date), 3), fmt);\n}\n\nexport function getCoordinate(source: any, zoom?: number): [number, number, number] {\n  zoom = zoom || 6;\n  if (source == null) {\n    return [51.505, -0.09, zoom];\n  } else {\n    return [source[0], source[1], zoom];\n  }\n}\n\n/**\n * Returns an array containing all the values that the specified field takes in the forms.\n * The values are converted to strings.\n */\nexport function ALL_VALUES_OF(forms: MainForm[], field: string, filter: Func|string = 'true'): string[] {\n  forms = (forms || []).filter(f => f != null);\n  if (typeof(filter) === 'string') {\n    filter = createFunction(filter);\n  }\n  let values: string[] = [];\n  for (const form of forms) {\n    if (form[field] != null && filter(form)) {\n      values.push(String(form[field]));\n    }\n    for (const rep of allReps(form)) {\n      if (rep[field] != null && filter({...form, ...rep})) {\n        values.push(String(rep[field]));\n      }\n    }\n  }\n  return [...new Set(values)];\n}\n\nexport function plainArray(params: any[]): any[] {\n  const res: any[] = [];\n  for (const param of params) {\n    if (Array.isArray(param)) {\n      res.push(...param);\n    } else {\n      res.push(param);\n    }\n  }\n  return res;\n}\n\n/**\n * Returns the number of forms for which filter evaluates to true,\n * for the form itself or for any of its repetitions.\n */\nexport function COUNT_FORMS(forms: MainForm[], filter: Func|string = 'true'): number {\n  forms = (forms || []).filter(f => f != null);\n  if (filter === 'true') {\n    return forms.length;\n  }\n  if (typeof(filter) === 'string') {\n    filter = createFunction(filter);\n  }\n  let count = 0;\n  for (const form of forms) {\n    if (filter(form)) {\n      count++;\n      continue;\n    }\n    for (const rep of allReps(form)) {\n      if (filter({...form, ...rep})) {\n        count++;\n        break;\n      }\n    }\n  }\n  return count;\n}\n\n/**\n * Counts the forms and all of their repetitions for which filter evaluates to true.\n */\nexport function COUNT_REPS(forms: MainForm[], filter: Func|string = 'true'): number {\n  forms = (forms || []).filter(f => f != null);\n  if (typeof(filter) === 'string') {\n    filter = createFunction(filter);\n  }\n  let count = 0;\n  for (const form of forms) {\n    if (filter(form)) {\n      count++;\n    }\n    for (const rep of allReps(form)) {\n      if (filter({...form, ...rep})) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\n/**\n * Deprecated. Use LEN(ALL_VALUES_OF)\n */\nexport function COUNT_FORMS_UNIQUE(forms: MainForm[], field: string, filter: Func|string = 'true'): number {\n  return ALL_VALUES_OF(forms, field, filter).length;\n}\n\nfunction getNumericValues(forms: (MainForm | Form)[], field: string, filter: Func|string = 'true'): number[] {\n  forms = (forms || []).filter(f => f != null);\n  if (typeof(filter) === 'string') {\n    filter = createFunction(filter);\n  }\n  let values: number[] = [];\n  for (const form of forms) {\n    const val = form[field];\n    if (val != null && !isNaN(Number(val)) && filter(form)) {\n      values.push(Number(val));\n    }\n    for (const rep of allReps(form)) {\n      const val = rep[field];\n      if (val != null && !isNaN(Number(val)) && filter({...form, ...rep})) {\n        values.push(Number(val));\n      }\n    }\n  }\n  return values;\n}\n\n/**\n * Aggregates and sums the values of the specified field.\n * An optional expression can be added to filter which forms to take for the sum.\n */\nexport function SUM(forms: (MainForm | Form)[], field: string, filter: Func|string = 'true'): number {\n  const values = getNumericValues(forms, field, filter);\n  let sum = 0;\n  for (const val of values) {\n    sum += val;\n  }\n  return truncate10(sum);\n}\n\n/**\n * Computes the mean of the values of the specified field.\n * An optional expression can be added to filter which forms to take for the sum.\n */\nexport function MEAN(forms: (Form | MainForm)[], field: string, filter: Func|string = 'true'): number {\n  const values = getNumericValues(forms, field, filter);\n  let sum = 0;\n  for (const val of values) {\n    sum += val;\n  }\n  return truncate10(sum / values.length);\n}\n\n/**\n * Calculates the % between two members.\n */\nexport function PERCENT(value1: number, value2: number): string {\n  const res = (+value1 * 100) / +value2;\n  return Number.isFinite(res) ? Math.round(res)+'%' : 'infinite';\n}\n\n/**\n * Evaluates the expression in the first form by date.\n */\n export function FIRST(forms: (Form | MainForm)[], expression: Func|string, date = 'created_at'): any {\n  if (typeof(expression) === 'string') {\n    expression = createFunction(expression);\n  }\n  forms = (forms || []).filter(f => f != null).sort((a, b) => {\n    const dateA = new Date(b[date] as string).getTime();\n    const dateB = new Date(a[date] as string).getTime();\n    return dateA - dateB;\n  });\n  if (forms.length === 0) {\n    return undefined;\n  }\n  return expression(forms[0]);\n}\n\n/**\n * Evaluates the expression in the last form by date.\n */\nexport function LAST(forms: (Form | MainForm)[], expression: Func|string, date = 'created_at'): any {\n  if (typeof(expression) === 'string') {\n    expression = createFunction(expression);\n  }\n  forms = (forms || []).filter(f => f != null).sort((a, b) => {\n    const dateA = new Date(b[date] as string).getTime();\n    const dateB = new Date(a[date] as string).getTime();\n    return dateA - dateB;\n  });\n  if (forms.length === 0) {\n    return undefined;\n  }\n  return expression(forms[forms.length - 1]);\n}\n\n/**\n * Computes the max value of the field.\n */\nexport function MAX(forms: (Form | MainForm)[], field: string, filter: Func|string = 'true'): number {\n  const values = getNumericValues(forms, field, filter);\n  let max = -Infinity;\n  for (const val of values) {\n    if (val > max) {\n      max = val;\n    }\n  }\n  return max;\n}\n\n/**\n * Computes the median value of the field.\n */\nexport function MEDIAN(forms: (Form | MainForm)[], field: string, filter: Func|string = 'true'): number {\n  const values = getNumericValues(forms, field, filter).sort();\n  if (values.length === 0) {\n    return NaN;\n  }\n  return values[Math.floor(values.length / 2)];\n}\n\n/**\n * Computes the mode value of the field.\n */\nexport function MODE(forms: (Form | MainForm)[], field: string, filter: Func|string = 'true'): number {\n  const values = getNumericValues(forms, field, filter);\n  const counters: {[val: number]: number} = {};\n  for (const val of values) {\n    if (counters[val] == null) {\n      counters[val] = 1;\n    } else {\n      counters[val]++;\n    }\n  }\n  let maxCount = 0;\n  for (const val in counters) {\n    if (counters[val] > maxCount) {\n      maxCount = counters[val];\n    }\n  }\n  for (const val in counters) {\n    if (counters[val] === maxCount) {\n      return Number(val);\n    }\n  }\n  return NaN;\n}\n\nexport function buildDataset(\n  dataset: (string | number | string[] | number[])[],\n  colspans: number[],\n): AjfTableCell[][] {\n  return buildAlignedDataset(dataset, colspans, []);\n}\n\n/**\n * Build a dataset for ajf dynamic table\n * @param dataset the dataset for the table\n * @param colspans colspan for each value in the dataset\n * @param textAlign alignment for each value in the dataset\n * @returns An AjfTableCell list\n */\nexport function buildAlignedDataset(\n  dataset: (string | number | string[] | number[])[],\n  colspans: number[],\n  textAlign: string[],\n): AjfTableCell[][] {\n  const res: AjfTableCell[][] = [];\n  const normalizeDataset: any[][] = [];\n  dataset.forEach((row: any, indexRow: number) => {\n    row = Array.isArray(row) ? row : [row];\n    normalizeDataset[indexRow % colspans.length] =\n      normalizeDataset[indexRow % colspans.length] != null\n        ? [...normalizeDataset[indexRow % colspans.length], ...row]\n        : [...row];\n  });\n  const transpose = normalizeDataset[0].map((_: any, colIndex: number) =>\n    normalizeDataset.map((row: any) => row[colIndex]),\n  );\n  transpose.forEach((data: any[], index: number) => {\n    const row: AjfTableCell[] = [];\n    data.forEach((cellValue: string | number, cellIndex: number) => {\n      row.push({\n        value: cellValue,\n        colspan: colspans[cellIndex],\n        rowspan: 1,\n        style: {\n          textAlign: textAlign[cellIndex] ? textAlign[cellIndex] : 'center',\n          color: 'black',\n          backgroundColor: index % 2 === 0 ? 'white' : '#ddd',\n        },\n      });\n    });\n    res.push(row);\n  });\n  return res;\n}\n\n/**\n * Build a dataset based on a list of Forms, for ajf dynamic table\n * @param dataset the dataset for the table\n * @param fields the list of fields name for each row\n * @param rowLink the http link for the row, with the form field name with the link value and the column position for the link.\n * ie: {'link': 'home_link', 'position': 0}\n * @param backgroundColorA the first backgroud color\n * @param backgroundColorB the second backgroud color\n * @returns An AjfTableCell list\n */\nexport function buildFormDataset(\n  dataset: MainForm[],\n  fields: string[],\n  rowLink: {link: string; position: number} | null,\n  _backgroundColorA?: string,\n  _backgroundColorB?: string,\n): AjfTableCell[][] {\n  return buildAlignedFormDataset(dataset, fields, [], [], rowLink, [], []);\n}\n\n/**\n * Build a dataset based on a list of Forms, for ajf dynamic table\n * @param dataset the dataset for the table\n * @param fields the list of fields name for each row\n * @param colspans colspan for each value in the dataset\n * @param textAlign alignment for each value in the dataset\n * @param rowLink the http link for the row, with the form field name with the link value and the column position for the link.\n * ie: {'link': 'home_link', 'position': 0}\n * @returns An AjfTableCell list\n */\nexport function buildAlignedFormDataset(\n  dataset: MainForm[],\n  fields: string[],\n  colspans: number[],\n  textAlign: string[],\n  rowLink: {link: string; position: number} | null,\n  dialogFields: string[],\n  dialogLabelFields: string[],\n): AjfTableCell[][] {\n  const res: AjfTableCell[][] = [];\n\n  const backgroundColorA = 'white';\n  const backgroundColorB = '#ddd';\n  if (dataset) {\n    let index: number = 0;\n    dataset.forEach((data: MainForm) => {\n      if (data) {\n        index++;\n        const row: AjfTableCell[] = [];\n        fields.forEach((field: string, cellIdx: number) => {\n          let cellValue = data[field] || '';\n          if (rowLink != null && cellIdx === rowLink['position']) {\n            cellValue = `<a href='${data[rowLink['link']]}'> ${data[field]}</a>`;\n          }\n          row.push({\n            value: cellValue,\n            colspan: colspans[cellIdx] && colspans[cellIdx] > 0 ? colspans[cellIdx] : 1,\n            rowspan: 1,\n            style: {\n              textAlign: textAlign[cellIdx] ? textAlign[cellIdx] : 'center',\n              color: 'black',\n              backgroundColor: index % 2 === 0 ? backgroundColorA : backgroundColorB,\n            },\n          });\n        });\n\n        if (dialogFields && dialogFields.length) {\n          let dialogHtml: string[] = [];\n          dialogFields.forEach((field: string, cellIdx: number) => {\n            let fieldValue = '\"\"';\n            if (data[field] != null) {\n              fieldValue =\n                \"<p class='dialog-item'><b>\" +\n                dialogLabelFields[cellIdx].replace(/['\\\"]+/g, '') +\n                '</b> <span>' +\n                data[field] +\n                '</span></p>';\n              dialogHtml.push(fieldValue);\n            }\n          });\n\n          row.push({\n            value:\n              '<div class=\"read_more_cell\"><p class=\"read_more_text\">Read more</p><b class=\"material-icons\">add_circle_outline</b></div>',\n            dialogHtml: dialogHtml.join(' '),\n            colspan: 1,\n            rowspan: 1,\n            style: {\n              textAlign: 'center',\n              color: 'black',\n              backgroundColor: index % 2 === 0 ? backgroundColorA : backgroundColorB,\n            },\n          });\n        }\n        res.push(row);\n      }\n    });\n  }\n  return res;\n}\n\n/**\n * create a widget dataset into a content list, based on a list of Forms, for paginated widget\n *\n * @param dataset the dataset for the widgets\n * @param fields the list of fields name for each row\n * @param rowLink the http link for the row, with the form field name with the link value and the column position for the link.\n * ie: {'link': 'home_link', 'position': 0}\n * @param cellStyles css styles for cells\n * @param rowStyle css styles for rows\n * @param percWidth an array with the same length of fields param, with the width for the columns.\n * ie: ['10%', '30%', '10%', '25%', '15%', '10%']\n * @param backgroundColorA the first backgroud color\n * @param backgroundColorB the second backgroud color\n * @returns An AjfTableWidget list\n */\nexport function buildWidgetDataset(\n  dataset: MainForm[],\n  fields: string[],\n  rowLink: {link: string; position: number} | null,\n  cellStyles: {[key: string]: any} | null,\n  rowStyle: {[key: string]: any} | null,\n  percWidth: string[],\n  backgroundColorA?: string,\n  backgroundColorB?: string,\n): any[] {\n  const res: {[key: string]: any}[] = [];\n  if (backgroundColorA == null) {\n    backgroundColorA = 'white';\n  }\n  if (backgroundColorB == null) {\n    backgroundColorB = '#ddd';\n  }\n  if (rowStyle == null) {\n    rowStyle = {\n      'text-align': 'right',\n      'margin-bottom': 0,\n      'border-collapse': 'collapse',\n    };\n  }\n  if (cellStyles == null) {\n    cellStyles = {\n      textAlign: 'center',\n      color: 'black',\n    };\n  }\n  if (percWidth == null || percWidth.length !== fields.length) {\n    const cellWidth = 100 / fields.length + '%';\n    percWidth = [];\n    fields.forEach(_ => percWidth.push(cellWidth));\n  }\n\n  if (dataset) {\n    let index: number = 0;\n    dataset.forEach((data: MainForm) => {\n      if (data) {\n        index++;\n        // Row is an AjfTableWidget\n        const row: {[key: string]: any} = {\n          styles: {\n            'text-align': 'right',\n            'margin-bottom': 0,\n            'border-collapse': 'collapse',\n            ...rowStyle,\n          },\n          visibility: {condition: 'true'},\n          widgetType: 5,\n          dataset: [[]] as any[][],\n          cellStyles: {'border-top': '1px solid grey'},\n        };\n\n        fields.forEach((field: string, cellIdx: number) => {\n          let formulaCell = '\"\"';\n          if (data[field] != null) {\n            formulaCell = '\"' + data[field] + '\"';\n            if (rowLink != null && cellIdx === rowLink['position']) {\n              formulaCell = `\"<a href='${data[rowLink['link']]}'> ${data[field]}</a>\"`;\n            }\n          }\n\n          row['dataset'][0].push({\n            label: '',\n            style: {\n              textAlign: 'center',\n              color: 'black',\n              backgroundColor: index % 2 === 0 ? backgroundColorA : backgroundColorB,\n              ...cellStyles,\n              width: percWidth[cellIdx],\n            },\n            formula: {\n              formula: formulaCell,\n            },\n            colspan: 1,\n            rowspan: 1,\n            aggregation: {\n              aggregation: 0,\n            },\n          });\n        });\n        res.push(row);\n      }\n    });\n  }\n  return res;\n}\n\n/**\n * create a widget dataset into a content list, based on a list of Forms, for paginated widget.\n * Each row is a AjfDialogWidget and, on click, open a dialog.\n *\n * @param dataset the dataset for the widgets\n * @param fields the list of fields name for each row\n * @param dialogFields the list of fields name to show in the dialog\n * @param dialogLabelFields the list of labels for each dialogFields\n * @param rowLink the http link for the row, with the form field name with the link value and the column position for the link.\n * ie: {'link': 'home_link', 'position': 0}\n * @param cellStyles css styles for cells\n * @param rowStyle css styles for rows\n * @param percWidth an array with the same length of fields param, with the width for the columns.\n * ie: ['10%', '30%', '10%', '25%', '15%', '10%']\n * @param backgroundColorA the first backgroud color\n * @param backgroundColorB the second backgroud color\n * @returns An AjfDialogWidget list\n */\nexport function buildWidgetDatasetWithDialog(\n  dataset: MainForm[],\n  fields: string[],\n  dialogFields: string[],\n  dialogLabelFields: string[],\n  cellStyles: {[key: string]: any} | null,\n  rowStyle: {[key: string]: any} | null,\n  percWidth: string[],\n  backgroundColorA?: string,\n  backgroundColorB?: string,\n): any[] {\n  const res: {[key: string]: any}[] = [];\n  if (backgroundColorA == null) {\n    backgroundColorA = 'white';\n  }\n  if (backgroundColorB == null) {\n    backgroundColorB = '#ddd';\n  }\n  if (rowStyle == null) {\n    rowStyle = {\n      'text-align': 'right',\n      'margin-bottom': 0,\n      'border-collapse': 'collapse',\n    };\n  }\n  if (cellStyles == null) {\n    cellStyles = {\n      textAlign: 'center',\n      color: 'black',\n    };\n  }\n  if (percWidth == null || percWidth.length !== fields.length) {\n    const cellWidth = 100 / fields.length + '%';\n    percWidth = [];\n    fields.forEach(_ => percWidth.push(cellWidth));\n  }\n\n  if (dataset) {\n    let index: number = 0;\n    dataset.forEach((data: MainForm) => {\n      if (data) {\n        index++;\n        // Row is an AjfTableWidget\n        const row: {[key: string]: any} = {\n          styles: {\n            'text-align': 'right',\n            'margin-bottom': 0,\n            'border-collapse': 'collapse',\n            ...rowStyle,\n          },\n          visibility: {condition: 'true'},\n          widgetType: 5,\n          dataset: [[]] as any[][],\n          cellStyles: {'border-top': '1px solid grey'},\n        };\n\n        fields.forEach((field: string, cellIdx: number) => {\n          let formulaCell = '\"\"';\n          if (data[field] != null) {\n            formulaCell = '\"' + data[field] + '\"';\n          }\n\n          row['dataset'][0].push({\n            label: '',\n            style: {\n              textAlign: 'center',\n              color: 'black',\n              backgroundColor: index % 2 === 0 ? backgroundColorA : backgroundColorB,\n              ...cellStyles,\n              width: percWidth[cellIdx],\n            },\n            formula: {\n              formula: formulaCell,\n            },\n            colspan: 1,\n            rowspan: 1,\n            aggregation: {\n              aggregation: 0,\n            },\n          });\n        });\n\n        let htmlDialog: string[] = [];\n        dialogFields.forEach((field: string, cellIdx: number) => {\n          let fieldValue = '\"\"';\n          if (data[field] != null) {\n            fieldValue =\n              \"<p class='dialog-item'><b>\" +\n              dialogLabelFields[cellIdx] +\n              '</b> <span>' +\n              data[field] +\n              '</span></p>';\n            htmlDialog.push(fieldValue);\n          }\n        });\n\n        const dialogContent: {[key: string]: any} = {\n          widgetType: 3,\n          styles: {\n            'margin': '0 1em',\n            'padding': '5px 10px',\n            'max-height': '360px',\n          },\n          visibility: {condition: 'true'},\n          htmlText: htmlDialog.join(' '),\n        };\n\n        // This is a Dialog Widget, added as comtainer for each table widget\n        const dialogRow: {[key: string]: any} = {\n          widgetType: 13,\n          styles: {\n            'margin': '0',\n          },\n          visibility: {condition: 'true'},\n          toggle: row,\n          content: [dialogContent],\n        };\n        res.push(dialogRow);\n      }\n    });\n  }\n  return res;\n}\n\n/**\n * Deprecated. Use MAP\n */\nexport function REPEAT(\n  forms: MainForm[],\n  array: string[],\n  fn: AjfValidationFn,\n  field: string,\n  filter: Func|string = 'true',\n): any[] {\n  if (typeof(filter) === 'string') {\n    filter = createFunction(filter);\n  }\n  return array.map(current => {\n    const currentFilter = (ctx?: AjfContext) => (filter as Func)({...ctx, current});\n    return (fn as any)(forms, field, currentFilter);\n  });\n}\n\n/**\n * Maps func to the elements of array.\n */\nexport function MAP(array: any[], func: (a: any) => any): any[] {\n  return array.map(func);\n}\n\n/**\n * For each form in forms, the specified field is set with the value given by expression.\n * The form's fields can be used inside expression.\n */\nexport function APPLY(forms: MainForm[], field: string, expression: Func|string): MainForm[] {\n  forms = cloneMainForms(forms);\n  if (typeof(expression) === 'string') {\n    expression = createFunction(expression);\n  }\n  for (const form of forms) {\n    if (form != null) {\n      form[field] = expression(form);\n    }\n  }\n  return forms;\n}\n\n/**\n * Rounds num to the specified number of digits after the point (or zero).\n */\nexport function ROUND(num: number | string, digits?: number): number {\n  return round(num, digits);\n}\n\n/**\n * Deprecated. Use IF_THEN_ELSE\n */\nexport function EVALUATE(condition: string, branch1: any, branch2: any): any {\n  if (evaluateExpression(condition)) {\n    return branch1;\n  } else {\n    return branch2;\n  }\n}\n\n/**\n * Tells if arr includes elem\n */\nexport function INCLUDES(arr: any[], elem: any): boolean {\n  return arr.includes(elem);\n}\n\n/**\n * This function builds a data structure that allows the use of the hindikit formulas\n * for every forms with repeating slides.\n * In particular, it builds a main data form with all the data relating to the slides and\n * a dictionary with the name reps thus made instance slideName forms.\n * Where a form is associated with each instance of the repeating slide.\n * example:\n * simple form:\n *  {\n *    $value: \"AGO\"\n *    cittadinanza__0: \"AGO\"\n *    codice_fiscale__0: \"jdfljglòkòkò\"\n *    country__0: \"AGO\"\n *    date_end: \"2021-01-10\"\n *    date_start: \"2021-01-10\"\n *    dob__0: \"2021-03-11\"\n *    first_name__0: \"pippo\"\n *    gender__0: \"f\"\n *    id_family: \"3bef3a3f-d95d-4a09-8df4-e812c55c61c6\"\n *    istruzione__0: null\n *    last_name__0: \"pippo\"\n *    permesso_soggiorno__0: \"no\"\n *    relazione__0: \"genitore\"\n *    solidando: \"solidando1\"\n *    stato_civile__0: null\n *  }\n * after BUILD_DATASET\n * MainForm:\n * {\n *    $value: \"AGO\"\n *    ajf_form_id: 0 ** added atribute that rappresent the index position insides input form list.\n *    ajf_family_component_count: 1** added atribute that rappresent the instance number of famili_component repeating slides.\n *    date_end: \"2021-01-10\"\n *    date_start: \"2021-01-10\"\n *    id_family: \"3bef3a3f-d95d-4a09-8df4-e812c55c61c6\"\n *    reps: {\n *      family_component: [\n *        {\n *          ajf_family_component_rep: 0 ** added atribute that rappresent the order instance of family_component repeating slide.\n *          cittadinanza: \"AGO\"\n *          codice_fiscale: \"jdfljglòkòkò\"\n *          country: \"AGO\"\n *          dob: \"2021-03-11\"\n *          first_name: \"pippo\"\n *          gender: \"f\"\n *          istruzione: null\n *          last_name: \"pippo\"\n *          permesso_soggiorno: \"no\"\n *          relazione: \"genitore\"\n *          stato_civile: null\n *        }\n *      ]\n *    }\n * }\n *\n * @param {Form[]} forms\n * @param {*} [schema] if schema is provided the instances inside the reps match with effective\n * slide name. Otherwise all repeating slides are associates to generic slide name \"rep\".\n * @return {*}  {MainForm[]}\n */\nexport function BUILD_DATASET(forms: Form[], schema?: any): MainForm[] {\n  const res: MainForm[] = [];\n  const generateMetadata = (slideName: string, slideInstance: number) => {\n    const resg: {[sname: string]: any} = {};\n    resg[`ajf_${slideName}_rep`] = slideInstance;\n    return resg;\n  };\n\n  forms = [...(forms || [])];\n\n  if (schema != null) {\n    const repeatingSlides: any[] = schema.nodes.filter((node: any) => node.nodeType === 4);\n    const obj: {[fieldName: string]: string} = {};\n    repeatingSlides.forEach(slide => {\n      let nodeFields = slide.nodes.map((n: any) => n.name);\n      nodeFields.forEach((nodeField: string) => {\n        obj[nodeField] = slide.name;\n      });\n    });\n\n    forms.forEach((f, formIdx) => {\n      const mainForm: MainForm = {reps: {}};\n      const fKeys: string[] = Object.keys(f);\n      const instances: {[slideName: string]: any} = {};\n\n      fKeys.forEach(fkey => {\n        const splittedKey: string[] = fkey.split('__');\n        const splittedLength: number = splittedKey.length;\n        const fieldName = splittedKey[0];\n        const slideInstance =\n          splittedKey[1] != null && Number.isInteger(+splittedKey[1]) ? +splittedKey[1] : null;\n        const slideName = obj[fieldName];\n        if (splittedLength === 2 && slideInstance != null && slideName != null) {\n          instances[slideName] = instances[slideName] != null ? instances[slideName] : [];\n          instances[slideName][slideInstance] =\n            instances[slideName][slideInstance] != null\n              ? instances[slideName][slideInstance]\n              : generateMetadata(slideName, slideInstance);\n          instances[slideName][slideInstance][fieldName] = f[fkey];\n        } else {\n          mainForm[fkey] = f[fkey];\n        }\n      });\n      mainForm[`ajf_form_id`] = formIdx;\n      const instanceKeys = Object.keys(instances);\n      instanceKeys.forEach(instanceKey => {\n        mainForm[`ajf_${instanceKey}_count`] = instances[instanceKey].length;\n      });\n      mainForm.reps = instances;\n      res.push(mainForm);\n    });\n    return res;\n  } else {\n    forms.forEach(form => {\n      const fKeys: string[] = Object.keys(form);\n      const noRepeatingFields: string[] = fKeys.filter(fkey => {\n        const splittedKey: string[] = fkey.split('__');\n        if (splittedKey.length === 2) {\n          return false;\n        }\n        return true;\n      });\n      const noRepForm: Form = {};\n\n      noRepeatingFields.forEach(field => {\n        noRepForm[field] = form[field];\n      });\n\n      const mainForm: MainForm = {...noRepForm, reps: {slide: []}};\n\n      for (let i = 0; i <= MAX_REPS; i++) {\n        const currentSlide: Form = {};\n        const onlyCurrentInstanceKeys: string[] = fKeys.filter(fkey => {\n          const splittedKey: string[] = fkey.split('__');\n          if (splittedKey.length === 2) {\n            return fkey.indexOf(`__${i}`) > -1;\n          }\n          return false;\n        });\n        // se il numero di attributi coincide il form data non ha repeatingslides\n        if (onlyCurrentInstanceKeys.length === 0) {\n          mainForm['ajf_rep_count'] = i;\n          break;\n        }\n        onlyCurrentInstanceKeys.forEach(key => {\n          const splittedKey = key.split('__');\n          const fieldName = splittedKey[0];\n          const slideInstance = splittedKey[1] != null ? +splittedKey[1] : null;\n          currentSlide[fieldName] = form[key];\n          currentSlide['ajf_rep'] = slideInstance != null ? slideInstance : currentSlide['ajf_rep'];\n        });\n        if (onlyCurrentInstanceKeys.length != 0) {\n          mainForm.reps!['slide'].push(currentSlide);\n        } else {\n          mainForm.reps = undefined;\n        }\n      }\n      res.push(mainForm);\n    });\n\n    return res;\n  }\n}\n\n/**\n * UTILITY FUNCION\n * This function take an ajf schema as input and extract a\n * dict that match each choice value (also with choicesOrigin name prefix) with its label\n * @param schema the ajf schema\n * @returns A dict with:\n *  {[choicesOriginName_choiceValue: string]: [choiceLabel: string]}\n *  {[choiceValue: string]: [choiceLabel: string]}\n */\nfunction extractLabelsBySchemaChoices(schema: any): {[choiceValue: string]: string} {\n  const choiceLabels: {[choiceValue: string]: string} = {};\n  if (schema && schema.choicesOrigins != null) {\n    (schema.choicesOrigins as any[]).forEach(choicesOrigin => {\n      if (choicesOrigin != null && choicesOrigin.choices != null) {\n        (choicesOrigin.choices as any[]).forEach(choice => {\n          choiceLabels[choicesOrigin.name + '_' + choice.value] = choice.label;\n          choiceLabels[choice.value] = choice.label;\n        });\n      }\n    });\n  }\n  return choiceLabels;\n}\n\n/**\n * UTILITY FUNCION\n * This function take an ajf schema as input and extract a one\n * dimensional array of AjfNode for each slide's field\n *\n * @param schema the ajf schema\n * @returns An object with all fields:\n *  {[fieldName: string]: ajf field}\n */\nfunction extractFlattenNodes(schema: any): {[field: string]: any} {\n  const fieldNodes: {[field: string]: any} = {};\n  if (schema && schema.nodes) {\n    const slides: any[] = schema.nodes.filter(\n      (node: any) => node.nodeType === 3 || node.nodeType === 4,\n    );\n    slides.forEach(slide => {\n      slide.nodes\n        .filter((node: any) => node.nodeType === 0)\n        .forEach((fieldNode: any) => {\n          fieldNodes[fieldNode.name] = fieldNode;\n        });\n    });\n  }\n  return fieldNodes;\n}\n\n/**\n * Returns a clone of forms, where the specified fields are replaced by the corresponding labels,\n * as defined by the choice origins in schema.\n *\n * @param {MainForm[]} formList\n * @param {*} schema the ajf schema\n * @param {string[]} fieldNames\n * @return {*}  {MainForm[]}\n */\nexport function APPLY_LABELS(formList: MainForm[], schema: any, fieldNames: string[]): MainForm[] {\n  formList = cloneMainForms(formList);\n  const choiceLabels: {[fieldName: string]: string} = extractLabelsBySchemaChoices(schema);\n  const flattenNodes = extractFlattenNodes(schema);\n\n  for (let i = 0; i < formList.length; i++) {\n    if (formList[i] == null) {\n      continue;\n    }\n    if (formList[i].reps != null) {\n      const f = formList[i];\n      const fKeys: string[] = Object.keys(f);\n      fKeys.forEach(fkey => {\n        const fieldNode = flattenNodes[fkey];\n        const choiceOriginNamePrefix =\n          fieldNode && fieldNode.choicesOriginRef ? fieldNode.choicesOriginRef + '_' : '';\n\n        if (fieldNames.includes(fkey) && f[fkey] !== null) {\n          let choiceValue: string[] = [];\n          if (Array.isArray(f[fkey])) {\n            choiceValue = f[fkey] as unknown as string[];\n          } else {\n            const multipleVals = (f[fkey] as string).split(',').map(v => v.trim());\n            if (multipleVals.length > 1) {\n              choiceValue = multipleVals;\n            } else {\n              choiceValue = [f[fkey] as string];\n            }\n          }\n          if (choiceValue != null) {\n            const labels = choiceValue.map(val => {\n              const valWithPrefix = choiceOriginNamePrefix + val;\n              return choiceLabels[valWithPrefix] != null\n                ? choiceLabels[valWithPrefix]\n                : choiceLabels[val] != null\n                ? choiceLabels[val]\n                : val;\n            });\n            if (labels && labels.length) {\n              const labelFieldName = fkey + '_choicesLabel';\n              formList[i][labelFieldName] = labels.length > 1 ? labels.join(', ') : labels[0];\n            }\n          }\n        }\n      });\n    }\n  }\n  return formList;\n}\n\n/**\n * Deprecated. Use FILTER_BY\n */\nexport function FILTER_BY_VARS(formList: MainForm[], expression: string): MainForm[] {\n  return FILTER_BY(formList, expression);\n}\n\n/**\n * Returns a copy of forms and its repetitions, keeping only the ones for which expression evaluates to true.\n */\nexport function FILTER_BY(forms: MainForm[], expression: Func|string): MainForm[] {\n  forms = forms || [];\n  if (expression === 'true') {\n    return cloneMainForms(forms);\n  }\n  if (typeof(expression) === 'string') {\n    expression = createFunction(expression);\n  }\n  const res: MainForm[] = [];\n  for (let form of forms.filter(f => f != null)) {\n    form = {...form};\n    const filteredReps: Instances = {};\n    let someReps = false;\n    if (form.reps != null) {\n      for (const key in form.reps) {\n        filteredReps[key] = form.reps[key].filter(rep =>\n          (expression as Func)({...form, ...rep})\n        );\n        form[`ajf_${key}_count`] = filteredReps[key].length;\n        someReps ||= filteredReps[key].length > 0;\n      }\n    }\n    if (someReps || expression(form)) {\n      form.reps = filteredReps;\n      res.push(form);\n    }\n  }\n  return res;\n}\n\n/**\n * Returns today's date.\n *\n * @export\n * @param {string} [format='yyyy-MM-dd']\n * @return {*}  {string}\n */\nexport function TODAY(format = 'yyyy-MM-dd'): string {\n  return dateFns.format(new Date(), format);\n}\n\n/**\n * Logs val to the console.\n * \n * @export\n * @param {*} val\n */\nexport function CONSOLE_LOG(val: any): void {\n  console.log(val);\n}\n\n/**\n * Computes the current age in years, given the date of birth.\n *\n * @export\n * @param {(string | null)} dob\n * @return {*}  {number}\n */\nexport function GET_AGE(dob: string | null): number {\n  if (dob == null) {\n    return NaN;\n  }\n  return dateFns.differenceInYears(new Date(), new Date(dob));\n}\n\n/**\n * If data is a form with repetitions, returns the number of repetitions;\n * If data is an array, returns its length;\n * Otherwise returns 0.\n *\n * @export\n * @param {(MainForm | any[])} dataset\n * @return {*}  {number}\n */\nexport function LEN(dataset: MainForm | any[]): number {\n  if (dataset == null) {\n    return 0;\n  }\n  const form = dataset as MainForm;\n  if (form.reps != null) {\n    return allReps(form).length;\n  }\n  return (dataset as any[]).length || 0;\n}\n\n/**\n * Array concatenation.\n *\n * @export\n * @param {any[]} a\n * @param {any[]} b\n * @return {*}  {any[]}\n */\nexport function CONCAT(a: any[], b: any[]): any[] {\n  return a.concat(b);\n}\n\n/**\n * Removes duplicate elements from an array.\n *\n * @export\n * @param {any[]} arr\n * @return {*}  {any[]}\n */\nexport function REMOVE_DUPLICATES(arr: any[]): any[] {\n  return [...new Map(arr.map(v => [JSON.stringify(v), v])).values()];\n}\n\n/**\n * Returns true if date is before dateToCompare.\n *\n * @export\n * @param {string} date\n * @param {string} dateToCompare\n * @return {*}  {boolean}\n */\nexport function IS_BEFORE(date: string, dateToCompare: string): boolean {\n  const dateA: Date = dateFns.parseISO(date);\n  const dateB: Date = dateFns.parseISO(dateToCompare);\n  return dateFns.isBefore(dateA, dateB);\n}\n\n/**\n * Returns true if date is after dateToCompare.\n *\n * @export\n * @param {string} date\n * @param {string} dateToCompare\n * @return {*}  {boolean}\n */\nexport function IS_AFTER(date: string, dateToCompare: string): boolean {\n  const dateA: Date = dateFns.parseISO(date);\n  const dateB: Date = dateFns.parseISO(dateToCompare);\n  return dateFns.isAfter(dateA, dateB);\n}\n\n/**\n * Returns true if date is between dateStart and dateEnd.\n *\n * @export\n * @param {string} date\n * @param {string} dateStart\n * @param {string} dateEnd\n * @return {*}  {boolean}\n */\nexport function IS_WITHIN_INTERVAL(date: string, dateStart: string, dateEnd: string): boolean {\n  const dateToCompare: Date = dateFns.parseISO(date);\n  const interval: Interval = {\n    start: dateFns.parseISO(dateStart),\n    end: dateFns.parseISO(dateEnd),\n  };\n  return dateFns.isWithinInterval(dateToCompare, interval);\n}\n\n/**\n * Compares date with an interval.\n * Returns '-1' (or the first element of labels) if date is before dateStart,\n * '0' (or the second element) if date is between dateStart and dateEnd,\n * '1' (or the third element) if date is after dateEnd.\n *\n * @export\n * @param {string} date\n * @param {string} dateStart\n * @param {string} dateEnd\n * @param {string[]} labels an optional array of string for the output values\n * @return {*}  {string}\n */\nexport function COMPARE_DATE(\n  date: string,\n  dateStart: string,\n  dateEnd: string,\n  labels?: string[],\n): string {\n  const dateToCompare: Date = dateFns.parseISO(date);\n  const dateA: Date = dateFns.parseISO(dateStart);\n  const dateB: Date = dateFns.parseISO(dateEnd);\n  const interval: Interval = {\n    start: dateA,\n    end: dateB,\n  };\n  if (labels == null) {\n    labels = ['-1', '0', '1'];\n  }\n  if (dateFns.isBefore(dateToCompare, dateA)) {\n    return labels[0];\n  }\n  if (dateFns.isWithinInterval(dateToCompare, interval)) {\n    return labels[1];\n  }\n  if (dateFns.isAfter(dateToCompare, dateB)) {\n    return labels[2];\n  }\n  return '';\n}\n\n/**\n * Performs a left join of formsA and formsB.\n */\nexport function JOIN_FORMS(\n  formsA: (MainForm | Form)[],\n  formsB: (MainForm | Form)[],\n  keyA: string,\n  keyB?: string,\n): (MainForm | Form)[] {\n  return JOIN_REPEATING_SLIDES(formsA, formsB, keyA, keyB as any, null as any);\n}\n\n/**\n * Performs a left join of formsA and formsB, like JOIN_FORMS.\n * In addition, for each matching pair of formA and formB, their repeating slides are also joined.\n */\nexport function JOIN_REPEATING_SLIDES(\n  formsA: MainForm[],\n  formsB: MainForm[],\n  keyA: string,\n  keyB: string,\n  subkeyA: string,\n  subkeyB?: string,\n): MainForm[] {\n  formsA = cloneMainForms(formsA || []);\n  formsB = cloneMainForms(formsB || []);\n  if (keyB == null) {\n    keyB = keyA;\n  }\n  if (subkeyB == null) {\n    subkeyB = subkeyA;\n  }\n  const indexB: {[val: string]: MainForm} = {};\n  for (let i = formsB.length - 1; i >= 0; i--) {\n    const val = formsB[i] && formsB[i][keyB];\n    if (val != null) {\n      indexB[String(val)] = formsB[i];\n    }\n  }\n  const res: MainForm[] = [];\n  for (const formA of formsA) {\n    const val = formA && formA[keyA];\n    const formB = indexB[String(val)];\n    if (val == null || formB == null) {\n      res.push(formA);\n      continue;\n    }\n    const repsA = formA.reps || {};\n    const repsB = formB.reps || {};\n    if (subkeyA != null) {\n      const allRepsB = allReps(formB);\n      for (const k in repsA) {\n        repsA[k] = JOIN_FORMS(repsA[k], allRepsB, subkeyA, subkeyB) as Form[];\n        formA[`ajf_${k}_count`] = repsA[k].length;\n      }\n    }\n    res.push({...formB, ...formA, reps: {...repsB, ...repsA}});\n  }\n  return res;\n}\n\n/**\n * Returns the array obtained by evaluating expression for every repetition of form.\n *\n * @export\n * @param {MainForm} form\n * @param {string} expression\n * @return {*}  {any[]}\n */\nexport function FROM_REPS(form: MainForm, expression: Func|string): any[] {\n  if (typeof(expression) === 'string') {\n    expression = createFunction(expression);\n  }\n  return allReps(form || {}).map(rep =>\n    (expression as Func)({...form, ...rep})\n  );\n}\n\n/**\n * Deprecated. Use INCLUDES\n */\nexport function ISIN(dataset: any[], value: any): boolean {\n  if (dataset == null || value == null) {\n    return false;\n  }\n  return dataset.indexOf(value) >= 0;\n}\n\n/**\n * Applies the operator to every pair of elements (arrayA[i], arrayB[i]),\n * returning the array of results.\n */\nexport function OP(arrayA: any[], arrayB: any[], operator: (a: any, b: any) => any): any[] {\n  const res: any[] = [];\n  for (let i = 0; i < Math.min(arrayA.length, arrayB.length); i++) {\n    const val = operator(arrayA[i], arrayB[i]);\n    res.push(val);\n  }\n  return res;\n}\n\n/**\n * Given an array of values, returns the corresponding array of labels,\n * as specified by the choices origin in schema.\n *\n * @export\n * @param {*} schema\n * @param {string[]} values\n * @return {*}  {string[]}\n */\nexport function GET_LABELS(schema: any, values: string[]): string[] {\n  const choiceLabels = extractLabelsBySchemaChoices(schema);\n  return values.map(val => choiceLabels[val] != null ? choiceLabels[val] : val);\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfContext} from '@ajf/core/common';\n\nimport {AjfExpressionUtils} from './expression-utils';\n\nexport function getContextString(context?: AjfContext): string {\n  let fstr = AjfExpressionUtils.UTIL_FUNCTIONS;\n  if (context instanceof Array) {\n    for (let i = 0; i < context.length; i++) {\n      fstr = `${fstr}var ${context[i]} = true;`;\n    }\n  } else if (context != null) {\n    Object.keys(context).forEach(x => {\n      let val: any = context[x];\n      if (val == null || isNaN(Number(val)) || val === '' || val instanceof Array) {\n        if (val instanceof Array) {\n          for (let i = 0; i < val.length; i++) {\n            val[i] =\n              ((val == null || isNaN(Number(val[i])) || val[i] === '') && val[i]) || Number(val[i]);\n          }\n        }\n        val = JSON.stringify(val);\n      } else {\n        val = Number(val);\n      }\n      fstr = `${fstr}var ${x} = ${val}; `;\n    });\n  }\n  return fstr;\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfCondition} from '../interface/condition';\nimport {createCondition} from './create-condition';\n\n/**\n * It creates a false AjfCondidion.\n */\nexport function neverCondition(): AjfCondition {\n  return createCondition({condition: 'false'});\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {getCodeIdentifiers} from './expression-utils';\n\nexport function normalizeExpression(\n  formula: string,\n  ancestorsNames: {[prop: string]: number},\n  prefix: number[],\n): string {\n  const ancestorsNameStrings = Object.keys(ancestorsNames);\n  const tokens = getCodeIdentifiers(formula);\n  tokens.forEach((t: any) => {\n    if (ancestorsNameStrings.indexOf(t) > -1) {\n      formula = formula.replace(\n        new RegExp(`\\\\b${t}\\\\b`, 'g'),\n        `${t}__${prefix.slice(ancestorsNames[t]).join('__')}`,\n      );\n    }\n  });\n  return formula;\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AjfContext} from '@ajf/core/common';\n\nimport {getContextString} from './get-context-string';\n\nlet cachedContext: any = {};\nlet cachedContextString = '{}';\n\nexport function validateExpression(str: string, context?: AjfContext): boolean {\n  if (context === cachedContext) {\n    console.log('cache hit');\n  } else {\n    cachedContext = context;\n    cachedContextString = getContextString(context);\n  }\n  let ctx = cachedContextString;\n  try {\n    let f = new Function(`${ctx}${str}`);\n    f();\n    f = <any>null;\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nexport * from './context';\nexport * from './error';\nexport * from './interface/condition';\nexport * from './interface/formula';\nexport * from './interface/validation-function';\nexport * from './serializers/condition-serializer';\nexport * from './serializers/formula-serializer';\nexport * from './utils/always-condition';\nexport * from './utils/create-condition';\nexport * from './utils/create-formula';\nexport * from './utils/expression-utils';\nexport * from './utils/get-context-string';\nexport * from './utils/never-condition';\nexport * from './utils/normalize-expression';\nexport * from './utils/validate-expression';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}