{"version":3,"file":"checkbox-group.mjs","sources":["../../../../../../src/core/checkbox-group/checkbox-group.ts","../../../../../../src/core/checkbox-group/checkbox-group-module.ts","../../../../../../src/core/checkbox-group/public-api.ts","../../../../../../src/core/checkbox-group/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, combineLatest, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\nexport const AJF_CHECKBOX_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => AjfCheckboxGroup),\n  multi: true\n};\n\nexport class AjfCheckboxGroupItemChange<T> {\n  source: AjfCheckboxGroupItem<T>;\n  value: any;\n}\n\nexport class AjfCheckboxGroupChange<T> {\n  source: AjfCheckboxGroup<T>;\n  value: any;\n}\n\nlet _uniqueIdCounter = 0;\n\n\n@Directive({\n  selector: 'ajf-checkbox-group,[ajf-checkbox-group]',\n  providers: [AJF_CHECKBOX_GROUP_VALUE_ACCESSOR]\n})\nexport class AjfCheckboxGroup<T> implements AfterContentInit, ControlValueAccessor {\n  checkboxes: AjfCheckboxGroupItem<T>[] = [];\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: T[] = [];\n  get value(): T[] {\n    return this._value;\n  }\n  @Input()\n  set value(newValue: T[]) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n      this._updateSelectedCheckboxesFromValue();\n      this._emitChangeEvent();\n    }\n  }\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string;\n  get name(): string {\n    return this._name;\n  }\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._updateCheckboxesNames();\n  }\n\n  /** Disables all toggles in the group. */\n  private _disabled: boolean = false;\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  @Input()\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: AjfCheckboxGroupItem<T>[] = [];\n  get selected() {\n    return this._selected;\n  }\n  set selected(selected: AjfCheckboxGroupItem<T>[]) {\n    this._selected = selected;\n    let values: T[] = [];\n    if (selected) {\n      selected.forEach(c => {\n        values.push(c.value);\n        if (!c.checked) {\n          c.checked = true;\n        }\n      });\n    }\n    this._value = values;\n  }\n\n  /** Event emitted when the group's value changes. */\n  private _change: EventEmitter<AjfCheckboxGroupChange<T>> =\n      new EventEmitter<AjfCheckboxGroupChange<T>>();\n  @Output()\n  readonly change: Observable<AjfCheckboxGroupChange<T>> =\n      this._change as Observable<AjfCheckboxGroupChange<T>>;\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  writeValue(value: T[]) {\n    this.value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  registerOnChange(fn: (value: T[]) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  addValue(value: T) {\n    let curValue = (this._value || []).slice(0);\n    if (curValue.indexOf(value) === -1) {\n      curValue.push(value);\n      this.value = curValue;\n    }\n  }\n\n  removeValue(value: T) {\n    let curValue = (this._value || []).slice(0);\n    let idx = curValue.indexOf(value);\n    if (idx > -1) {\n      curValue.splice(idx, 1);\n      this.value = curValue;\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._updateCheckboxesNames();\n    this._updateSelectedCheckboxesFromValue();\n  }\n\n  registerItem(item: AjfCheckboxGroupItem<T>): void {\n    this.checkboxes.push(item);\n  }\n\n  /** The method to be called in order to update ngModel. */\n  private _controlValueAccessorChangeFn: (value: any) => void = (_) => {};\n\n  private _updateCheckboxesNames(): void {\n    if (this.checkboxes == null) {\n      return;\n    }\n    this.checkboxes.forEach((checkbox) => {\n      if (checkbox == null) {\n        return;\n      }\n      checkbox.name = this._name;\n    });\n  }\n\n  private _updateSelectedCheckboxesFromValue(): void {\n    if (this.checkboxes == null) {\n      return;\n    }\n    this.checkboxes.forEach(checkbox => {\n      if (checkbox == null) {\n        return;\n      }\n      if ((this._value || []).indexOf(checkbox.value) > -1) {\n        checkbox.checked = true;\n      } else {\n        checkbox.checked = false;\n      }\n    });\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  private _emitChangeEvent(): void {\n    let event = new AjfCheckboxGroupChange<T>();\n    event.source = this;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this._change.emit(event);\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Directive()\nexport class AjfCheckboxGroupItem<T> implements OnInit {\n  /** The unique ID for this button toggle. */\n  private _checkboxId: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  readonly checkboxId: Observable<string> = this._checkboxId as Observable<string>;\n\n  @Input()\n  set id(id: string) {\n    this._checkboxId.next(id);\n  }\n\n  @Input() name: string;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  readonly checkboxGroup: AjfCheckboxGroup<T>;\n\n  /** Whether or not this button toggle is checked. */\n  private _checkedState: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  readonly checkedState: Observable<boolean> = this._checkedState as Observable<boolean>;\n  get checked(): boolean {\n    return this._checkedState.getValue();\n  }\n  @Input()\n  set checked(checked: boolean) {\n    this._checkedState.next(checked);\n  }\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabledState: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  readonly disabledState: Observable<boolean> = this._disabledState as Observable<boolean>;\n  get disabled(): boolean {\n    const disabled = this._disabledState.getValue();\n    return disabled || (this.checkboxGroup != null && this.checkboxGroup.disabled);\n  }\n  @Input()\n  set disabled(disabled: boolean) {\n    this._disabledState.next(disabled != null && disabled !== false);\n  }\n\n  /** Value assigned to this button toggle. */\n  private _value: T;\n  get value(): T {\n    return this._value;\n  }\n  @Input()\n  set value(value: T) {\n    if (this._value !== value) {\n      this._value = value;\n    }\n  }\n\n  private _checkedIconVal: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  get checkedIcon(): string {\n    return this._checkedIconVal.getValue();\n  }\n  @Input()\n  set checkedIcon(icon: string) {\n    this._checkedIconVal.next(icon);\n  }\n\n  private _notCheckedIconVal: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  get notCheckedIcon(): string {\n    return this._notCheckedIconVal.getValue();\n  }\n  @Input()\n  set notCheckedIcon(icon: string) {\n    this._notCheckedIconVal.next(icon);\n  }\n\n  readonly icon: Observable<string>;\n\n  /** Event emitted when the group value changes. */\n  private _change: EventEmitter<AjfCheckboxGroupItemChange<T>> =\n      new EventEmitter<AjfCheckboxGroupItemChange<T>>();\n  @Output()\n  readonly change: Observable<AjfCheckboxGroupItemChange<T>> =\n      this._change as Observable<AjfCheckboxGroupItemChange<T>>;\n\n  constructor(checkboxGroup?: AjfCheckboxGroup<T>) {\n    this.icon = combineLatest(this._checkedState, this._checkedIconVal, this._notCheckedIconVal)\n                    .pipe(\n                        map(([checked, checkedIcon, notCheckedIcon]) =>\n                                (checked ? checkedIcon : notCheckedIcon) as string),\n                    );\n\n    if (checkboxGroup) {\n      this.checkboxGroup = checkboxGroup;\n      this.checkboxGroup.registerItem(this);\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `ajf-checkbox-group-item-${_uniqueIdCounter++}`;\n    }\n\n    if (this.checkboxGroup && this.checkboxGroup.value &&\n        this.checkboxGroup.value.indexOf(this._value) > -1) {\n      this.checked = true;\n    }\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._toggle();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n\n    if (this.checkboxGroup != null) {\n      if (this.checked) {\n        this.checkboxGroup.addValue(this._value);\n      } else {\n        this.checkboxGroup.removeValue(this._value);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport {AjfCheckboxGroup} from './checkbox-group';\n\n\n@NgModule({\n  imports: [\n    FormsModule,\n  ],\n  declarations: [\n    AjfCheckboxGroup,\n  ],\n  exports: [\n    AjfCheckboxGroup,\n  ]\n})\nexport class AjfCheckboxGroupModule {\n}\n","/**\n * @license\n * Copyright (C) Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nexport * from './checkbox-group';\nexport * from './checkbox-group-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}